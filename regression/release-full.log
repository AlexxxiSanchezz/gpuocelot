INFO     Reading in test file /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/regression/full.level
INFO      Found the following tests:
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestLexer
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestParser
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestEmulator
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestInstructions
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestKernels
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestDataflowGraph
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestLLVMInstructions
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestPTXToLLVMTranslator
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestLLVMKernels
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCudaMalloc
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCudaTexture2D
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCudaTextureArray
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCudaGlobals
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestDeviceSwitching
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCudaSequence
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCalVectorScale
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestPTXAssembly
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestFunctionCall
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestIndirectFunctionCall
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestExternalFunctions
INFO     ==== INDIVIDUAL TEST RESULTS ====

INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestDeviceSwitching 
INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestLLVMInstructions 
INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestFunctionCall 
INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCudaTexture2D 
INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestInstructions 
INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCudaSequence 
INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestPTXToLLVMTranslator -i ../tests/ptx 
INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestLexer -i ../tests/ptx 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestLLVMInstructions
INFO     Test completed in 0.0374181270599 seconds
INFO      It produced the following output:
Pass/Fail : Pass


Name : TestLLVMInstructions

Description: A test for the assembly code generation and automatic 
             verfication of individual LLVM instructions. Test Points: 1) For each 
             instruction, generate several assembly strings using the 
             instruction's toString method, make sure that these pass the valid() 
             check, compare to references from the LLVM manual.


Test Seed : 1336662664
Test time : 0.000560999

Status :  Checked instruction "<result> = add i32 4, %var"
Add Instruction Passed
 Checked instruction "%ptr = alloca i32"
 Checked instruction "%ptr = alloca i32, i32 4"
 Checked instruction "%ptr = alloca i32, i32 4, align 1024"
 Checked instruction "%ptr = alloca i32, align 1024"
Alloca Instruction Passed
 Checked instruction "<result> = and i32 4, %var"
 Checked instruction "<result> = and i32 15, 40"
 Checked instruction "<result> = and i32 4, 8"
And Instruction Passed
 Checked instruction "<result> = ashr i32 4, 1"
 Checked instruction "<result> = ashr i8 -2, 1"
 Checked instruction "<result> = ashr < 2 x i32 > < i32 -2, i32 4 >, < i32 1, i32 3 >"
Ashr Instruction Passed
 Checked instruction "%X = bitcast i8 -1 to i8"
 Checked instruction "%Z = bitcast < 2 x i32 > %V to i64"
Bitcast Instruction Passed
 Checked instruction "br i1 %cond, label %IfEqual, label %IfUnequal"
Br Instruction Passed
 Checked instruction "%retval = call i32 @test(i32 %argc)"
 Checked instruction "call i32 (i8*, ...)* @printf(i8* %msg, i32 12, i8 42)"
 Checked instruction "%X = tail call i32 @foo()"
 Checked instruction "%Y = tail call fastcc i32 @foo()"
 Checked instruction "call void @foo(i8 97 signext)"
 Checked instruction "%r = call %struct.A @foo()"
 Checked instruction "call void @foo() noreturn"
 Checked instruction "%ZZ = call zeroext i32 @bar()"
Call Instruction Passed
 Checked instruction "%result = extractelement < 4 x i32 > %vec, i32 0"
Extractelement Instruction Passed
 Checked instruction "%result = extractvalue { i32, float } %agg, 0"
Extractvalue Instruction Passed
 Checked instruction "<result> = fadd float 0x4010000000000000, %var"
Fadd Instruction Passed
 Checked instruction "<result> = fcmp oeq float 0x4010000000000000, 0x4014000000000000"
 Checked instruction "<result> = fcmp one float 0x4010000000000000, 0x4014000000000000"
 Checked instruction "<result> = fcmp olt float 0x4010000000000000, 0x4014000000000000"
 Checked instruction "<result> = fcmp ueq float 0x3ff0000000000000, 0x4000000000000000"
Fcmp Instruction Passed
 Checked instruction "<result> = fdiv float 0x4010000000000000, %var"
Fdiv Instruction Passed
 Checked instruction "<result> = fmul float 0x4010000000000000, %var"
Fmul Instruction Passed
 Checked instruction "%X = fpext float 0x400921cac0000000 to double"
 Checked instruction "%Y = fpext float 0x3ff0000000000000 to float"
Fpext Instruction Passed
 Checked instruction "%X = fptosi double 0xc05ec00000000000 to i32"
Fptosi Instruction Passed
 Checked instruction "%X = fptoui double 0x405ec00000000000 to i32"
Fptoui Instruction Passed
 Checked instruction "%X = fptrunc double 0x405ec00000000000 to float"
Fptrunc Instruction Passed
 Checked instruction "free [ 4 x i8 ]* %array"
Free Instruction Passed
 Checked instruction "<result> = frem float 0x4010000000000000, %var"
Frem Instruction Passed
 Checked instruction "<result> = fsub float 0x0, %val"
Fsub Instruction Passed
 Checked instruction "%vptr = getelementptr { i32, < 2 x i8 > }* %svptr, i32 0, i32 1, i32 1"
 Checked instruction "%eptr = getelementptr [ 12 x i8 ]* %aptr, i32 0, i32 1"
Getelementptr Instruction Passed
 Checked instruction "<result> = icmp ne float* %X, %X"
Icmp Instruction Passed
 Checked instruction "%result = insertelement < 4 x i32 > %vec, i32 1, i32 0"
Insertelement Instruction Passed
 Checked instruction "%result = insertvalue { i32, float } %agg, i32 1, 0"
Insertvalue Instruction Passed
 Checked instruction "%Y = inttoptr i64 0 to i32*"
Inttoptr Instruction Passed
 Checked instruction "%retval = invoke i32 @Test(i32 15) to label %Continue unwind label %TestCleanup"
Invoke Instruction Passed
 Checked instruction "%val = load i32* %ptr"
Load Instruction Passed
 Checked instruction "<result> = lshr i8 -2, 1"
Lshr Instruction Passed
 Checked instruction "%array2 = malloc [ 12 x i8 ], i32 %size"
Malloc Instruction Passed
 Checked instruction "<result> = mul i32 4, %var"
Mul Instruction Passed
 Checked instruction "<result> = or i32 15, 40"
Or Instruction Passed
 Checked instruction "%indvar = phi i32 [ 0, %LoopHeader ], [ %nextindvar, %Loop ]"
Phi Instruction Passed
 Checked instruction "%Y = ptrtoint i32* %x to i64"
Prtoint Instruction Passed
 Checked instruction "ret void"
Ret Instruction Passed
 Checked instruction "<result> = sdiv i32 4, %var"
Sdiv Instruction Passed
 Checked instruction "%X = select i1 1, i8 17, i8 42"
Select Instruction Passed
 Checked instruction "%X = sext i8 -1 to i16"
Sext Instruction Passed
 Checked instruction "<result> = shl i32 1, 32"
Shl Instruction Passed
 Checked instruction "%result = shufflevector < 4 x i32 > %v1, < 4 x i32 > %v2, < 8 x i32 > < i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7 >"
ShuffleVector Instruction Passed
 Checked instruction "%X = sitofp i32 257 to float"
Sitofp Instruction Passed
 Checked instruction "<result> = srem i32 4, %var"
Srem Instruction Passed
 Checked instruction "store i32 3, i32* %ptr"
Store Instruction Passed
 Checked instruction "<result> = sub i32 4, %var"
Sub Instruction Passed
 Checked instruction "switch i32 %val, label %otherwise [ i32 0, label %onzero i32 1, label %onone i32 2, label %ontwo ]"
Switch Instruction Passed
 Checked instruction "%Y = trunc i32 123 to i1"
Trunc Instruction Passed
 Checked instruction "<result> = udiv i32 4, %var"
Udiv Instruction Passed
 Checked instruction "%Y = uitofp i8 -1 to double"
Uitofp Instruction Passed
 Checked instruction "unreachable"
Unreachable Instruction Passed
 Checked instruction "unwind"
Unwind Instruction Passed
 Checked instruction "<result> = urem i32 4, %var"
Urem Instruction Passed
 Checked instruction "%tmp = va_arg i8** %ap, i32"
VarArg Instruction Passed
 Checked instruction "<result> = xor i32 -1, %V"
Xor Instruction Passed
 Checked instruction "%X = zext i32 257 to i64"
Zext Instruction Passed



INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestIndirectFunctionCall 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestFunctionCall
INFO     Test completed in 0.0431780815125 seconds
INFO      It produced the following output:
(0.002484) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(kernel)
(0.002503) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.002512) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.002612) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.002624) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.002661) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 2]
(0.002670) KernelPartitioningPass.cpp:729:    saved 72 bytes per thread
(0.002690) KernelPartitioningPass.cpp:568:    Spill region size is 16
(0.002706) KernelPartitioningPass.cpp:1111: Subkernel::create(kernel)
(0.002714) KernelPartitioningPass.cpp:1134: Subkernel::_create(kernel id: 1)
(0.002732) KernelPartitioningPass.cpp:1162: 
(0.002740) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.002753) KernelPartitioningPass.cpp:1173:  adding block $BB_2_0002
(0.002770) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_2_0002 -> $BB_2_0003
(0.002781) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_2_0002 -> $BB_2_0004
(0.002789) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_2_0002
(0.002801) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.002808) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_2_0002
(0.002815) KernelPartitioningPass.cpp:1285:   examined terminator
(0.002822) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.002831) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_2_0002 type: fallthrough
(0.002839) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.002846) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.002858) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.002867) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.002875) KernelPartitioningPass.cpp:1374:   $BB_2_0002
(0.002884) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.002900) KernelPartitioningPass.cpp:1111: Subkernel::create(kernel)
(0.002908) KernelPartitioningPass.cpp:1134: Subkernel::_create(kernel id: 2)
(0.002922) KernelPartitioningPass.cpp:1162: 
(0.002929) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.002937) KernelPartitioningPass.cpp:1173:  adding block $BB_2_0003
(0.002946) KernelPartitioningPass.cpp:1192:   this block exits
(0.002955) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_2_0003 -> exit
(0.002965) KernelPartitioningPass.cpp:1259:   adding EXTERNAL IN-Edge $BB_2_0002 -> $BB_2_0003 with entry ID 131073
(0.002973) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.002980) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.002989) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.002997) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.003004) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.003012) KernelPartitioningPass.cpp:1374:   $BB_2_0003
(0.003019) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.003032) KernelPartitioningPass.cpp:1111: Subkernel::create(kernel)
(0.003040) KernelPartitioningPass.cpp:1134: Subkernel::_create(kernel id: 3)
(0.003053) KernelPartitioningPass.cpp:1162: 
(0.003060) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.003072) KernelPartitioningPass.cpp:1173:  adding block $BB_2_0004
(0.003082) KernelPartitioningPass.cpp:1192:   this block exits
(0.003091) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_2_0004 -> exit
(0.003101) KernelPartitioningPass.cpp:1259:   adding EXTERNAL IN-Edge $BB_2_0002 -> $BB_2_0004 with entry ID 196609
(0.003109) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.003116) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.003124) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.003132) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.003154) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.003162) KernelPartitioningPass.cpp:1374:   $BB_2_0004
(0.003170) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.003185) KernelPartitioningPass.cpp:573:  Linking external edges
(0.003192) KernelPartitioningPass.cpp:575:    but first!
(0.003200) KernelPartitioningPass.cpp:581:    subkernel _subkernel_kernel_1 out edges: 
(0.003207) KernelPartitioningPass.cpp:588:      $BB_2_0002 -> $BB_2_0003
(0.003217) KernelPartitioningPass.cpp:588:      $BB_2_0002 -> $BB_2_0004
(0.003224) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.003232) KernelPartitioningPass.cpp:581:    subkernel _subkernel_kernel_2 out edges: 
(0.003239) KernelPartitioningPass.cpp:588:      $BB_2_0003 -> exit
(0.003247) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.003254) KernelPartitioningPass.cpp:599:      $BB_2_0002 -> $BB_2_0003
(0.003262) KernelPartitioningPass.cpp:581:    subkernel _subkernel_kernel_3 out edges: 
(0.003269) KernelPartitioningPass.cpp:588:      $BB_2_0004 -> exit
(0.003276) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.003283) KernelPartitioningPass.cpp:599:      $BB_2_0002 -> $BB_2_0004
(0.003290) KernelPartitioningPass.cpp:604:    now linking
(0.003298) KernelPartitioningPass.cpp:621:     same subkernel
(0.003305) KernelPartitioningPass.cpp:635:    linking $BB_2_0002_exit_handler_to_2_0003 to $BB_2_0003_entry_handler_from_2_0002 (entry 131073)
(0.003313) KernelPartitioningPass.cpp:621:     same subkernel
(0.003320) KernelPartitioningPass.cpp:635:    linking $BB_2_0002_exit_handler_to_2_0004 to $BB_2_0004_entry_handler_from_2_0002 (entry 196609)
(0.003328) KernelPartitioningPass.cpp:621:     same subkernel
(0.003335) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_2_0003 -> exit
(0.003343) KernelPartitioningPass.cpp:621:     same subkernel
(0.003350) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_2_0004 -> exit
(0.003398) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.003415) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.003424) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.003433) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_2_0002 -> $BB_2_0002_exit_handler_to_2_0003 (2 live values
(0.003449) KernelPartitioningPass.cpp:1731:       alive: 2 [type: s64, offset: 0]
(0.003465) KernelPartitioningPass.cpp:1731:       alive: 6 [type: s32, offset: 8]
(0.003477) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.003485) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_2_0002_exit_handler_to_2_0003
(0.003501) KernelPartitioningPass.cpp:1664:   adding $BB_2_0002 to frontierExitBlocks
(0.003513) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_2_0002 -> $BB_2_0002_exit_handler_to_2_0004 (2 live values
(0.003523) KernelPartitioningPass.cpp:1731:       alive: 2 [type: s64, offset: 0]
(0.003536) KernelPartitioningPass.cpp:1731:       alive: 6 [type: s32, offset: 8]
(0.003546) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 1
(0.003554) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_2_0002_exit_handler_to_2_0004
(0.003568) KernelPartitioningPass.cpp:1664:   adding $BB_2_0002 to frontierExitBlocks
(0.003577) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.003586) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.003594) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_2_0002
(0.003613) KernelPartitioningPass.cpp:1782:  block $BB_2_0002 (2 external edges) terminator: @%p7 bra $BB_2_0004
(0.003622) KernelPartitioningPass.cpp:1785:    branch
(0.003629) KernelPartitioningPass.cpp:1791:  1 external edge, modifying branch target to point to handler
(0.003637) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.003679) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalTestFunctionCall: ocelot/executive/implementation/DynamicTranslationCache.cpp:1028: void setupCallTargets(ir::PTXKernel&, const executive::DynamicTranslationCache&): Assertion `0 && "arbitrary function calls not yet supported"' failed.
Handlers()
(0.003699) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.003707) KernelPartitioningPass.cpp:1585:     IN-edge: $BB_2_0003_entry_handler_from_2_0002 -> $BB_2_0003 (2 live values
(0.003720) KernelPartitioningPass.cpp:1725:       skipping alive: 2 [type: s64]
(0.003728) KernelPartitioningPass.cpp:1725:       skipping alive: 6 [type: s32]
(0.003740) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.003747) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_2_0003 -> $BB_2_0003_thread_exit (0 live values
(0.003756) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.003764) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_2_0003_thread_exit
(0.003776) KernelPartitioningPass.cpp:1664:   adding $BB_2_0003 to frontierExitBlocks
(0.003784) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.003793) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.003800) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_2_0003
(0.003809) KernelPartitioningPass.cpp:1782:  block $BB_2_0003 (1 external edges) terminator: exit
(0.003817) KernelPartitioningPass.cpp:1810:    exit
(0.003824) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.003869) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.003881) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.003889) KernelPartitioningPass.cpp:1585:     IN-edge: $BB_2_0004_entry_handler_from_2_0002 -> $BB_2_0004 (2 live values
(0.003900) KernelPartitioningPass.cpp:1731:       alive: 2 [type: s64, offset: 0]
(0.003912) KernelPartitioningPass.cpp:1731:       alive: 6 [type: s32, offset: 8]
(0.003925) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.003932) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_2_0004 -> $BB_2_0004_thread_exit (0 live values
(0.003942) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.003949) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_2_0004_thread_exit
(0.003962) KernelPartitioningPass.cpp:1664:   adding $BB_2_0004 to frontierExitBlocks
(0.003970) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.003979) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.003987) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_2_0004
(0.003994) KernelPartitioningPass.cpp:1782:  block $BB_2_0004 (1 external edges) terminator: exit
(0.004001) KernelPartitioningPass.cpp:1810:    exit
(0.004008) KernelPartitioningPass.cpp:1825: end frontier exit blocks:

INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCudaTextureArray 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestPTXToLLVMTranslator
INFO     Test completed in 0.0399179458618 seconds
INFO      It produced the following output:
Pass/Fail : Pass


Name : TestPTXToLLVMTranslator

Description: This is a basic test that just tries to get through a 
             translation successfully of as many PTX programs as possible Test 
             Points: 1) Scan for all PTX files in a directory, try to 
             translate them.


Test Seed : 1336662664
Test time : 1.4782e-05

Status : 


INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestKernels 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestInstructions
INFO     Test completed in 0.0449330806732 seconds
INFO      It produced the following output:
Pass/Fail : Pass


Name : TestInstructions

Description: 


Test Seed : 1336662664
Test time : 0.000719786

Status : Test output:
Accessors test passed.
pass: load and store instructions
Abs test passed.
pass: arithmetic instructions
pass: exotic arithmetic instructions
pass: floating-point instructions
pass: logical instructions
pass: comparison instructions
pass: predicated Add and Ld isntructions



INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestLexer
INFO     Test completed in 0.0412650108337 seconds
INFO      It produced the following output:
Pass/Fail : Pass


Name : TestLexer

Description: Tests for the PTX lexer. Test Point 1: Scan a PTX file and 
             write out a temp stream, scan the stream again and make sure that the 
             two sets of tokens match


Test Seed : 1336662664
Test time : 1.43051e-05

Status : 


INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCalVectorScale 
INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestLLVMKernels 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestDeviceSwitching
INFO     Test completed in 0.0604209899902 seconds
INFO      It produced the following output:
(0.002009) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(increment)
(0.002030) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.002039) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.002126) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.002138) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.002169) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 0]
(0.002178) KernelPartitioningPass.cpp:729:    saved 16 bytes per thread
(0.002195) KernelPartitioningPass.cpp:568:    Spill region size is 0
(0.002212) KernelPartitioningPass.cpp:1111: Subkernel::create(increment)
(0.002220) KernelPartitioningPass.cpp:1134: Subkernel::_create(increment id: 1)
(0.002237) KernelPartitioningPass.cpp:1162: 
(0.002245) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.002256) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0002
(0.002273) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> $BB_1_0003
(0.002282) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_1_0002
(0.002295) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.002303) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_1_0002
(0.002310) KernelPartitioningPass.cpp:1285:   examined terminator
(0.002317) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.002326) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_1_0002 type: fallthrough
(0.002335) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.002342) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.002354) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.002362) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.002371) KernelPartitioningPass.cpp:1374:   $BB_1_0002
(0.002380) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.002396) KernelPartitioningPass.cpp:1111: Subkernel::create(increment)
(0.002404) KernelPartitioningPass.cpp:1134: Subkernel::_create(increment id: 2)
(0.002417) KernelPartitioningPass.cpp:1162: 
(0.002424) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.002433) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0003
(0.002442) KernelPartitioningPass.cpp:1192:   this block exits
(0.002451) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0003 -> exit
(0.002461) KernelPartitioningPass.cpp:1259:   adding EXTERNAL IN-Edge $BB_1_0002 -> $BB_1_0003 with entry ID 131073
(0.002469) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.002476) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.002485) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.002493) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.002501) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.002508) KernelPartitioningPass.cpp:1374:   $BB_1_0003
(0.002516) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.002530) KernelPartitioningPass.cpp:573:  Linking external edges
(0.002537) KernelPartitioningPass.cpp:575:    but first!
(0.002545) KernelPartitioningPass.cpp:581:    subkernel _subkernel_increment_1 out edges: 
(0.002552) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> $BB_1_0003
(0.002560) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.002567) KernelPartitioningPass.cpp:581:    subkernel _subkernel_increment_2 out edges: 
(0.002574) KernelPartitioningPass.cpp:588:      $BB_1_0003 -> exit
(0.002582) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.002589) KernelPartitioningPass.cpp:599:      $BB_1_0002 -> $BB_1_0003
(0.002596) KernelPartitioningPass.cpp:604:    now linking
(0.002603) KernelPartitioningPass.cpp:621:     same subkernel
(0.002610) KernelPartitioningPass.cpp:635:    linking $BB_1_0002_exit_handler_to_1_0003 to $BB_1_0003_entry_handler_from_1_0002 (entry 131073)
(0.002618) KernelPartitioningPass.cpp:621:     same subkernel
(0.002646) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0003 -> exit
(0.002685) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.002702) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.002712) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.002720) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_exit_handler_to_1_0003 (0 live values
(0.002737) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.002746) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_exit_handler_to_1_0003
(0.002765) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.002778) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.002786) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.002794) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0002
(0.002820) KernelPartitioningPass.cpp:1782:  block $BB_1_0002 (1 external edges) terminator: st.global.u32 [%r0], %r2
(0.002835) KernelPartitioningPass.cpp:1821:  fall-through non-control-flow instruction to external edge: st.global.u32 [%r0], %r2
(0.002843) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.002882) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.002893) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.002901) KernelPartitioningPass.cpp:1585:     IN-edge: $BB_1_0003_entry_handler_from_1_0002 -> $BB_1_0003 (0 live values
(0.002916) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.002924) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0003 -> $BB_1_0003_thread_exit (0 live values
(0.002934) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.002941) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0003_thread_exit
(0.002954) KernelPartitioningPass.cpp:1664:   adding $BB_1_0003 to frontierExitBlocks
(0.002962) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.002971) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.002978) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0003
(0.002987) KernelPartitioningPass.cpp:1782:  block $BB_1_0003 (1 external edges) terminator: exit
(0.002995) KernelPartitioningPass.cpp:1810:    exit
(0.003003) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.013692) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(increment)
(0.013705) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.013714) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.013762) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.013771) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.013788) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 0]
(0.013796) KernelPartitioningPass.cpp:729:    saved 16 bytes per thread
(0.013810) KernelPartitioningPass.cpp:568:    Spill region size is 0
(0.013820) KernelPartitioningPass.cpp:1111: Subkernel::create(increment)
(0.013828) KernelPartitioningPass.cpp:1134: Subkernel::_create(increment id: 1)
(0.013842) KernelPartitioningPass.cpp:1162: 
(0.013849) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.013859) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0002
(0.013872) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> $BB_1_0003
(0.013880) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_1_0002
(0.013890) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.013898) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_1_0002
(0.013905) KernelPartitioningPass.cpp:1285:   examined terminator
(0.013912) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.013920) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_1_0002 type: fallthrough
(0.013929) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.013947) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.013957) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.013966) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.013974) KernelPartitioningPass.cpp:1374:   $BB_1_0002
(0.013982) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.013996) KernelPartitioningPass.cpp:1111: Subkernel::create(increment)
(0.014004) KernelPartitioningPass.cpp:1134: Subkernel::_create(increment id: 2)
(0.014018) KernelPartitioningPass.cpp:1162: 
(0.014025) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.014033) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0003
(0.014041) KernelPartitioningPass.cpp:1192:   this block exits
(0.014051) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0003 -> exit
(0.014061) KernelPartitioningPass.cpp:1259:   adding EXTERNAL IN-Edge $BB_1_0002 -> $BB_1_0003 with entry ID 131073
(0.014070) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.014077) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.014085) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.014092) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.014101) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.014108) KernelPartitioningPass.cpp:1374:   $BB_1_0003
(0.014116) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.014128) KernelPartitioningPass.cpp:573:  Linking external edges
(0.014136) KernelPartitioningPass.cpp:575:    but first!
(0.014143) KernelPartitioningPass.cpp:581:    subkernel _subkernel_increment_1 out edges: 
(0.014150) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> $BB_1_0003
(0.014158) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.014165) KernelPartitioningPass.cpp:581:    subkernel _subkernel_increment_2 out edges: 
(0.014172) KernelPartitioningPass.cpp:588:      $BB_1_0003 -> exit
(0.014179) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.014186) KernelPartitioningPass.cpp:599:      $BB_1_0002 -> $BB_1_0003
(0.014193) KernelPartitioningPass.cpp:604:    now linking
(0.014200) KernelPartitioningPass.cpp:621:     same subkernel
(0.014207) KernelPartitioningPass.cpp:635:    linking $BB_1_0002_exit_handler_to_1_0003 to $BB_1_0003_entry_handler_from_1_0002 (entry 131073)
(0.014215) KernelPartitioningPass.cpp:621:     same subkernel
(0.014222) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0003 -> exit
(0.014255) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.014268) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.014276) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.014284) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_exit_handler_to_1_0003 (0 live values
(0.014295) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.014303) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_exit_handler_to_1_0003
(0.014320) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.014329) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.014337) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.014345) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0002
(0.014362) KernelPartitioningPass.cpp:1782:  block $BB_1_0002 (1 external edges) terminator: st.global.u32 [%r0], %r2
(0.014376) KernelPartitioningPass.cpp:1821:  fall-through non-control-flow instruction to external edge: st.global.u32 [%r0], %r2
(0.014384) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.014419) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.014430) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.014438) KernelPartitioningPass.cpp:1585:     IN-edge: $BB_1_0003_entry_handler_from_1_0002 -> $BB_1_0003 (0 live values
(0.014459) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.014467) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0003 -> $BB_1_0003_thread_exit (0 live values
(0.014477) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.014485) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0003_thread_exit
(0.014498) KernelPartitioningPass.cpp:1664:   adding $BB_1_0003 to frontierExitBlocks
(0.014506) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.014515) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.014522) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0003
(0.014530) KernelPartitioningPass.cpp:1782:  block $BB_1_0003 (1 external edges) terminator: exit
(0.014538) KernelPartitioningPass.cpp:1810:    exit
(0.014545) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.015559) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(increment)
(0.015570) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.015578) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.015617) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.015626) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.015640) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 0]
(0.015648) KernelPartitioningPass.cpp:729:    saved 16 bytes per thread
(0.015661) KernelPartitioningPass.cpp:568:    Spill region size is 0
(0.015671) KernelPartitioningPass.cpp:1111: Subkernel::create(increment)
(0.015679) KernelPartitioningPass.cpp:1134: Subkernel::_create(increment id: 1)
(0.015693) KernelPartitioningPass.cpp:1162: 
(0.015700) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.015710) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0002
(0.015723) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> $BB_1_0003
(0.015731) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_1_0002
(0.015740) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.015747) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_1_0002
(0.015755) KernelPartitioningPass.cpp:1285:   examined terminator
(0.015762) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.015769) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_1_0002 type: fallthrough
(0.015778) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.015785) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.015794) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.015802) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.015810) KernelPartitioningPass.cpp:1374:   $BB_1_0002
(0.015818) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.015831) KernelPartitioningPass.cpp:1111: Subkernel::create(increment)
(0.015838) KernelPartitioningPass.cpp:1134: Subkernel::_create(increment id: 2)
(0.015851) KernelPartitioningPass.cpp:1162: 
(0.015859) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.015867) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0003
(0.015876) KernelPartitioningPass.cpp:1192:   this block exits
(0.015885) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0003 -> exit
(0.015895) KernelPartitioningPass.cpp:1259:   adding EXTERNAL IN-Edge $BB_1_0002 -> $BB_1_0003 with entry ID 131073
(0.015904) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.015911) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.015919) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.015927) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.015935) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.015943) KernelPartitioningPass.cpp:1374:   $BB_1_0003
(0.015951) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.015975) KernelPartitioningPass.cpp:573:  Linking external edges
(0.015983) KernelPartitioningPass.cpp:575:    but first!
(0.015991) KernelPartitioningPass.cpp:581:    subkernel _subkernel_increment_1 out edges: 
(0.015998) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> $BB_1_0003
(0.016006) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.016013) KernelPartitioningPass.cpp:581:    subkernel _subkernel_increment_2 out edges: 
(0.016021) KernelPartitioningPass.cpp:588:      $BB_1_0003 -> exit
(0.016028) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.016035) KernelPartitioningPass.cpp:599:      $BB_1_0002 -> $BB_1_0003
(0.016043) KernelPartitioningPass.cpp:604:    now linking
(0.016050) KernelPartitioningPass.cpp:621:     same subkernel
(0.016057) KernelPartitioningPass.cpp:635:    linking $BB_1_0002_exit_handler_to_1_0003 to $BB_1_0003_entry_handler_from_1_0002 (entry 131073)
(0.016065) KernelPartitioningPass.cpp:621:     same subkernel
(0.016073) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0003 -> exit
(0.016106) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.016119) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.016127) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.016135) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_exit_handler_to_1_0003 (0 live values
(0.016145) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.016153) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_exit_handler_to_1_0003
(0.016169) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.016178) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.016186) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.016194) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0002
(0.016212) KernelPartitioningPass.cpp:1782:  block $BB_1_0002 (1 external edges) terminator: st.global.u32 [%r0], %r2
(0.016226) KernelPartitioningPass.cpp:1821:  fall-through non-control-flow instruction to external edge: st.global.u32 [%r0], %r2
(0.016234) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.016269) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.016280) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.016289) KernelPartitioningPass.cpp:1585:     IN-edge: $BB_1_0003_entry_handler_from_1_0002 -> $BB_1_0003 (0 live values
(0.016302) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.016310) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0003 -> $BB_1_0003_thread_exit (0 live values
(0.016319) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.016327) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0003_thread_exit
(0.016340) KernelPartitioningPass.cpp:1664:   adding $BB_1_0003 to frontierExitBlocks
(0.016348) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.016356) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.016364) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0003
(0.016371) KernelPartitioningPass.cpp:1782:  block $BB_1_0003 (1 external edges) terminator: exit
(0.016379) KernelPartitioningPass.cpp:1810:    exit
(0.016387) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
Pass/Fail : Pass


Name : TestDeviceSwitching

Description: A unit test for the ability of the CUDA runtime to switch 
             between devices and use multiple threads Test Points: 1) In a single 
             threaded application, iterate across all devices launching the same 
             simple kernel each time 2) Test context migration support in 
             ocelot. Iterate across all devices, launching a simple kernel that 
             updates shared variable. Use the context switch mechanism to 
             migrate the shared data. 3) Test multi-threading support. Launch one 
             host thread to allocate memory, pass pointers to worker 
             threads, each of which should launch independent kernels in 
             parallel.


Test Seed : 1336662664
Test time : 0.0161512

Status : Test Point 1 Passed
Test Point 2 Passed
Test Point 3 Passed



INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestParser -i ../tests/ptx 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCudaTexture2D
INFO     Test completed in 0.0749208927155 seconds
INFO      It produced the following output:

INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestExternalFunctions 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestParser
INFO     Test completed in 0.0290479660034 seconds
INFO      It produced the following output:
Pass/Fail : Pass


Name : TestParser

Description: A test for the PTXParser class. Test Points: 1) Load a PTX file 
             and run it through the parser generating a module. Write the 
             module to an intermediate stream. Parse the stream again 
             generating a new module, compare both to make sure that they match.


Test Seed : 1336662664
Test time : 9.77516e-06

Status : 


INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCudaGlobals 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCudaTextureArray
INFO     Test completed in 0.0518839359283 seconds
INFO      It produced the following output:

INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestEmulator 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestKernels
INFO     Test completed in 0.0521841049194 seconds
INFO      It produced the following output:
Pass/Fail : Pass


Name : TestKernels

Description: 


Test Seed : 1336662664
Test time : 0.0138547

Status : Test output:
looping kernel succeeded
matrix vector kernel succeeded



INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestPTXAssembly 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestIndirectFunctionCall
INFO     Test completed in 0.0670638084412 seconds
INFO      It produced the following output:
(0.003504) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(kernelEntry)
(0.003534) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.003544) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.003719) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.003734) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.003800) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 4]
(0.003810) KernelPartitioningPass.cpp:729:    saved 88 bytes per thread
(0.003857) KernelPartitioningPass.cpp:568:    Spill region size is 32
(0.003875) KernelPartitioningPass.cpp:1111: Subkernel::create(kernelEntry)
(0.003885) KernelPartitioningPass.cpp:1134: Subkernel::_create(kernelEntry id: 1)
(0.003903) KernelPartitioningPass.cpp:1162: 
(0.003911) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.003927) KernelPartitioningPass.cpp:1173:  adding block $BB_5_0002
(0.003957) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_5_0002 -> $BB_5_0003
(0.003968) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_5_0002 -> $BB_5_0008
(0.003978) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_5_0002
(0.003991) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.003999) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_5_0002
(0.004006) KernelPartitioningPass.cpp:1285:   examined terminator
(0.004014) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.004024) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_5_0002 type: fallthrough
(0.004034) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.004041) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.004054) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.004064) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.004072) KernelPartitioningPass.cpp:1374:   $BB_5_0002
(0.004081) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.004099) KernelPartitioningPass.cpp:1111: Subkernel::create(kernelEntry)
(0.004109) KernelPartitioningPass.cpp:1134: Subkernel::_create(kernelEntry id: 2)
(0.004123) KernelPartitioningPass.cpp:1162: 
(0.004131) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.004142) KernelPartitioningPass.cpp:1173:  adding block $BB_5_0003
(0.004153) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_5_0003 -> $BB_5_0004
(0.004164) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_5_0003 -> $BB_5_0007
(0.004175) KernelPartitioningPass.cpp:1259:   adding EXTERNAL IN-Edge $BB_5_0002 -> $BB_5_0003 with entry ID 131073
(0.004184) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.004191) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.004200) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.004210) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.004219) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.004229) KernelPartitioningPass.cpp:1374:   $BB_5_0003
(0.007609) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.007658) KernelPartitioningPass.cpp:1111: Subkernel::create(kernelEntry)
(0.007668) KernelPartitioningPass.cpp:1134: Subkernel::_create(kernelEntry id: 3)
(0.007691) KernelPartitioningPass.cpp:1162: 
(0.007700) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.007713) KernelPartitioningPass.cpp:1173:  adding block $BB_5_0004
(0.007728) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_5_0004 -> $BB_5_0005
(0.007740) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_5_0004 -> $BB_5_0006
(0.007752) KernelPartitioningPass.cpp:1259:   adding EXTERNAL IN-Edge $BB_5_0003 -> $BB_5_0004 with entry ID 196609
(0.007762) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.007770) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.007781) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.007809) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.007821) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.007830) KernelPartitioningPass.cpp:1374:   $BB_5_0004
(0.007866) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.007881) KernelPartitioningPass.cpp:1111: Subkernel::create(kernelEntry)
(0.007904) KernelPartitioningPass.cpp:1134: Subkernel::_create(kernelEntry id: 4)
(0.007921) KernelPartitioningPass.cpp:1162: 
(0.007930) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.007941) KernelPartitioningPass.cpp:1173:  adding block $BB_5_0005
(0.007953) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_5_0005 -> $BB_5_0009
(0.007963) KernelPartitioningPass.cpp:1259:   adding EXTERNAL IN-Edge $BB_5_0004 -> $BB_5_0005 with entry ID 262145
(0.007973) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.007981) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.007989) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.007998) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.008008) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.008017) KernelPartitioningPass.cpp:1374:   $BB_5_0005
(0.008025) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.008039) KernelPartitioningPass.cpp:1111: Subkernel::create(kernelEntry)
(0.008048) KernelPartitioningPass.cpp:1134: Subkernel::_create(kernelEntry id: 5)
(0.008064) KernelPartitioningPass.cpp:1162: 
(0.008072) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.008081) KernelPartitioningPass.cpp:1173:  adding block $BB_5_0006
(0.008092) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_5_0006 -> $BB_5_0009
(0.008102) KernelPartitioningPass.cpp:1259:   adding EXTERNAL IN-Edge $BB_5_0004 -> $BB_5_0006 with entry ID 327681
(0.008111) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.008118) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.008126) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.008135) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.008144) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.008152) KernelPartitioningPass.cpp:1374:   $BB_5_0006
(0.008160) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.008174) KernelPartitioningPass.cpp:1111: Subkernel::create(kernelEntry)
(0.008182) KernelPartitioningPass.cpp:1134: Subkernel::_create(kernelEntry id: 6)
(0.008196) KernelPartitioningPass.cpp:1162: 
(0.008204) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.008214) KernelPartitioningPass.cpp:1173:  adding block $BB_5_0007
(0.008225) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_5_0007 -> $BB_5_0009
(0.008235) KernelPartitioningPass.cpp:1259:   adding EXTERNAL IN-Edge $BB_5_0003 -> $BB_5_0007 with entry ID 393217
(0.008245) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.008252) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.008261) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.008269) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.008278) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.008287) KernelPartitioningPass.cpp:1374:   $BB_5_0007
(0.008295) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.008309) KernelPartitioningPass.cpp:1111: Subkernel::create(kernelEntry)
(0.008317) KernelPartitioningPass.cpp:1134: Subkernel::_create(kernelEntry id: 7)
(0.008331) KernelPartitioningPass.cpp:1162: 
(0.008338) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.008348) KernelPartitioningPass.cpp:1173:  adding block $BB_5_0008
(0.008359) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_5_0008 -> $BB_5_0009
(0.008370) KernelPartitioningPass.cpp:1259:   adding EXTERNAL IN-Edge $BB_5_0002 -> $BB_5_0008 with entry ID 458753
(0.008392) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.008400) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.008409) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.008418) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.008427) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.008435) KernelPartitioningPass.cpp:1374:   $BB_5_0008
(0.008443) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.008457) KernelPartitioningPass.cpp:1111: Subkernel::create(kernelEntry)
(0.008466) KernelPartitioningPass.cpp:1134: Subkernel::_create(kernelEntry id: 8)
(0.008481) KernelPartitioningPass.cpp:1162: 
(0.008488) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.008501) KernelPartitioningPass.cpp:1173:  adding block $BB_5_0009
(0.008512) KernelPartitioningPass.cpp:1192:   this block exits
(0.008522) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_5_0009 -> exit
(0.008533) KernelPartitioningPass.cpp:1259:   adding EXTERNAL IN-Edge $BB_5_0008 -> $BB_5_0009 with entry ID 524289
(0.008544) KernelPartitioningPass.cpp:1259:   adding EXTERNAL IN-Edge $BB_5_0005 -> $BB_5_0009 with entry ID 524290
(0.008555) KernelPartitioningPass.cpp:1259:   adding EXTERNAL IN-Edge $BB_5_0006 -> $BB_5_0009 with entry ID 524291
(0.008565) KernelPartitioningPass.cpp:1259:   adding EXTERNAL IN-Edge $BB_5_0007 -> $BB_5_0009 with entry ID 524292
(0.008574) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.008582) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.008592) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.008601) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.008610) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.008618) KernelPartitioningPass.cpp:1374:   $BB_5_0009
(0.008626) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.008644) KernelPartitioningPass.cpp:573:  Linking external edges
(0.008652) KernelPartitioningPass.cpp:575:    but first!
(0.008661) KernelPartitioningPass.cpp:581:    subkernel _subkernel_kernelEntry_1 out edges: 
(0.008669) KernelPartitioningPass.cpp:588:      $BB_5_0002 -> $BB_5_0003
(0.008679) KernelPartitioningPass.cpp:588:      $BB_5_0002 -> $BB_5_0008
(0.008686) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.008694) KernelPartitioningPass.cpp:581:    subkernel _subkernel_kernelEntry_2 out edges: 
(0.008703) KernelPartitioningPass.cpp:588:      $BB_5_0003 -> $BB_5_0004
(0.008711) KernelPartitioningPass.cpp:588:      $BB_5_0003 -> $BB_5_0007
(0.008719) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.008727) KernelPartitioningPass.cpp:599:      $BB_5_0002 -> $BB_5_0003
(0.008736) KernelPartitioningPass.cpp:581:    subkernel _subkernel_kernelEntry_3 out edges: 
(0.008744) KernelPartitioningPass.cpp:588:      $BB_5_0004 -> $BB_5_0005
(0.008752) KernelPartitioningPass.cpp:588:      $BB_5_0004 -> $BB_5_0006
(0.008759) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.008766) KernelPartitioningPass.cpp:599:      $BB_5_0003 -> $BB_5_0004
(0.008774) KernelPartitioningPass.cpp:581:    subkernel _subkernel_kernelEntry_4 out edges: 
(0.008782) KernelPartitioningPass.cpp:588:      $BB_5_0005 -> $BB_5_0009
(0.008790) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.008798) KernelPartitioningPass.cpp:599:      $BB_5_0004 -> $BB_5_0005
(0.008806) KernelPartitioningPass.cpp:581:    subkernel _subkernel_kernelEntry_5 out edges: 
(0.008813) KernelPartitioningPass.cpp:588:      $BB_5_0006 -> $BB_5_0009
(0.008821) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.008829) KernelPartitioningPass.cpp:599:      $BB_5_0004 -> $BB_5_0006
(0.008837) KernelPartitioningPass.cpp:581:    subkernel _subkernel_kernelEntry_6 out edges: 
(0.008845) KernelPartitioningPass.cpp:588:      $BB_5_0007 -> $BB_5_0009
(0.008865) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.008873) KernelPartitioningPass.cpp:599:      $BB_5_0003 -> $BB_5_0007
(0.008881) KernelPartitioningPass.cpp:581:    subkernel _subkernel_kernelEntry_7 out edges: 
(0.008888) KernelPartitioningPass.cpp:588:      $BB_5_0008 -> $BB_5_0009
(0.008895) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.008903) KernelPartitioningPass.cpp:599:      $BB_5_0002 -> $BB_5_0008
(0.008911) KernelPartitioningPass.cpp:581:    subkernel _subkernel_kernelEntry_8 out edges: 
(0.008919) KernelPartitioningPass.cpp:588:      $BB_5_0009 -> exit
(0.008927) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.008935) KernelPartitioningPass.cpp:599:      $BB_5_0008 -> $BB_5_0009
(0.008943) KernelPartitioningPass.cpp:599:      $BB_5_0005 -> $BB_5_0009
(0.008951) KernelPartitioningPass.cpp:599:      $BB_5_0006 -> $BB_5_0009
(0.008959) KernelPartitioningPass.cpp:599:      $BB_5_0007 -> $BB_5_0009
(0.008966) KernelPartitioningPass.cpp:604:    now linking
(0.008974) KernelPartitioningPass.cpp:621:     same subkernel
(0.008983) KernelPartitioningPass.cpp:635:    linking $BB_5_0002_exit_handler_to_5_0003 to $BB_5_0003_entry_handler_from_5_0002 (entry 131073)
(0.008991) KernelPartitioningPass.cpp:621:     same subkernel
(0.008999) KernelPartitioningPass.cpp:635:    linking $BB_5_0002_exit_handler_to_5_0008 to $BB_5_0008_entry_handler_from_5_0002 (entry 458753)
(0.009006) KernelPartitioningPass.cpp:621:     same subkernel
(0.009014) KernelPartitioningPass.cpp:635:    linking $BB_5_0003_exit_handler_to_5_0004 to $BB_5_0004_entry_handler_from_5_0003 (entry 196609)
(0.009024) KernelPartitioningPass.cpp:621:     same subkernel
(0.009032) KernelPartitioningPass.cpp:635:    linking $BB_5_0003_exit_handler_to_5_0007 to $BB_5_0007_entry_handler_from_5_0003 (entry 393217)
(0.009040) KernelPartitioningPass.cpp:621:     same subkernel
(0.009048) KernelPartitioningPass.cpp:635:    linking $BB_5_0004_exit_handler_to_5_0005 to $BB_5_0005_entry_handler_from_5_0004 (entry 262145)
(0.009057) KernelPartitioningPass.cpp:621:     same subkernel
(0.009065) KernelPartitioningPass.cpp:635:    linking $BB_5_0004_exit_handler_to_5_0006 to $BB_5_0006_entry_handler_from_5_0004 (entry 327681)
(0.009074) KernelPartitioningPass.cpp:621:     same subkernel
(0.009081) KernelPartitioningPass.cpp:635:    linking $BB_5_0005_exit_handler_to_5_0009 to $BB_5_0009_entry_handler_from_5_0005 (entry 524290)
(0.009090) KernelPartitioningPass.cpp:621:     same subkernel
(0.009098) KernelPartitioningPass.cpp:635:    linking $BB_5_0006_exit_handler_to_5_0009 to $BB_5_0009_entry_handler_from_5_0006 (entry 524291)
(0.009106) KernelPartitioningPass.cpp:621:     same subkernel
(0.009114) KernelPartitioningPass.cpp:635:    linking $BB_5_0007_exit_handler_to_5_0009 to $BB_5_0009_entry_handler_from_5_0007 (entry 524292)
(0.009122) KernelPartitioningPass.cpp:621:     same subkernel
(0.009129) KernelPartitioningPass.cpp:635:    linking $BB_5_0008_exit_handler_to_5_0009 to $BB_5_0009_entry_handler_from_5_0008 (entry 524289)
(0.009138) KernelPartitioningPass.cpp:621:     same subkernel
(0.009146) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_5_0009 -> exit
(0.009218) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.009240) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.009250) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.009260) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_5_0002 -> $BB_5_0002_exit_handler_to_5_0003 (3 live values
(0.009282) KernelPartitioningPass.cpp:1731:       alive: 2 [type: s64, offset: 0]
(0.009303) KernelPartitioningPass.cpp:1731:       alive: 6 [type: s32, offset: 8]
(0.009315) KernelPartitioningPass.cpp:1731:       alive: 8 [type: s32, offset: 16]
(0.009328) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.009338) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_5_0002_exit_handler_to_5_0003
(0.009361) KernelPartitioningPass.cpp:1664:   adding $BB_5_0002 to frontierExitBlocks
(0.009387) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_5_0002 -> $BB_5_0002_exit_handler_to_5_0008 (3 live values
(0.009400) KernelPartitioningPass.cpp:1731:       alive: 2 [type: s64, offset: 0]
(0.009414) KernelPartitioningPass.cpp:1731:       alive: 6 [type: s32, offset: 8]
(0.009426) KernelPartitioningPass.cpp:1731:       alive: 8 [type: s32, offset: 16]
(0.009438) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 1
(0.009446) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_5_0002_exit_handler_to_5_0008
(0.009470) KernelPartitioningPass.cpp:1664:   adding $BB_5_0002 to frontierExitBlocks
(0.009481) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.009491) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.009499) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_5_0002
(0.009522) KernelPartitioningPass.cpp:1782:  block $BB_5_0002 (2 external edges) terminator: @%p9 bra $BB_5_0008
(0.009532) KernelPartitioningPass.cpp:1785:    branch
(0.009540) KernelPartitioningPass.cpp:1791:  1 external edge, modifying branch target to point to handler
(0.009549) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.009609) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.009624) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.009634) KernelPartitioningPass.cpp:1585:     IN-edge: $BB_5_0003_entry_handler_from_5_0002 -> $BB_5_0003 (3 live values
(0.009649) KernelPartitioningPass.cpp:1725:       skipping alive: 2 [type: s64]
(0.009658) KernelPartitioningPass.cpp:1725:       skipping alive: 6 [type: s32]
(0.009667) KernelPartitioningPass.cpp:1731:       alive: 8 [type: s32, offset: 16]
(0.009684) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.009694) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_5_0003 -> $BB_5_0003_exit_handler_to_5_0004 (3 live values
(0.009704) KernelPartitioningPass.cpp:1725:       skipping alive: 2 [type: s64]
(0.009713) KernelPartitioningPass.cpp:1725:       skipping alive: 6 [type: s32]
(0.009722) KernelPartitioningPass.cpp:1731:       alive: 8 [type: s32, offset: 16]
(0.009735) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.009744) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_5_0003_exit_handler_to_5_0004
(0.009766) KernelPartitioningPass.cpp:1664:   adding $BB_5_0003 to frontierExitBlocks
(0.009777) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_5_0003 -> $BB_5_0003_exit_handler_to_5_0007 (3 live values
(0.009787) KernelPartitioningPass.cpp:1725:       skipping alive: 2 [type: s64]
(0.009795) KernelPartitioningPass.cpp:1725:       skipping alive: 6 [type: s32]
(0.009803) KernelPartitioningPass.cpp:1731:       alive: 8 [type: s32, offset: 16]
(0.009816) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 1
(0.009824) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_5_0003_exit_handler_to_5_0007
(0.009842) KernelPartitioningPass.cpp:1664:   adding $BB_5_0003 to frontierExitBlocks
(0.009851) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.009860) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.009868) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_5_0003
(0.009880) KernelPartitioningPass.cpp:1782:  block $BB_5_0003 (2 external edges) terminator: @%p10 bra $BB_5_0007
(0.009888) KernelPartitioningPass.cpp:1785:    branch
(0.009896) KernelPartitioningPass.cpp:1791:  1 external edge, modifying branch target to point to handler
(0.009904) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.009954) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.009967) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.009976) KernelPartitioningPass.cpp:1585:     IN-edge: $BB_5_0004_entry_handler_from_5_0003 -> $BB_5_0004 (3 live values
(0.009988) KernelPartitioningPass.cpp:1725:       skipping alive: 2 [type: s64]
(0.010009) KernelPartitioningPass.cpp:1725:       skipping alive: 6 [type: s32]
(0.010018) KernelPartitioningPass.cpp:1731:       alive: 8 [type: s32, offset: 16]
(0.010034) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.010043) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_5_0004 -> $BB_5_0004_exit_handler_to_5_0005 (2 live values
(0.010054) KernelPartitioningPass.cpp:1725:       skipping alive: 2 [type: s64]
(0.010062) KernelPartitioningPass.cpp:1725:       skipping alive: 6 [type: s32]
(0.010071) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.010080) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_5_0004_exit_handler_to_5_0005
(0.010099) KernelPartitioningPass.cpp:1664:   adding $BB_5_0004 to frontierExitBlocks
(0.010110) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_5_0004 -> $BB_5_0004_exit_handler_to_5_0006 (2 live values
(0.010121) KernelPartitioningPass.cpp:1725:       skipping alive: 2 [type: s64]
(0.010130) KernelPartitioningPass.cpp:1725:       skipping alive: 6 [type: s32]
(0.010139) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 1
(0.010147) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_5_0004_exit_handler_to_5_0006
(0.010164) KernelPartitioningPass.cpp:1664:   adding $BB_5_0004 to frontierExitBlocks
(0.010173) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.010185) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.010193) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_5_0004
(0.010206) KernelPartitioningPass.cpp:1782:  block $BB_5_0004 (2 external edges) terminator: @%p11 bra $BB_5_0006
(0.010216) KernelPartitioningPass.cpp:1785:    branch
(0.010224) KernelPartitioningPass.cpp:1791:  1 external edge, modifying branch target to point to handler
(0.010231) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.010274) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.010287) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.010295) KernelPartitioningPass.cpp:1585:     IN-edge: $BB_5_0005_entry_handler_from_5_0004 -> $BB_5_0005 (2 live values
(0.010306) KernelPartitioningPass.cpp:1725:       skipping alive: 2 [type: s64]
(0.010316) KernelPartitioningPass.cpp:1725:       skipping alive: 6 [type: s32]
(0.010329) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.010338) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_5_0005 -> $BB_5_0005_exit_handler_to_5_0009 (3 live values
(0.010348) KernelPartitioningPass.cpp:1731:       alive: 12 [type: s64, offset: 24]
(0.010362) KernelPartitioningPass.cpp:1725:       skipping alive: 2 [type: s64]
(0.010371) KernelPartitioningPass.cpp:1725:       skipping alive: 6 [type: s32]
(0.010380) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.010387) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_5_0005_exit_handler_to_5_0009
(0.010404) KernelPartitioningPass.cpp:1664:   adding $BB_5_0005 to frontierExitBlocks
(0.010414) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.010423) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.010431) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_5_0005
(0.010441) KernelPartitioningPass.cpp:1782:  block $BB_5_0005 (1 external edges) terminator: bra.uni $BB_5_0009
(0.010449) KernelPartitioningPass.cpp:1785:    branch
(0.010457) KernelPartitioningPass.cpp:1791:  1 external edge, modifying branch target to point to handler
(0.010465) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.010506) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.010519) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.010528) KernelPartitioningPass.cpp:1585:     IN-edge: $BB_5_0006_entry_handler_from_5_0004 -> $BB_5_0006 (2 live values
(0.010540) KernelPartitioningPass.cpp:1725:       skipping alive: 2 [type: s64]
(0.010548) KernelPartitioningPass.cpp:1725:       skipping alive: 6 [type: s32]
(0.010570) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.010579) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_5_0006 -> $BB_5_0006_exit_handler_to_5_0009 (3 live values
(0.010589) KernelPartitioningPass.cpp:1731:       alive: 12 [type: s64, offset: 24]
(0.010606) KernelPartitioningPass.cpp:1725:       skipping alive: 2 [type: s64]
(0.010615) KernelPartitioningPass.cpp:1725:       skipping alive: 6 [type: s32]
(0.010625) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.010633) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_5_0006_exit_handler_to_5_0009
(0.010649) KernelPartitioningPass.cpp:1664:   adding $BB_5_0006 to frontierExitBlocks
(0.010659) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.010668) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.010676) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_5_0006
(0.010685) KernelPartitioningPass.cpp:1782:  block $BB_5_0006 (1 external edges) terminator: bra.uni $BB_5_0009
(0.010694) KernelPartitioningPass.cpp:1785:    branch
(0.010701) KernelPartitioningPass.cpp:1791:  1 external edge, modifying branch target to point to handler
(0.010709) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.010750) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.010764) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.010773) KernelPartitioningPass.cpp:1585:     IN-edge: $BB_5_0007_entry_handler_from_5_0003 -> $BB_5_0007 (3 live values
(0.010785) KernelPartitioningPass.cpp:1725:       skipping alive: 2 [type: s64]
(0.010794) KernelPartitioningPass.cpp:1725:       skipping alive: 6 [type: s32]
(0.010802) KernelPartitioningPass.cpp:1725:       skipping alive: 8 [type: s32]
(0.010814) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.010823) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_5_0007 -> $BB_5_0007_exit_handler_to_5_0009 (3 live values
(0.010833) KernelPartitioningPass.cpp:1731:       alive: 12 [type: s64, offset: 24]
(0.010849) KernelPartitioningPass.cpp:1725:       skipping alive: 2 [type: s64]
(0.010858) KernelPartitioningPass.cpp:1725:       skipping alive: 6 [type: s32]
(0.010866) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.010874) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_5_0007_exit_handler_to_5_0009
(0.010891) KernelPartitioningPass.cpp:1664:   adding $BB_5_0007 to frontierExitBlocks
(0.010900) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.010908) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.010916) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_5_0007
(0.010925) KernelPartitioningPass.cpp:1782:  block $BB_5_0007 (1 external edges) terminator: bra.uni $BB_5_0009
(0.010934) KernelPartitioningPass.cpp:1785:    branch
(0.010941) KernelPartitioningPass.cpp:1791:  1 external edge, modifying branch target to point to handler
(0.010948) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.010986) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.010999) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.011007) KernelPartitioningPass.cpp:1585:     IN-edge: $BB_5_0008_entry_handler_from_5_0002 -> $BB_5_0008 (3 live values
(0.011018) KernelPartitioningPass.cpp:1725:       skipping alive: 2 [type: s64]
(0.011026) KernelPartitioningPass.cpp:1725:       skipping alive: 6 [type: s32]
(0.011036) KernelPartitioningPass.cpp:1725:       skipping alive: 8 [type: s32]
(0.011047) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.011056) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_5_0008 -> $BB_5_0008_exit_handler_to_5_0009 (3 live values
(0.011066) KernelPartitioningPass.cpp:1731:       alive: 12 [type: s64, offset: 24]
(0.011079) KernelPartitioningPass.cpp:1725:       skipping alive: 2 [type: s64]
(0.011087) KernelPartiTestIndirectFunctionCall: ocelot/executive/implementation/DynamicTranslationCache.cpp:1028: void setupCallTargets(ir::PTXKernel&, const executive::DynamicTranslationCache&): Assertion `0 && "arbitrary function calls not yet supported"' failed.
tioningPass.cpp:1725:       skipping alive: 6 [type: s32]
(0.011104) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.011112) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_5_0008_exit_handler_to_5_0009
(0.011131) KernelPartitioningPass.cpp:1664:   adding $BB_5_0008 to frontierExitBlocks
(0.011140) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.011149) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.011157) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_5_0008
(0.011172) KernelPartitioningPass.cpp:1782:  block $BB_5_0008 (1 external edges) terminator: mov.u64 %r12, funcDouble
(0.011184) KernelPartitioningPass.cpp:1821:  fall-through non-control-flow instruction to external edge: mov.u64 %r12, funcDouble
(0.011192) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.011258) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.011274) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.011282) KernelPartitioningPass.cpp:1585:     IN-edge: $BB_5_0009_entry_handler_from_5_0008 -> $BB_5_0009 (3 live values
(0.011294) KernelPartitioningPass.cpp:1731:       alive: 12 [type: s64, offset: 24]
(0.011309) KernelPartitioningPass.cpp:1731:       alive: 2 [type: s64, offset: 0]
(0.011322) KernelPartitioningPass.cpp:1731:       alive: 6 [type: s32, offset: 8]
(0.011336) KernelPartitioningPass.cpp:1585:     IN-edge: $BB_5_0009_entry_handler_from_5_0005 -> $BB_5_0009 (3 live values
(0.011346) KernelPartitioningPass.cpp:1731:       alive: 12 [type: s64, offset: 24]
(0.011360) KernelPartitioningPass.cpp:1731:       alive: 2 [type: s64, offset: 0]
(0.011373) KernelPartitioningPass.cpp:1731:       alive: 6 [type: s32, offset: 8]
(0.011387) KernelPartitioningPass.cpp:1585:     IN-edge: $BB_5_0009_entry_handler_from_5_0006 -> $BB_5_0009 (3 live values
(0.011397) KernelPartitioningPass.cpp:1731:       alive: 12 [type: s64, offset: 24]
(0.011410) KernelPartitioningPass.cpp:1731:       alive: 2 [type: s64, offset: 0]
(0.011421) KernelPartitioningPass.cpp:1731:       alive: 6 [type: s32, offset: 8]
(0.011436) KernelPartitioningPass.cpp:1585:     IN-edge: $BB_5_0009_entry_handler_from_5_0007 -> $BB_5_0009 (3 live values
(0.011448) KernelPartitioningPass.cpp:1731:       alive: 12 [type: s64, offset: 24]
(0.011460) KernelPartitioningPass.cpp:1731:       alive: 2 [type: s64, offset: 0]
(0.011471) KernelPartitioningPass.cpp:1731:       alive: 6 [type: s32, offset: 8]
(0.011484) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.011493) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_5_0009 -> $BB_5_0009_thread_exit (0 live values
(0.011506) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.011514) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_5_0009_thread_exit
(0.011528) KernelPartitioningPass.cpp:1664:   adding $BB_5_0009 to frontierExitBlocks
(0.011537) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.011546) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.011555) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_5_0009
(0.011564) KernelPartitioningPass.cpp:1782:  block $BB_5_0009 (1 external edges) terminator: exit
(0.011572) KernelPartitioningPass.cpp:1810:    exit
(0.011580) KernelPartitioningPass.cpp:1825: end frontier exit blocks:

INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCudaMalloc 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestExternalFunctions
INFO     Test completed in 0.0336179733276 seconds
INFO      It produced the following output:
TestExternalFunctions: ocelot/executive/implementation/DynamicTranslationCache.cpp:1028: void setupCallTargets(ir::PTXKernel&, const executive::DynamicTranslationCache&): Assertion `0 && "arbitrary function calls not yet supported"' failed.
(0.002673) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(kernel)
(0.002706) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.002716) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.002807) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.002821) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.002852) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 0]
(0.002863) KernelPartitioningPass.cpp:729:    saved 24 bytes per thread
(0.002883) KernelPartitioningPass.cpp:568:    Spill region size is 0
(0.002902) KernelPartitioningPass.cpp:1111: Subkernel::create(kernel)
(0.002912) KernelPartitioningPass.cpp:1134: Subkernel::_create(kernel id: 1)
(0.002932) KernelPartitioningPass.cpp:1162: 
(0.002941) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.002957) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0002
(0.002973) KernelPartitioningPass.cpp:1192:   this block exits
(0.002988) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> exit
(0.002998) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_1_0002
(0.003013) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.003022) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_1_0002
(0.003031) KernelPartitioningPass.cpp:1285:   examined terminator
(0.003039) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.003049) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_1_0002 type: fallthrough
(0.003059) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.003067) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.003080) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.003090) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.003099) KernelPartitioningPass.cpp:1374:   $BB_1_0002
(0.003110) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.003129) KernelPartitioningPass.cpp:573:  Linking external edges
(0.003139) KernelPartitioningPass.cpp:575:    but first!
(0.003146) KernelPartitioningPass.cpp:581:    subkernel _subkernel_kernel_1 out edges: 
(0.003155) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> exit
(0.003164) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.003173) KernelPartitioningPass.cpp:604:    now linking
(0.003181) KernelPartitioningPass.cpp:621:     same subkernel
(0.003190) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0002 -> exit
(0.003237) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.003256) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.003267) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.003276) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_thread_exit (0 live values
(0.003296) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.003307) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_thread_exit
(0.003327) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.003342) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.003353) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.003362) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0002
(0.003376) KernelPartitioningPass.cpp:1782:  block $BB_1_0002 (1 external edges) terminator: exit
(0.003385) KernelPartitioningPass.cpp:1810:    exit
(0.003395) KernelPartitioningPass.cpp:1825: end frontier exit blocks:

INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestDataflowGraph -i ../tests/ptx 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCudaSequence
INFO     Test completed in 0.107707023621 seconds
INFO      It produced the following output:
sequence() - A_gpu = 0x0db7d00
(0.004779) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(sequence)
(0.004801) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.004811) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.004925) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.004939) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.004982) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 2]
(0.004994) KernelPartitioningPass.cpp:729:    saved 64 bytes per thread
(0.005016) KernelPartitioningPass.cpp:568:    Spill region size is 16
(0.005033) KernelPartitioningPass.cpp:1111: Subkernel::create(sequence)
(0.005042) KernelPartitioningPass.cpp:1134: Subkernel::_create(sequence id: 1)
(0.005061) KernelPartitioningPass.cpp:1162: 
(0.005069) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.005083) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0002
(0.005103) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> $BB_1_0003
(0.005116) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> $BB_1_0004
(0.005125) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_1_0002
(0.005138) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.005146) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_1_0002
(0.005155) KernelPartitioningPass.cpp:1285:   examined terminator
(0.005163) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.005172) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_1_0002 type: fallthrough
(0.005182) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.005189) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.005204) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.005214) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.005224) KernelPartitioningPass.cpp:1374:   $BB_1_0002
(0.005235) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.005255) KernelPartitioningPass.cpp:1111: Subkernel::create(sequence)
(0.005265) KernelPartitioningPass.cpp:1134: Subkernel::_create(sequence id: 2)
(0.005281) KernelPartitioningPass.cpp:1162: 
(0.005290) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.005300) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0003
(0.005310) KernelPartitioningPass.cpp:1192:   this block exits
(0.005322) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0003 -> exit
(0.005334) KernelPartitioningPass.cpp:1259:   adding EXTERNAL IN-Edge $BB_1_0002 -> $BB_1_0003 with entry ID 131073
(0.005344) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.005352) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.005362) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.005372) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.005381) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.005389) KernelPartitioningPass.cpp:1374:   $BB_1_0003
(0.005398) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.005413) KernelPartitioningPass.cpp:1111: Subkernel::create(sequence)
(0.005421) KernelPartitioningPass.cpp:1134: Subkernel::_create(sequence id: 3)
(0.005437) KernelPartitioningPass.cpp:1162: 
(0.005446) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.005458) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0004
(0.005469) KernelPartitioningPass.cpp:1192:   this block exits
(0.005480) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0004 -> exit
(0.005491) KernelPartitioningPass.cpp:1259:   adding EXTERNAL IN-Edge $BB_1_0002 -> $BB_1_0004 with entry ID 196609
(0.005502) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.005511) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.005521) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.005557) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.005567) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.005575) KernelPartitioningPass.cpp:1374:   $BB_1_0004
(0.005584) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.005598) KernelPartitioningPass.cpp:573:  Linking external edges
(0.005606) KernelPartitioningPass.cpp:575:    but first!
(0.005614) KernelPartitioningPass.cpp:581:    subkernel _subkernel_sequence_1 out edges: 
(0.005622) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> $BB_1_0003
(0.005631) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> $BB_1_0004
(0.005639) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.005647) KernelPartitioningPass.cpp:581:    subkernel _subkernel_sequence_2 out edges: 
(0.005655) KernelPartitioningPass.cpp:588:      $BB_1_0003 -> exit
(0.005661) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.005669) KernelPartitioningPass.cpp:599:      $BB_1_0002 -> $BB_1_0003
(0.005677) KernelPartitioningPass.cpp:581:    subkernel _subkernel_sequence_3 out edges: 
(0.005686) KernelPartitioningPass.cpp:588:      $BB_1_0004 -> exit
(0.005694) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.005702) KernelPartitioningPass.cpp:599:      $BB_1_0002 -> $BB_1_0004
(0.005710) KernelPartitioningPass.cpp:604:    now linking
(0.005718) KernelPartitioningPass.cpp:621:     same subkernel
(0.005727) KernelPartitioningPass.cpp:635:    linking $BB_1_0002_exit_handler_to_1_0003 to $BB_1_0003_entry_handler_from_1_0002 (entry 131073)
(0.005735) KernelPartitioningPass.cpp:621:     same subkernel
(0.005743) KernelPartitioningPass.cpp:635:    linking $BB_1_0002_exit_handler_to_1_0004 to $BB_1_0004_entry_handler_from_1_0002 (entry 196609)
(0.005750) KernelPartitioningPass.cpp:621:     same subkernel
(0.005758) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0003 -> exit
(0.005766) KernelPartitioningPass.cpp:621:     same subkernel
(0.005773) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0004 -> exit
(0.005828) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.005848) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.005860) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.005870) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_exit_handler_to_1_0003 (2 live values
(0.005889) KernelPartitioningPass.cpp:1731:       alive: 2 [type: s64, offset: 0]
(0.005910) KernelPartitioningPass.cpp:1731:       alive: 6 [type: s32, offset: 8]
(0.005924) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.005935) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_exit_handler_to_1_0003
(0.005953) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.005969) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_exit_handler_to_1_0004 (2 live values
(0.005982) KernelPartitioningPass.cpp:1731:       alive: 2 [type: s64, offset: 0]
(0.005997) KernelPartitioningPass.cpp:1731:       alive: 6 [type: s32, offset: 8]
(0.006011) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 1
(0.006020) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_exit_handler_to_1_0004
(0.006039) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.006050) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.006061) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.006069) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0002
(0.006095) KernelPartitioningPass.cpp:1782:  block $BB_1_0002 (2 external edges) terminator: @%p7 bra $BB_1_0004
(0.006105) KernelPartitioningPass.cpp:1785:    branch
(0.006114) KernelPartitioningPass.cpp:1791:  1 external edge, modifying branch target to point to handler
(0.006124) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.006170) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.006196) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.006207) KernelPartitioningPass.cpp:1585:     IN-edge: $BB_1_0003_entry_handler_from_1_0002 -> $BB_1_0003 (2 live values
(0.006224) KernelPartitioningPass.cpp:1725:       skipping alive: 2 [type: s64]
(0.006234) KernelPartitioningPass.cpp:1725:       skipping alive: 6 [type: s32]
(0.006248) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.006257) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0003 -> $BB_1_0003_thread_exit (0 live values
(0.006267) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.006276) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0003_thread_exit
(0.006291) KernelPartitioningPass.cpp:1664:   adding $BB_1_0003 to frontierExitBlocks
(0.006301) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.006311) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.006320) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0003
(0.006331) KernelPartitioningPass.cpp:1782:  block $BB_1_0003 (1 external edges) terminator: exit
(0.006341) KernelPartitioningPass.cpp:1810:    exit
(0.006350) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.006397) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.006413) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.006422) KernelPartitioningPass.cpp:1585:     IN-edge: $BB_1_0004_entry_handler_from_1_0002 -> $BB_1_0004 (2 live values
(0.006436) KernelPartitioningPass.cpp:1731:       alive: 2 [type: s64, offset: 0]
(0.006451) KernelPartitioningPass.cpp:1731:       alive: 6 [type: s32, offset: 8]
(0.006466) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.006476) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0004 -> $BB_1_0004_thread_exit (0 live values
(0.006487) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.006496) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0004_thread_exit
(0.006511) KernelPartitioningPass.cpp:1664:   adding $BB_1_0004 to frontierExitBlocks
(0.006521) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.006531) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.006539) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0004
(0.006548) KernelPartitioningPass.cpp:1782:  block $BB_1_0004 (1 external edges) terminator: exit
(0.006557) KernelPartitioningPass.cpp:1810:    exit
(0.006565) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.025287) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(testShr)
(0.025300) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.025310) KernelPartitioningPass.cpp:131:    barrier in block $BB_4_0002(instruction 11)
(0.025332) KernelPartitioningPass.cpp:148:    encountered 1 barriers
(0.025413) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.025423) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.025451) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 3]
(0.025460) KernelPartitioningPass.cpp:729:    saved 136 bytes per thread
(0.025478) KernelPartitioningPass.cpp:568:    Spill region size is 24
(0.025490) KernelPartitioningPass.cpp:1111: Subkernel::create(testShr)
(0.025498) KernelPartitioningPass.cpp:1134: Subkernel::_create(testShr id: 4)
(0.025515) KernelPartitioningPass.cpp:1162: 
(0.025523) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.025541) KernelPartitioningPass.cpp:1173:  adding block $BB_4_0002
(0.025557) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_4_0002 -> $BB_4_0002_bar
(0.025566) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_4_0002
(0.025577) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.025585) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_4_0002
(0.025593) KernelPartitioningPass.cpp:1285:   examined terminator
(0.025612) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.025621) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_4_0002 type: fallthrough
(0.025631) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.025639) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.025649) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.025659) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.025668) KernelPartitioningPass.cpp:1374:   $BB_4_0002
(0.025677) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.025692) KernelPartitioningPass.cpp:1111: Subkernel::create(testShr)
(0.025701) KernelPartitioningPass.cpp:1134: Subkernel::_create(testShr id: 5)
(0.025716) KernelPartitioningPass.cpp:1162: 
(0.025723) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.025739) KernelPartitioningPass.cpp:1173:  adding block $BB_4_0002_bar
(0.025751) KernelPartitioningPass.cpp:1192:   this block exits
(0.025762) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_4_0002_bar -> exit
(0.025774) KernelPartitioningPass.cpp:1259:   adding EXTERNAL IN-Edge $BB_4_0002 -> $BB_4_0002_bar with entry ID 327681
(0.025783) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.025791) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.025800) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.025809) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.025818) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.025827) KernelPartitioningPass.cpp:1374:   $BB_4_0002_bar
(0.025835) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.025849) KernelPartitioningPass.cpp:573:  Linking external edges
(0.025856) KernelPartitioningPass.cpp:575:    but first!
(0.025863) KernelPartitioningPass.cpp:581:    subkernel _subkernel_testShr_4 out edges: 
(0.025871) KernelPartitioningPass.cpp:588:      $BB_4_0002 -> $BB_4_0002_bar
(0.025879) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.025887) KernelPartitioningPass.cpp:581:    subkernel _subkernel_testShr_5 out edges: 
(0.025894) KernelPartitioningPass.cpp:588:      $BB_4_0002_bar -> exit
(0.025902) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.025909) KernelPartitioningPass.cpp:599:      $BB_4_0002 -> $BB_4_0002_bar
(0.025917) KernelPartitioningPass.cpp:604:    now linking
(0.025924) KernelPartitioningPass.cpp:621:     same subkernel
(0.025931) KernelPartitioningPass.cpp:635:    linking $BB_4_0002_exit_handler_to_4_0002_bar to $BB_4_0002_bar_entry_handler_from_4_0002 (entry 327681)
(0.025939) KernelPartitioningPass.cpp:621:     same subkernel
(0.025946) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_4_0002_bar -> exit
(0.025992) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.026006) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.026015) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.026023) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_4_0002 -> $BB_4_0002_exit_handler_to_4_0002_bar (3 live values
(0.026035) KernelPartitioningPass.cpp:1731:       alive: 1 [type: s64, offset: 0]
(0.026049) KernelPartitioningPass.cpp:1731:       alive: 5 [type: s32, offset: 8]
(0.026061) KernelPartitioningPass.cpp:1731:       alive: 8 [type: s64, offset: 16]
(0.026073) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.026081) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_4_0002_exit_handler_to_4_0002_bar
(0.026097) KernelPartitioningPass.cpp:1664:   adding $BB_4_0002 to frontierExitBlocks
(0.026106) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.026115) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.026123) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_4_0002
(0.026140) KernelPartitioningPass.cpp:1782:  block $BB_4_0002 (1 external edges) terminator: bar.sync 0
(0.026157) KernelPartitioningPass.cpp:1800:    barrier
(0.026165) KernelPartitioningPass.cpp:1801:     block: $BB_4_0002
(0.026174) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.026236) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.026254) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.026263) KernelPartitioningPass.cpp:1585:     IN-edge: $BB_4_0002_bar_entry_handler_from_4_0002 -> $BB_4_0002_bar (3 live values
(0.026275) KernelPartitioningPass.cpp:1731:       alive: 1 [type: s64, offset: 0]
(0.026288) KernelPartitioningPass.cpp:1731:       alive: 5 [type: s32, offset: 8]
(0.026300) KernelPartitioningPass.cpp:1731:       alive: 8 [type: s64, offset: 16]
(0.026314) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.026323) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_4_0002_bar -> $BB_4_0002_bar_thread_exit (0 live values
(0.026333) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.026341) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_4_0002_bar_thread_exit
(0.026354) KernelPartitioningPass.cpp:1664:   adding $BB_4_0002_bar to frontierExitBlocks
(0.026363) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.026372) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.026380) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_4_0002_bar
(0.026388) KernelPartitioningPass.cpp:1782:  block $BB_4_0002_bar (1 external edges) terminator: exit
(0.026397) KernelPartitioningPass.cpp:1810:    exit
(0.026404) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
Pass/Fail : Pass

INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCalVectorScale
INFO     Test completed in 0.0691149234772 seconds
INFO      It produced the following output:
No CAL devices found
Pass/Fail : Pass

INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestEmulator
INFO     Test completed in 0.0342788696289 seconds
INFO      It produced the following output:

INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCudaGlobals
INFO     Test completed in 0.0447669029236 seconds
INFO      It produced the following output:

INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestDataflowGraph
INFO     Test completed in 0.0366699695587 seconds
INFO      It produced the following output:
Pass/Fail : Pass


Name : TestDataflowGraph

Description: A test for the DataflowGraph class. Test Points: 1) 
             Generic: load PTX files, convert them into dataflow graphs, verify that 
             all live ranges spanning blocks are consistent. 2) SSA: convert to 
             ssa form, verify that no register is declared more than once. 3) 
             reverse SSA: convert to ssa then out of ssa, verify that all live 
             ranges spanning blocks are consistent.


Test Seed : 1336662664
Test time : 1.38283e-05

Status : Testing Generic Dataflow
 Test Passed
Testing SSA Dataflow
 Test Passed
Testing SSA then back Dataflow
 Test Passed



INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCudaMalloc
INFO     Test completed in 0.0519368648529 seconds
INFO      It produced the following output:
test_malloc(256, 128)
PASSED
test_mallocArray(256, 128)
checking results from last cudaMemcpyFromArray
PASSED
[1] mallocing pitch
[2] memcpying2d
[3] memcpying
[4] checking for errors
[5] mallocing
[6] memcpying
[7] memcpying
[8] final free
Pass/Fail : Pass

INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestPTXAssembly
INFO     Test completed in 0.059700012207 seconds
INFO      It produced the following output:
(0.003060) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(test)
(0.003082) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.003091) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.003180) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.003196) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.003229) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 0]
(0.003240) KernelPartitioningPass.cpp:729:    saved 72 bytes per thread
(0.003260) KernelPartitioningPass.cpp:568:    Spill region size is 0
(0.003279) KernelPartitioningPass.cpp:1111: Subkernel::create(test)
(0.003289) KernelPartitioningPass.cpp:1134: Subkernel::_create(test id: 1)
(0.003312) KernelPartitioningPass.cpp:1162: 
(0.003321) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.003337) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0002
(0.003352) KernelPartitioningPass.cpp:1192:   this block exits
(0.003366) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> exit
(0.003377) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_1_0002
(0.003392) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.003400) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_1_0002
(0.003409) KernelPartitioningPass.cpp:1285:   examined terminator
(0.003417) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.003423) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_1_0002 type: fallthrough
(0.003428) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.003433) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.003440) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.003445) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.003450) KernelPartitioningPass.cpp:1374:   $BB_1_0002
(0.003455) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.003467) KernelPartitioningPass.cpp:573:  Linking external edges
(0.003471) KernelPartitioningPass.cpp:575:    but first!
(0.003475) KernelPartitioningPass.cpp:581:    subkernel _subkernel_test_1 out edges: 
(0.003479) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> exit
(0.003484) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.003488) KernelPartitioningPass.cpp:604:    now linking
(0.003491) KernelPartitioningPass.cpp:621:     same subkernel
(0.003495) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0002 -> exit
(0.003525) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.003536) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.003542) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.003547) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_thread_exit (0 live values
(0.003559) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.003564) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_thread_exit
(0.003575) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.003583) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.003588) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.003592) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0002
(0.003599) KernelPartitioningPass.cpp:1782:  block $BB_1_0002 (1 external edges) terminator: exit
(0.003603) KernelPartitioningPass.cpp:1810:    exit
(0.003608) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.009069) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(test)
(0.009077) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.009082) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.009114) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.009120) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.009139) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 0]
(0.009145) KernelPartitioningPass.cpp:729:    saved 72 bytes per thread
(0.009153) KernelPartitioningPass.cpp:568:    Spill region size is 0
(0.009159) KernelPartitioningPass.cpp:1111: Subkernel::create(test)
(0.009164) KernelPartitioningPass.cpp:1134: Subkernel::_create(test id: 1)
(0.009173) KernelPartitioningPass.cpp:1162: 
(0.009177) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.009184) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0002
(0.009191) KernelPartitioningPass.cpp:1192:   this block exits
(0.009197) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> exit
(0.009202) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_1_0002
(0.009207) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.009212) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_1_0002
(0.009216) KernelPartitioningPass.cpp:1285:   examined terminator
(0.009220) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.009224) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_1_0002 type: fallthrough
(0.009229) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.009233) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.009238) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.009243) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.009247) KernelPartitioningPass.cpp:1374:   $BB_1_0002
(0.009251) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.009259) KernelPartitioningPass.cpp:573:  Linking external edges
(0.009263) KernelPartitioningPass.cpp:575:    but first!
(0.009267) KernelPartitioningPass.cpp:581:    subkernel _subkernel_test_1 out edges: 
(0.009271) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> exit
(0.009275) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.009279) KernelPartitioningPass.cpp:604:    now linking
(0.009283) KernelPartitioningPass.cpp:621:     same subkernel
(0.009286) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0002 -> exit
(0.009311) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.009319) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.009324) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.009328) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_thread_exit (0 live values
(0.009335) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.009340) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_thread_exit
(0.009347) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.009353) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.009358) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.009362) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0002
(0.009367) KernelPartitioningPass.cpp:1782:  block $BB_1_0002 (1 external edges) terminator: exit
(0.009371) KernelPartitioningPass.cpp:1810:    exit
(0.009375) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.009899) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(test)
(0.009906) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.009910) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.009934) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.009940) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.009948) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 0]
(0.009953) KernelPartitioningPass.cpp:729:    saved 72 bytes per thread
(0.009961) KernelPartitioningPass.cpp:568:    Spill region size is 0
(0.009966) KernelPartitioningPass.cpp:1111: Subkernel::create(test)
(0.009970) KernelPartitioningPass.cpp:1134: Subkernel::_create(test id: 1)
(0.009978) KernelPartitioningPass.cpp:1162: 
(0.009982) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.009997) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0002
(0.010003) KernelPartitioningPass.cpp:1192:   this block exits
(0.010009) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> exit
(0.010013) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_1_0002
(0.010019) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.010023) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_1_0002
(0.010027) KernelPartitioningPass.cpp:1285:   examined terminator
(0.010031) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.010035) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_1_0002 type: fallthrough
(0.010040) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.010044) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.010048) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.010053) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.010057) KernelPartitioningPass.cpp:1374:   $BB_1_0002
(0.010061) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.010068) KernelPartitioningPass.cpp:573:  Linking external edges
(0.010072) KernelPartitioningPass.cpp:575:    but first!
(0.010076) KernelPartitioningPass.cpp:581:    subkernel _subkernel_test_1 out edges: 
(0.010080) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> exit
(0.010084) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.010087) KernelPartitioningPass.cpp:604:    now linking
(0.010091) KernelPartitioningPass.cpp:621:     same subkernel
(0.010095) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0002 -> exit
(0.010118) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.010126) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.010131) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.010135) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_thread_exit (0 live values
(0.010141) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.010146) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_thread_exit
(0.010154) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.010159) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.010164) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.010168) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0002
(0.010172) KernelPartitioningPass.cpp:1782:  block $BB_1_0002 (1 external edges) terminator: exit
(0.010177) KernelPartitioningPass.cpp:1810:    exit
(0.010181) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.010987) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(test)
(0.010993) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.010998) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.011025) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.011030) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.011040) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 0]
(0.011044) KernelPartitioningPass.cpp:729:    saved 72 bytes per thread
(0.011052) KernelPartitioningPass.cpp:568:    Spill region size is 0
(0.011058) KernelPartitioningPass.cpp:1111: Subkernel::create(test)
(0.011062) KernelPartitioningPass.cpp:1134: Subkernel::_create(test id: 1)
(0.011070) KernelPartitioningPass.cpp:1162: 
(0.011074) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.011081) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0002
(0.011087) KernelPartitioningPass.cpp:1192:   this block exits
(0.011093) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> exit
(0.011097) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_1_0002
(0.011102) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.011117) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_1_0002
(0.011122) KernelPartitioningPass.cpp:1285:   examined terminator
(0.011126) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.011130) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_1_0002 type: fallthrough
(0.011135) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.011139) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.011144) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.011148) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.011153) KernelPartitioningPass.cpp:1374:   $BB_1_0002
(0.011157) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.011164) KernelPartitioningPass.cpp:573:  Linking external edges
(0.011168) KernelPartitioningPass.cpp:575:    but first!
(0.011172) KernelPartitioningPass.cpp:581:    subkernel _subkernel_test_1 out edges: 
(0.011176) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> exit
(0.011180) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.011184) KernelPartitioningPass.cpp:604:    now linking
(0.011188) KernelPartitioningPass.cpp:621:     same subkernel
(0.011192) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0002 -> exit
(0.011216) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.011224) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.011229) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.011233) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_thread_exit (0 live values
(0.011239) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.011244) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_thread_exit
(0.011252) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.011257) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.011262) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.011266) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0002
(0.011270) KernelPartitioningPass.cpp:1782:  block $BB_1_0002 (1 external edges) terminator: exit
(0.011274) KernelPartitioningPass.cpp:1810:    exit
(0.011278) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.011947) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(test)
(0.011953) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.011957) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.011982) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.011987) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.011996) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 0]
(0.012000) KernelPartitioningPass.cpp:729:    saved 72 bytes per thread
(0.012007) KernelPartitioningPass.cpp:568:    Spill region size is 0
(0.012013) KernelPartitioningPass.cpp:1111: Subkernel::create(test)
(0.012017) KernelPartitioningPass.cpp:1134: Subkernel::_create(test id: 1)
(0.012026) KernelPartitioningPass.cpp:1162: 
(0.012030) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.012037) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0002
(0.012043) KernelPartitioningPass.cpp:1192:   this block exits
(0.012049) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> exit
(0.012053) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_1_0002
(0.012058) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.012062) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_1_0002
(0.012067) KernelPartitioningPass.cpp:1285:   examined terminator
(0.012071) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.012075) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_1_0002 type: fallthrough
(0.012079) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.012091) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.012096) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.012101) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.012105) KernelPartitioningPass.cpp:1374:   $BB_1_0002
(0.012110) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.012117) KernelPartitioningPass.cpp:573:  Linking external edges
(0.012121) KernelPartitioningPass.cpp:575:    but first!
(0.012125) KernelPartitioningPass.cpp:581:    subkernel _subkernel_test_1 out edges: 
(0.012129) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> exit
(0.012133) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.012137) KernelPartitioningPass.cpp:604:    now linking
(0.012141) KernelPartitioningPass.cpp:621:     same subkernel
(0.012145) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0002 -> exit
(0.012168) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.012176) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.012181) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.012185) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_thread_exit (0 live values
(0.012191) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.012196) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_thread_exit
(0.012204) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.012209) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.012214) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.012218) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0002
(0.012222) KernelPartitioningPass.cpp:1782:  block $BB_1_0002 (1 external edges) terminator: exit
(0.012226) KernelPartitioningPass.cpp:1810:    exit
(0.012230) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.013242) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(test)
(0.013249) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.013253) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.013279) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.013284) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.013293) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 0]
(0.013297) KernelPartitioningPass.cpp:729:    saved 72 bytes per thread
(0.013304) KernelPartitioningPass.cpp:568:    Spill region size is 0
(0.013310) KernelPartitioningPass.cpp:1111: Subkernel::create(test)
(0.013314) KernelPartitioningPass.cpp:1134: Subkernel::_create(test id: 1)
(0.013323) KernelPartitioningPass.cpp:1162: 
(0.013327) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.013334) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0002
(0.013340) KernelPartitioningPass.cpp:1192:   this block exits
(0.013345) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> exit
(0.013350) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_1_0002
(0.013355) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.013359) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_1_0002
(0.013363) KernelPartitioningPass.cpp:1285:   examined terminator
(0.013367) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.013371) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_1_0002 type: fallthrough
(0.013376) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.013380) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.013384) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.013389) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.013393) KernelPartitioningPass.cpp:1374:   $BB_1_0002
(0.013397) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.013412) KernelPartitioningPass.cpp:573:  Linking external edges
(0.013416) KernelPartitioningPass.cpp:575:    but first!
(0.013420) KernelPartitioningPass.cpp:581:    subkernel _subkernel_test_1 out edges: 
(0.013425) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> exit
(0.013428) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.013433) KernelPartitioningPass.cpp:604:    now linking
(0.013436) KernelPartitioningPass.cpp:621:     same subkernel
(0.013440) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0002 -> exit
(0.013464) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.013472) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.013477) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.013481) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_thread_exit (0 live values
(0.013487) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.013492) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_thread_exit
(0.013499) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.013505) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.013510) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.013514) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0002
(0.013518) KernelPartitioningPass.cpp:1782:  block $BB_1_0002 (1 external edges) terminator: exit
(0.013522) KernelPartitioningPass.cpp:1810:    exit
(0.013526) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.014184) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(test)
(0.014190) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.014194) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.014219) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.014224) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.014232) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 0]
(0.014237) KernelPartitioningPass.cpp:729:    saved 72 bytes per thread
(0.014245) KernelPartitioningPass.cpp:568:    Spill region size is 0
(0.014251) KernelPartitioningPass.cpp:1111: Subkernel::create(test)
(0.014255) KernelPartitioningPass.cpp:1134: Subkernel::_create(test id: 1)
(0.014263) KernelPartitioningPass.cpp:1162: 
(0.014267) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.014274) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0002
(0.014280) KernelPartitioningPass.cpp:1192:   this block exits
(0.014286) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> exit
(0.014290) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_1_0002
(0.014296) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.014300) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_1_0002
(0.014304) KernelPartitioningPass.cpp:1285:   examined terminator
(0.014308) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.014312) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_1_0002 type: fallthrough
(0.014317) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.014321) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.014325) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.014330) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.014334) KernelPartitioningPass.cpp:1374:   $BB_1_0002
(0.014338) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.014345) KernelPartitioningPass.cpp:573:  Linking external edges
(0.014349) KernelPartitioningPass.cpp:575:    but first!
(0.014353) KernelPartitioningPass.cpp:581:    subkernel _subkernel_test_1 out edges: 
(0.014357) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> exit
(0.014360) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.014364) KernelPartitioningPass.cpp:604:    now linking
(0.014376) KernelPartitioningPass.cpp:621:     same subkernel
(0.014380) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0002 -> exit
(0.014404) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.014412) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.014417) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.014421) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_thread_exit (0 live values
(0.014427) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.014432) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_thread_exit
(0.014440) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.014445) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.014450) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.014454) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0002
(0.014458) KernelPartitioningPass.cpp:1782:  block $BB_1_0002 (1 external edges) terminator: exit
(0.014462) KernelPartitioningPass.cpp:1810:    exit
(0.014467) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.015130) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(test)
(0.015136) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.015140) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.015165) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.015169) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.015178) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 0]
(0.015183) KernelPartitioningPass.cpp:729:    saved 72 bytes per thread
(0.015190) KernelPartitioningPass.cpp:568:    Spill region size is 0
(0.015196) KernelPartitioningPass.cpp:1111: Subkernel::create(test)
(0.015200) KernelPartitioningPass.cpp:1134: Subkernel::_create(test id: 1)
(0.015209) KernelPartitioningPass.cpp:1162: 
(0.015213) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.015220) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0002
(0.015226) KernelPartitioningPass.cpp:1192:   this block exits
(0.015231) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> exit
(0.015236) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_1_0002
(0.015241) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.015245) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_1_0002
(0.015249) KernelPartitioningPass.cpp:1285:   examined terminator
(0.015252) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.015257) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_1_0002 type: fallthrough
(0.015261) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.015265) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.015270) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.015274) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.015278) KernelPartitioningPass.cpp:1374:   $BB_1_0002
(0.015283) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.015289) KernelPartitioningPass.cpp:573:  Linking external edges
(0.015293) KernelPartitioningPass.cpp:575:    but first!
(0.015297) KernelPartitioningPass.cpp:581:    subkernel _subkernel_test_1 out edges: 
(0.015301) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> exit
(0.015305) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.015309) KernelPartitioningPass.cpp:604:    now linking
(0.015313) KernelPartitioningPass.cpp:621:     same subkernel
(0.015317) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0002 -> exit
(0.015340) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.015347) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.015352) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.015357) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_thread_exit (0 live values
(0.015370) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.015375) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_thread_exit
(0.015383) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.015388) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.015393) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.015398) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0002
(0.015402) KernelPartitioningPass.cpp:1782:  block $BB_1_0002 (1 external edges) terminator: exit
(0.015406) KernelPartitioningPass.cpp:1810:    exit
(0.015410) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.016116) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(test)
(0.016122) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.016127) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.016151) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.016156) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.016165) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 0]
(0.016170) KernelPartitioningPass.cpp:729:    saved 72 bytes per thread
(0.016178) KernelPartitioningPass.cpp:568:    Spill region size is 0
(0.016183) KernelPartitioningPass.cpp:1111: Subkernel::create(test)
(0.016187) KernelPartitioningPass.cpp:1134: Subkernel::_create(test id: 1)
(0.016196) KernelPartitioningPass.cpp:1162: 
(0.016200) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.016207) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0002
(0.016212) KernelPartitioningPass.cpp:1192:   this block exits
(0.016218) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> exit
(0.016223) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_1_0002
(0.016228) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.016232) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_1_0002
(0.016236) KernelPartitioningPass.cpp:1285:   examined terminator
(0.016240) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.016244) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_1_0002 type: fallthrough
(0.016248) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.016252) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.016257) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.016262) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.016266) KernelPartitioningPass.cpp:1374:   $BB_1_0002
(0.016270) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.016277) KernelPartitioningPass.cpp:573:  Linking external edges
(0.016281) KernelPartitioningPass.cpp:575:    but first!
(0.016285) KernelPartitioningPass.cpp:581:    subkernel _subkernel_test_1 out edges: 
(0.016289) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> exit
(0.016293) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.016297) KernelPartitioningPass.cpp:604:    now linking
(0.016301) KernelPartitioningPass.cpp:621:     same subkernel
(0.016304) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0002 -> exit
(0.016328) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.016335) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.016340) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.016344) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_thread_exit (0 live values
(0.016350) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.016354) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_thread_exit
(0.016362) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.016367) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.016381) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.016386) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0002
(0.016390) KernelPartitioningPass.cpp:1782:  block $BB_1_0002 (1 external edges) terminator: exit
(0.016395) KernelPartitioningPass.cpp:1810:    exit
(0.016399) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.016912) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(test)
(0.016918) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.016922) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.016946) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.016951) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.016960) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 0]
(0.016964) KernelPartitioningPass.cpp:729:    saved 72 bytes per thread
(0.016972) KernelPartitioningPass.cpp:568:    Spill region size is 0
(0.016978) KernelPartitioningPass.cpp:1111: Subkernel::create(test)
(0.016982) KernelPartitioningPass.cpp:1134: Subkernel::_create(test id: 1)
(0.016990) KernelPartitioningPass.cpp:1162: 
(0.016994) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.017001) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0002
(0.017007) KernelPartitioningPass.cpp:1192:   this block exits
(0.017013) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> exit
(0.017018) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_1_0002
(0.017023) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.017027) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_1_0002
(0.017031) KernelPartitioningPass.cpp:1285:   examined terminator
(0.017035) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.017039) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_1_0002 type: fallthrough
(0.017044) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.017048) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.017052) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.017057) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.017061) KernelPartitioningPass.cpp:1374:   $BB_1_0002
(0.017066) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.017072) KernelPartitioningPass.cpp:573:  Linking external edges
(0.017077) KernelPartitioningPass.cpp:575:    but first!
(0.017081) KernelPartitioningPass.cpp:581:    subkernel _subkernel_test_1 out edges: 
(0.017085) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> exit
(0.017088) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.017092) KernelPartitioningPass.cpp:604:    now linking
(0.017096) KernelPartitioningPass.cpp:621:     same subkernel
(0.017100) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0002 -> exit
(0.017123) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.017131) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.017135) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.017140) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_thread_exit (0 live values
(0.017146) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.017150) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_thread_exit
(0.017158) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.017163) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.017168) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.017172) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0002
(0.017176) KernelPartitioningPass.cpp:1782:  block $BB_1_0002 (1 external edges) terminator: exit
(0.017181) KernelPartitioningPass.cpp:1810:    exit
(0.017185) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.017903) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(test)
(0.017910) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.017914) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.017940) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.017946) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.017955) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 0]
(0.017959) KernelPartitioningPass.cpp:729:    saved 72 bytes per thread
(0.017967) KernelPartitioningPass.cpp:568:    Spill region size is 0
(0.017973) KernelPartitioningPass.cpp:1111: Subkernel::create(test)
(0.017977) KernelPartitioningPass.cpp:1134: Subkernel::_create(test id: 1)
(0.017985) KernelPartitioningPass.cpp:1162: 
(0.017990) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.017997) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0002
(0.018003) KernelPartitioningPass.cpp:1192:   this block exits
(0.018008) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> exit
(0.018013) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_1_0002
(0.018018) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.018022) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_1_0002
(0.018026) KernelPartitioningPass.cpp:1285:   examined terminator
(0.018030) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.018035) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_1_0002 type: fallthrough
(0.018039) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.018043) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.018048) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.018053) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.018057) KernelPartitioningPass.cpp:1374:   $BB_1_0002
(0.018061) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.018068) KernelPartitioningPass.cpp:573:  Linking external edges
(0.018072) KernelPartitioningPass.cpp:575:    but first!
(0.018075) KernelPartitioningPass.cpp:581:    subkernel _subkernel_test_1 out edges: 
(0.018079) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> exit
(0.018083) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.018087) KernelPartitioningPass.cpp:604:    now linking
(0.018091) KernelPartitioningPass.cpp:621:     same subkernel
(0.018095) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0002 -> exit
(0.018118) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.018126) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.018131) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.018135) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_thread_exit (0 live values
(0.018141) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.018145) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_thread_exit
(0.018153) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.018158) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.018162) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.018167) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0002
(0.018171) KernelPartitioningPass.cpp:1782:  block $BB_1_0002 (1 external edges) terminator: exit
(0.018175) KernelPartitioningPass.cpp:1810:    exit
(0.018179) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.018887) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(test)
(0.018894) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.018898) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.018925) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.018930) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.018947) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 0]
(0.018952) KernelPartitioningPass.cpp:729:    saved 72 bytes per thread
(0.018960) KernelPartitioningPass.cpp:568:    Spill region size is 0
(0.018966) KernelPartitioningPass.cpp:1111: Subkernel::create(test)
(0.018970) KernelPartitioningPass.cpp:1134: Subkernel::_create(test id: 1)
(0.018978) KernelPartitioningPass.cpp:1162: 
(0.018983) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.018990) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0002
(0.018996) KernelPartitioningPass.cpp:1192:   this block exits
(0.019002) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> exit
(0.019006) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_1_0002
(0.019011) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.019016) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_1_0002
(0.019020) KernelPartitioningPass.cpp:1285:   examined terminator
(0.019023) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.019028) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_1_0002 type: fallthrough
(0.019032) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.019036) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.019041) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.019046) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.019050) KernelPartitioningPass.cpp:1374:   $BB_1_0002
(0.019054) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.019061) KernelPartitioningPass.cpp:573:  Linking external edges
(0.019065) KernelPartitioningPass.cpp:575:    but first!
(0.019069) KernelPartitioningPass.cpp:581:    subkernel _subkernel_test_1 out edges: 
(0.019073) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> exit
(0.019077) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.019081) KernelPartitioningPass.cpp:604:    now linking
(0.019084) KernelPartitioningPass.cpp:621:     same subkernel
(0.019088) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0002 -> exit
(0.019112) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.019120) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.019125) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.019130) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_thread_exit (0 live values
(0.019136) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.019140) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_thread_exit
(0.019148) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.019153) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.019158) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.019162) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0002
(0.019166) KernelPartitioningPass.cpp:1782:  block $BB_1_0002 (1 external edges) terminator: exit
(0.019171) KernelPartitioningPass.cpp:1810:    exit
(0.019175) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.019847) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(test)
(0.019853) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.019858) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.019883) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.019887) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.019897) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 0]
(0.019901) KernelPartitioningPass.cpp:729:    saved 72 bytes per thread
(0.019909) KernelPartitioningPass.cpp:568:    Spill region size is 0
(0.019914) KernelPartitioningPass.cpp:1111: Subkernel::create(test)
(0.019918) KernelPartitioningPass.cpp:1134: Subkernel::_create(test id: 1)
(0.019927) KernelPartitioningPass.cpp:1162: 
(0.019938) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.019946) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0002
(0.019952) KernelPartitioningPass.cpp:1192:   this block exits
(0.019957) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> exit
(0.019962) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_1_0002
(0.019967) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.019971) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_1_0002
(0.019976) KernelPartitioningPass.cpp:1285:   examined terminator
(0.019979) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.019984) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_1_0002 type: fallthrough
(0.019988) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.019992) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.019997) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.020001) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.020006) KernelPartitioningPass.cpp:1374:   $BB_1_0002
(0.020010) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.020017) KernelPartitioningPass.cpp:573:  Linking external edges
(0.020021) KernelPartitioningPass.cpp:575:    but first!
(0.020025) KernelPartitioningPass.cpp:581:    subkernel _subkernel_test_1 out edges: 
(0.020029) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> exit
(0.020033) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.020037) KernelPartitioningPass.cpp:604:    now linking
(0.020041) KernelPartitioningPass.cpp:621:     same subkernel
(0.020044) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0002 -> exit
(0.020068) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.020076) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.020081) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.020085) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_thread_exit (0 live values
(0.020091) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.020096) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_thread_exit
(0.020104) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.020109) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.020114) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.020118) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0002
(0.020122) KernelPartitioningPass.cpp:1782:  block $BB_1_0002 (1 external edges) terminator: exit
(0.020127) KernelPartitioningPass.cpp:1810:    exit
(0.020131) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.020774) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(test)
(0.020780) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.020785) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.020809) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.020814) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.020823) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 0]
(0.020828) KernelPartitioningPass.cpp:729:    saved 72 bytes per thread
(0.020835) KernelPartitioningPass.cpp:568:    Spill region size is 0
(0.020841) KernelPartitioningPass.cpp:1111: Subkernel::create(test)
(0.020845) KernelPartitioningPass.cpp:1134: Subkernel::_create(test id: 1)
(0.020854) KernelPartitioningPass.cpp:1162: 
(0.020858) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.020864) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0002
(0.020870) KernelPartitioningPass.cpp:1192:   this block exits
(0.020876) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> exit
(0.020880) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_1_0002
(0.020886) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.020897) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_1_0002
(0.020901) KernelPartitioningPass.cpp:1285:   examined terminator
(0.020905) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.020910) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_1_0002 type: fallthrough
(0.020915) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.020919) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.020923) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.020928) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.020932) KernelPartitioningPass.cpp:1374:   $BB_1_0002
(0.020936) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.020943) KernelPartitioningPass.cpp:573:  Linking external edges
(0.020948) KernelPartitioningPass.cpp:575:    but first!
(0.020951) KernelPartitioningPass.cpp:581:    subkernel _subkernel_test_1 out edges: 
(0.020955) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> exit
(0.020959) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.020963) KernelPartitioningPass.cpp:604:    now linking
(0.020967) KernelPartitioningPass.cpp:621:     same subkernel
(0.020970) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0002 -> exit
(0.020994) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.021002) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.021007) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.021011) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_thread_exit (0 live values
(0.021017) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.021022) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_thread_exit
(0.021030) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.021035) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.021039) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.021044) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0002
(0.021048) KernelPartitioningPass.cpp:1782:  block $BB_1_0002 (1 external edges) terminator: exit
(0.021052) KernelPartitioningPass.cpp:1810:    exit
(0.021056) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.021681) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(test)
(0.021687) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.021691) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.021715) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.021720) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.021729) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 0]
(0.021734) KernelPartitioningPass.cpp:729:    saved 72 bytes per thread
(0.021741) KernelPartitioningPass.cpp:568:    Spill region size is 0
(0.021747) KernelPartitioningPass.cpp:1111: Subkernel::create(test)
(0.021751) KernelPartitioningPass.cpp:1134: Subkernel::_create(test id: 1)
(0.021759) KernelPartitioningPass.cpp:1162: 
(0.021763) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.021770) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0002
(0.021776) KernelPartitioningPass.cpp:1192:   this block exits
(0.021782) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> exit
(0.021786) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_1_0002
(0.021791) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.021795) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_1_0002
(0.021799) KernelPartitioningPass.cpp:1285:   examined terminator
(0.021803) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.021807) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_1_0002 type: fallthrough
(0.021812) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.021823) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.021828) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.021833) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.021837) KernelPartitioningPass.cpp:1374:   $BB_1_0002
(0.021842) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.021849) KernelPartitioningPass.cpp:573:  Linking external edges
(0.021853) KernelPartitioningPass.cpp:575:    but first!
(0.021857) KernelPartitioningPass.cpp:581:    subkernel _subkernel_test_1 out edges: 
(0.021861) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> exit
(0.021865) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.021868) KernelPartitioningPass.cpp:604:    now linking
(0.021872) KernelPartitioningPass.cpp:621:     same subkernel
(0.021876) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0002 -> exit
(0.021900) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.021908) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.021912) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.021917) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_thread_exit (0 live values
(0.021923) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.021927) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_thread_exit
(0.021935) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.021940) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.021945) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.021949) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0002
(0.021953) KernelPartitioningPass.cpp:1782:  block $BB_1_0002 (1 external edges) terminator: exit
(0.021957) KernelPartitioningPass.cpp:1810:    exit
(0.021961) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.022595) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(test)
(0.022601) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.022605) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.022629) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.022635) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.022643) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 0]
(0.022648) KernelPartitioningPass.cpp:729:    saved 72 bytes per thread
(0.022655) KernelPartitioningPass.cpp:568:    Spill region size is 0
(0.022660) KernelPartitioningPass.cpp:1111: Subkernel::create(test)
(0.022665) KernelPartitioningPass.cpp:1134: Subkernel::_create(test id: 1)
(0.022673) KernelPartitioningPass.cpp:1162: 
(0.022677) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.022684) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0002
(0.022690) KernelPartitioningPass.cpp:1192:   this block exits
(0.022695) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> exit
(0.022700) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_1_0002
(0.022705) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.022709) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_1_0002
(0.022713) KernelPartitioningPass.cpp:1285:   examined terminator
(0.022716) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.022720) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_1_0002 type: fallthrough
(0.022725) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.022729) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.022734) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.022739) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.022743) KernelPartitioningPass.cpp:1374:   $BB_1_0002
(0.022747) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.022761) KernelPartitioningPass.cpp:573:  Linking external edges
(0.022766) KernelPartitioningPass.cpp:575:    but first!
(0.022770) KernelPartitioningPass.cpp:581:    subkernel _subkernel_test_1 out edges: 
(0.022774) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> exit
(0.022778) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.022782) KernelPartitioningPass.cpp:604:    now linking
(0.022786) KernelPartitioningPass.cpp:621:     same subkernel
(0.022790) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0002 -> exit
(0.022814) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.022821) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.022826) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.022830) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_thread_exit (0 live values
(0.022837) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.022841) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_thread_exit
(0.022849) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.022854) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.022859) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.022863) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0002
(0.022867) KernelPartitioningPass.cpp:1782:  block $BB_1_0002 (1 external edges) terminator: exit
(0.022871) KernelPartitioningPass.cpp:1810:    exit
(0.022876) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.023509) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(test)
(0.023515) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.023519) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.023544) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.023549) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.023558) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 0]
(0.023562) KernelPartitioningPass.cpp:729:    saved 72 bytes per thread
(0.023570) KernelPartitioningPass.cpp:568:    Spill region size is 0
(0.023576) KernelPartitioningPass.cpp:1111: Subkernel::create(test)
(0.023580) KernelPartitioningPass.cpp:1134: Subkernel::_create(test id: 1)
(0.023588) KernelPartitioningPass.cpp:1162: 
(0.023601) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.023608) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0002
(0.023614) KernelPartitioningPass.cpp:1192:   this block exits
(0.023620) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> exit
(0.023625) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_1_0002
(0.023630) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.023634) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_1_0002
(0.023638) KernelPartitioningPass.cpp:1285:   examined terminator
(0.023642) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.023646) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_1_0002 type: fallthrough
(0.023651) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.023655) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.023660) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.023665) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.023669) KernelPartitioningPass.cpp:1374:   $BB_1_0002
(0.023674) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.023681) KernelPartitioningPass.cpp:573:  Linking external edges
(0.023685) KernelPartitioningPass.cpp:575:    but first!
(0.023689) KernelPartitioningPass.cpp:581:    subkernel _subkernel_test_1 out edges: 
(0.023693) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> exit
(0.023697) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.023701) KernelPartitioningPass.cpp:604:    now linking
(0.023713) KernelPartitioningPass.cpp:621:     same subkernel
(0.023717) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0002 -> exit
(0.023742) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.023750) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.023755) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.023760) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_thread_exit (0 live values
(0.023766) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.023771) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_thread_exit
(0.023779) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.023784) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.023789) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.023793) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0002
(0.023798) KernelPartitioningPass.cpp:1782:  block $BB_1_0002 (1 external edges) terminator: exit
(0.023803) KernelPartitioningPass.cpp:1810:    exit
(0.023807) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.024460) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(test)
(0.024466) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.024470) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.024495) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.024500) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.024510) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 0]
(0.024514) KernelPartitioningPass.cpp:729:    saved 72 bytes per thread
(0.024522) KernelPartitioningPass.cpp:568:    Spill region size is 0
(0.024527) KernelPartitioningPass.cpp:1111: Subkernel::create(test)
(0.024532) KernelPartitioningPass.cpp:1134: Subkernel::_create(test id: 1)
(0.024540) KernelPartitioningPass.cpp:1162: 
(0.024544) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.024551) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0002
(0.024557) KernelPartitioningPass.cpp:1192:   this block exits
(0.024563) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> exit
(0.024567) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_1_0002
(0.024572) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.024576) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_1_0002
(0.024580) KernelPartitioningPass.cpp:1285:   examined terminator
(0.024584) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.024588) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_1_0002 type: fallthrough
(0.024593) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.024597) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.024601) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.024606) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.024611) KernelPartitioningPass.cpp:1374:   $BB_1_0002
(0.024615) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.024621) KernelPartitioningPass.cpp:573:  Linking external edges
(0.024626) KernelPartitioningPass.cpp:575:    but first!
(0.024629) KernelPartitioningPass.cpp:581:    subkernel _subkernel_test_1 out edges: 
(0.024633) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> exit
(0.024637) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.024641) KernelPartitioningPass.cpp:604:    now linking
(0.024645) KernelPartitioningPass.cpp:621:     same subkernel
(0.024649) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0002 -> exit
(0.024681) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.024689) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.024694) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.024706) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_thread_exit (0 live values
(0.024721) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.024726) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_thread_exit
(0.024734) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.024739) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.024744) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.024748) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0002
(0.024753) KernelPartitioningPass.cpp:1782:  block $BB_1_0002 (1 external edges) terminator: exit
(0.024757) KernelPartitioningPass.cpp:1810:    exit
(0.024761) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.025415) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(test)
(0.025421) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.025425) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.025450) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.025455) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.025464) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 0]
(0.025469) KernelPartitioningPass.cpp:729:    saved 72 bytes per thread
(0.025476) KernelPartitioningPass.cpp:568:    Spill region size is 0
(0.025482) KernelPartitioningPass.cpp:1111: Subkernel::create(test)
(0.025486) KernelPartitioningPass.cpp:1134: Subkernel::_create(test id: 1)
(0.025494) KernelPartitioningPass.cpp:1162: 
(0.025498) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.025505) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0002
(0.025511) KernelPartitioningPass.cpp:1192:   this block exits
(0.025517) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> exit
(0.025521) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_1_0002
(0.025527) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.025531) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_1_0002
(0.025534) KernelPartitioningPass.cpp:1285:   examined terminator
(0.025538) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.025542) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_1_0002 type: fallthrough
(0.025547) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.025551) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.025556) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.025560) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.025565) KernelPartitioningPass.cpp:1374:   $BB_1_0002
(0.025569) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.025575) KernelPartitioningPass.cpp:573:  Linking external edges
(0.025579) KernelPartitioningPass.cpp:575:    but first!
(0.025583) KernelPartitioningPass.cpp:581:    subkernel _subkernel_test_1 out edges: 
(0.025587) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> exit
(0.025591) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.025595) KernelPartitioningPass.cpp:604:    now linking
(0.025599) KernelPartitioningPass.cpp:621:     same subkernel
(0.025603) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0002 -> exit
(0.025626) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.025633) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.025638) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.025642) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_thread_exit (0 live values
(0.025648) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.025652) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_thread_exit
(0.025661) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.025699) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.025726) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.025735) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0002
(0.025742) KernelPartitioningPass.cpp:1782:  block $BB_1_0002 (1 external edges) terminator: exit
(0.025747) KernelPartitioningPass.cpp:1810:    exit
(0.025752) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.026304) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(test)
(0.026311) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.026315) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.026337) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.026343) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.026351) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 0]
(0.026355) KernelPartitioningPass.cpp:729:    saved 32 bytes per thread
(0.026362) KernelPartitioningPass.cpp:568:    Spill region size is 0
(0.026368) KernelPartitioningPass.cpp:1111: Subkernel::create(test)
(0.026372) KernelPartitioningPass.cpp:1134: Subkernel::_create(test id: 1)
(0.026381) KernelPartitioningPass.cpp:1162: 
(0.026385) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.026391) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0002
(0.026397) KernelPartitioningPass.cpp:1192:   this block exits
(0.026402) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> exit
(0.026407) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_1_0002
(0.026412) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.026416) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_1_0002
(0.026420) KernelPartitioningPass.cpp:1285:   examined terminator
(0.026424) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.026428) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_1_0002 type: fallthrough
(0.026433) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.026436) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.026441) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.026446) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.026450) KernelPartitioningPass.cpp:1374:   $BB_1_0002
(0.026454) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.026461) KernelPartitioningPass.cpp:573:  Linking external edges
(0.026465) KernelPartitioningPass.cpp:575:    but first!
(0.026469) KernelPartitioningPass.cpp:581:    subkernel _subkernel_test_1 out edges: 
(0.026473) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> exit
(0.026477) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.026481) KernelPartitioningPass.cpp:604:    now linking
(0.026485) KernelPartitioningPass.cpp:621:     same subkernel
(0.026489) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0002 -> exit
(0.026509) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.026516) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.026521) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.026525) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_thread_exit (0 live values
(0.026531) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.026536) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_thread_exit
(0.026543) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.026548) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.026553) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.026557) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0002
(0.026562) KernelPartitioningPass.cpp:1782:  block $BB_1_0002 (1 external edges) terminator: exit
(0.026566) KernelPartitioningPass.cpp:1810:    exit
(0.026570) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
Pass/Fail : Fail


Name : TestPTXAssembly

Description: A unit test framework for PTX. Runs random inputs through unit 
             tests on all available devices until a timer expires.


Test Seed : 1336662664
Test time : 0.0273976

Status : Ran 'TestVectorElements-u32' for 19 iterations.
 Output parameter 0 (I16) computed value - 0 does not match reference value - -23419
  On device - 0 - 'Ocelot Dynamic Multicore CPU'
Test 'TestAdd-u16' seed '1336662664' failed.



INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestLLVMKernels
INFO     Test completed in 0.121014118195 seconds
INFO      It produced the following output:
Pass/Fail : Pass


Name : TestLLVMKernels

Description: A unit test for the LLVM executive runtime. Test Points: 1) 
             Execute a kernel with a loop. 2) Execute a matrix multiply kernel.


Test Seed : 1336662664
Test time : 0.0648763

Status : A = [
 1 0 0 0 0 0 0 0 ;
 0.5 1 0 0 0 0 0 0 ;
 0.333333 0.5 1 0 0 0 0 0 ;
 0.25 0.333333 0.5 1 0 0 0 0 ;
 0.2 0.25 0.333333 0.5 1 0 0 0 ;
 0.166667 0.2 0.25 0.333333 0.5 1 0 0 ;
 0.142857 0.166667 0.2 0.25 0.333333 0.5 1 0 ;
 0.125 0.142857 0.166667 0.2 0.25 0.333333 0.5 1 ;
];
V = [
 1 ;
 2 ;
 3 ;
 4 ;
 5 ;
 6 ;
 7 ;
 8 ;
];
R = [
 1 ;
 2.5 ;
 4.33333 ;
 6.41667 ;
 8.7 ;
 11.15 ;
 13.7429 ;
 16.4607 ;
];



INFO     
Passing tests:
 (0.108s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCudaSequence : Passed
 (0.037s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestDataflowGraph : Passed
 (0.121s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestLLVMKernels : Passed
 (0.041s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestLexer : Passed
 (0.040s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestPTXToLLVMTranslator : Passed
 (0.052s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCudaMalloc : Passed
 (0.029s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestParser : Passed
 (0.060s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestDeviceSwitching : Passed
 (0.045s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestInstructions : Passed
 (0.037s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestLLVMInstructions : Passed
 (0.069s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCalVectorScale : Passed
 (0.052s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestKernels : Passed

Failing tests:
 (0.075s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCudaTexture2D : Did not complete.
 (0.067s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestIndirectFunctionCall : Did not complete.
 (0.045s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCudaGlobals : Did not complete.
 (0.052s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCudaTextureArray : Did not complete.
 (0.034s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestExternalFunctions : Did not complete.
 (0.060s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestPTXAssembly : Failed
 (0.034s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestEmulator : Did not complete.
 (0.043s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestFunctionCall : Did not complete.

