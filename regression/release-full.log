INFO     Reading in test file /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/regression/full.level
INFO      Found the following tests:
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestLexer
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestParser
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestEmulator
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestInstructions
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestKernels
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestDataflowGraph
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestLLVMInstructions
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestPTXToLLVMTranslator
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestLLVMKernels
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCudaMalloc
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCudaTexture2D
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCudaTextureArray
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCudaGlobals
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestDeviceSwitching
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCudaSequence
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCalVectorScale
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestPTXAssembly
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestFunctionCall
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestIndirectFunctionCall
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestExternalFunctions
INFO     ==== INDIVIDUAL TEST RESULTS ====

INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestDeviceSwitching 
INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestLLVMInstructions 
INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestFunctionCall 
INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCudaTexture2D 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestLLVMInstructions
INFO     Test completed in 0.0686869621277 seconds
INFO      It produced the following output:
Pass/Fail : Pass


Name : TestLLVMInstructions

Description: A test for the assembly code generation and automatic 
             verfication of individual LLVM instructions. Test Points: 1) For each 
             instruction, generate several assembly strings using the 
             instruction's toString method, make sure that these pass the valid() 
             check, compare to references from the LLVM manual.


Test Seed : 1336584815
Test time : 0.00104475

Status :  Checked instruction "<result> = add i32 4, %var"
Add Instruction Passed
 Checked instruction "%ptr = alloca i32"
 Checked instruction "%ptr = alloca i32, i32 4"
 Checked instruction "%ptr = alloca i32, i32 4, align 1024"
 Checked instruction "%ptr = alloca i32, align 1024"
Alloca Instruction Passed
 Checked instruction "<result> = and i32 4, %var"
 Checked instruction "<result> = and i32 15, 40"
 Checked instruction "<result> = and i32 4, 8"
And Instruction Passed
 Checked instruction "<result> = ashr i32 4, 1"
 Checked instruction "<result> = ashr i8 -2, 1"
 Checked instruction "<result> = ashr < 2 x i32 > < i32 -2, i32 4 >, < i32 1, i32 3 >"
Ashr Instruction Passed
 Checked instruction "%X = bitcast i8 -1 to i8"
 Checked instruction "%Z = bitcast < 2 x i32 > %V to i64"
Bitcast Instruction Passed
 Checked instruction "br i1 %cond, label %IfEqual, label %IfUnequal"
Br Instruction Passed
 Checked instruction "%retval = call i32 @test(i32 %argc)"
 Checked instruction "call i32 (i8*, ...)* @printf(i8* %msg, i32 12, i8 42)"
 Checked instruction "%X = tail call i32 @foo()"
 Checked instruction "%Y = tail call fastcc i32 @foo()"
 Checked instruction "call void @foo(i8 97 signext)"
 Checked instruction "%r = call %struct.A @foo()"
 Checked instruction "call void @foo() noreturn"
 Checked instruction "%ZZ = call zeroext i32 @bar()"
Call Instruction Passed
 Checked instruction "%result = extractelement < 4 x i32 > %vec, i32 0"
Extractelement Instruction Passed
 Checked instruction "%result = extractvalue { i32, float } %agg, 0"
Extractvalue Instruction Passed
 Checked instruction "<result> = fadd float 0x4010000000000000, %var"
Fadd Instruction Passed
 Checked instruction "<result> = fcmp oeq float 0x4010000000000000, 0x4014000000000000"
 Checked instruction "<result> = fcmp one float 0x4010000000000000, 0x4014000000000000"
 Checked instruction "<result> = fcmp olt float 0x4010000000000000, 0x4014000000000000"
 Checked instruction "<result> = fcmp ueq float 0x3ff0000000000000, 0x4000000000000000"
Fcmp Instruction Passed
 Checked instruction "<result> = fdiv float 0x4010000000000000, %var"
Fdiv Instruction Passed
 Checked instruction "<result> = fmul float 0x4010000000000000, %var"
Fmul Instruction Passed
 Checked instruction "%X = fpext float 0x400921cac0000000 to double"
 Checked instruction "%Y = fpext float 0x3ff0000000000000 to float"
Fpext Instruction Passed
 Checked instruction "%X = fptosi double 0xc05ec00000000000 to i32"
Fptosi Instruction Passed
 Checked instruction "%X = fptoui double 0x405ec00000000000 to i32"
Fptoui Instruction Passed
 Checked instruction "%X = fptrunc double 0x405ec00000000000 to float"
Fptrunc Instruction Passed
 Checked instruction "free [ 4 x i8 ]* %array"
Free Instruction Passed
 Checked instruction "<result> = frem float 0x4010000000000000, %var"
Frem Instruction Passed
 Checked instruction "<result> = fsub float 0x0, %val"
Fsub Instruction Passed
 Checked instruction "%vptr = getelementptr { i32, < 2 x i8 > }* %svptr, i32 0, i32 1, i32 1"
 Checked instruction "%eptr = getelementptr [ 12 x i8 ]* %aptr, i32 0, i32 1"
Getelementptr Instruction Passed
 Checked instruction "<result> = icmp ne float* %X, %X"
Icmp Instruction Passed
 Checked instruction "%result = insertelement < 4 x i32 > %vec, i32 1, i32 0"
Insertelement Instruction Passed
 Checked instruction "%result = insertvalue { i32, float } %agg, i32 1, 0"
Insertvalue Instruction Passed
 Checked instruction "%Y = inttoptr i64 0 to i32*"
Inttoptr Instruction Passed
 Checked instruction "%retval = invoke i32 @Test(i32 15) to label %Continue unwind label %TestCleanup"
Invoke Instruction Passed
 Checked instruction "%val = load i32* %ptr"
Load Instruction Passed
 Checked instruction "<result> = lshr i8 -2, 1"
Lshr Instruction Passed
 Checked instruction "%array2 = malloc [ 12 x i8 ], i32 %size"
Malloc Instruction Passed
 Checked instruction "<result> = mul i32 4, %var"
Mul Instruction Passed
 Checked instruction "<result> = or i32 15, 40"
Or Instruction Passed
 Checked instruction "%indvar = phi i32 [ 0, %LoopHeader ], [ %nextindvar, %Loop ]"
Phi Instruction Passed
 Checked instruction "%Y = ptrtoint i32* %x to i64"
Prtoint Instruction Passed
 Checked instruction "ret void"
Ret Instruction Passed
 Checked instruction "<result> = sdiv i32 4, %var"
Sdiv Instruction Passed
 Checked instruction "%X = select i1 1, i8 17, i8 42"
Select Instruction Passed
 Checked instruction "%X = sext i8 -1 to i16"
Sext Instruction Passed
 Checked instruction "<result> = shl i32 1, 32"
Shl Instruction Passed
 Checked instruction "%result = shufflevector < 4 x i32 > %v1, < 4 x i32 > %v2, < 8 x i32 > < i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7 >"
ShuffleVector Instruction Passed
 Checked instruction "%X = sitofp i32 257 to float"
Sitofp Instruction Passed
 Checked instruction "<result> = srem i32 4, %var"
Srem Instruction Passed
 Checked instruction "store i32 3, i32* %ptr"
Store Instruction Passed
 Checked instruction "<result> = sub i32 4, %var"
Sub Instruction Passed
 Checked instruction "switch i32 %val, label %otherwise [ i32 0, label %onzero i32 1, label %onone i32 2, label %ontwo ]"
Switch Instruction Passed
 Checked instruction "%Y = trunc i32 123 to i1"
Trunc Instruction Passed
 Checked instruction "<result> = udiv i32 4, %var"
Udiv Instruction Passed
 Checked instruction "%Y = uitofp i8 -1 to double"
Uitofp Instruction Passed
 Checked instruction "unreachable"
Unreachable Instruction Passed
 Checked instruction "unwind"
Unwind Instruction Passed
 Checked instruction "<result> = urem i32 4, %var"
Urem Instruction Passed
 Checked instruction "%tmp = va_arg i8** %ap, i32"
VarArg Instruction Passed
 Checked instruction "<result> = xor i32 -1, %V"
Xor Instruction Passed
 Checked instruction "%X = zext i32 257 to i64"
Zext Instruction Passed



INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestInstructions 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestFunctionCall
INFO     Test completed in 0.0821239948273 seconds
INFO      It produced the following output:
(0.004357) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(kernel)
(0.004391) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.004405) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.004569) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.004590) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.004647) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 2]
(0.004662) KernelPartitioningPass.cpp:729:    saved 72 bytes per thread
(0.004696) KernelPartitioningPass.cpp:568:    Spill region size is 16
(0.004721) KernelPartitioningPass.cpp:1111: Subkernel::create(kernel)
(0.004735) KernelPartitioningPass.cpp:1134: Subkernel::_create(kernel id: 1)
(0.004763) KernelPartitioningPass.cpp:1162: 
(0.004776) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.004797) KernelPartitioningPass.cpp:1173:  adding block $BB_2_0002
(0.004825) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_2_0002 -> $BB_2_0003
(0.004845) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_2_0002 -> $BB_2_0004
(0.004858) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_2_0002
(0.004876) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.004888) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_2_0002
(0.004900) KernelPartitioningPass.cpp:1285:   examined terminator
(0.004912) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.004925) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_2_0002 type: fallthrough
(0.004939) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.004951) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.004971) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.004985) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.004998) KernelPartitioningPass.cpp:1374:   $BB_2_0002
(0.005010) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.005036) KernelPartitioningPass.cpp:1111: Subkernel::create(kernel)
(0.005049) KernelPartitioningPass.cpp:1134: Subkernel::_create(kernel id: 2)
(0.005072) KernelPartitioningPass.cpp:1162: 
(0.005085) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.005098) KernelPartitioningPass.cpp:1173:  adding block $BB_2_0003
(0.005112) KernelPartitioningPass.cpp:1192:   this block exits
(0.005128) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_2_0003 -> exit
(0.005145) KernelPartitioningPass.cpp:1259:   adding EXTERNAL IN-Edge $BB_2_0002 -> $BB_2_0003 with entry ID 131073
(0.005159) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.005171) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.005184) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.005197) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.005210) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.005222) KernelPartitioningPass.cpp:1374:   $BB_2_0003
(0.005234) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.005256) KernelPartitioningPass.cpp:1111: Subkernel::create(kernel)
(0.005269) KernelPartitioningPass.cpp:1134: Subkernel::_create(kernel id: 3)
(0.005291) KernelPartitioningPass.cpp:1162: 
(0.005304) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.005324) KernelPartitioningPass.cpp:1173:  adding block $BB_2_0004
(0.005341) KernelPartitioningPass.cpp:1192:   this block exits
(0.005356) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_2_0004 -> exit
(0.005373) KernelPartitioningPass.cpp:1259:   adding EXTERNAL IN-Edge $BB_2_0002 -> $BB_2_0004 with entry ID 196609
(0.005388) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.005400) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.005413) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.005427) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.005467) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.005481) KernelPartitioningPass.cpp:1374:   $BB_2_0004
(0.005492) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.005515) KernelPartitioningPass.cpp:573:  Linking external edges
(0.005527) KernelPartitioningPass.cpp:575:    but first!
(0.005539) KernelPartitioningPass.cpp:581:    subkernel _subkernel_kernel_1 out edges: 
(0.005550) KernelPartitioningPass.cpp:588:      $BB_2_0002 -> $BB_2_0003
(0.005564) KernelPartitioningPass.cpp:588:      $BB_2_0002 -> $BB_2_0004
(0.005576) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.005587) KernelPartitioningPass.cpp:581:    subkernel _subkernel_kernel_2 out edges: 
(0.005599) KernelPartitioningPass.cpp:588:      $BB_2_0003 -> exit
(0.005610) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.005621) KernelPartitioningPass.cpp:599:      $BB_2_0002 -> $BB_2_0003
(0.005633) KernelPartitioningPass.cpp:581:    subkernel _subkernel_kernel_3 out edges: 
(0.005644) KernelPartitioningPass.cpp:588:      $BB_2_0004 -> exit
(0.005656) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.005667) KernelPartitioningPass.cpp:599:      $BB_2_0002 -> $BB_2_0004
(0.005678) KernelPartitioningPass.cpp:604:    now linking
(0.005690) KernelPartitioningPass.cpp:621:     same subkernel
(0.005701) KernelPartitioningPass.cpp:635:    linking $BB_2_0002_exit_handler_to_2_0003 to $BB_2_0003_entry_handler_from_2_0002 (entry 131073)
(0.005713) KernelPartitioningPass.cpp:621:     same subkernel
(0.005724) KernelPartitioningPass.cpp:635:    linking $BB_2_0002_exit_handler_to_2_0004 to $BB_2_0004_entry_handler_from_2_0002 (entry 196609)
(0.005737) KernelPartitioningPass.cpp:621:     same subkernel
(0.005748) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_2_0003 -> exit
(0.005759) KernelPartitioningPass.cpp:621:     same subkernel
(0.005770) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_2_0004 -> exit
(0.005850) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.005879) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.005895) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.005908) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_2_0002 -> $BB_2_0002_exit_handler_to_2_0003 (2 live values
(0.005936) KernelPartitioningPass.cpp:1731:       alive: 2 [type: s64, offset: 0]
(0.005963) KernelPartitioningPass.cpp:1731:       alive: 6 [type: s32, offset: 8]
(0.005983) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.005997) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_2_0002_exit_handler_to_2_0003
(0.006022) KernelPartitioningPass.cpp:1664:   adding $BB_2_0002 to frontierExitBlocks
(0.006043) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_2_0002 -> $BB_2_0002_exit_handler_to_2_0004 (2 live values
(0.006059) KernelPartitioningPass.cpp:1731:       alive: 2 [type: s64, offset: 0]
(0.006080) KernelPartitioningPass.cpp:1731:       alive: 6 [type: s32, offset: 8]
(0.006099) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 1
(0.006112) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_2_0002_exit_handler_to_2_0004
(0.006137) KernelPartitioningPass.cpp:1664:   adding $BB_2_0002 to frontierExitBlocks
(0.006153) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.006168) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.006180) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_2_0002
(0.006215) KernelPartitioningPass.cpp:1782:  block $BB_2_0002 (2 external edges) terminator: @%p7 bra $BB_2_0004
(0.006230) KernelPartitioningPass.cpp:1785:    branch
(0.006242) KernelPartitioningPass.cpp:1791:  1 external edge, modifying branch target to point to handler
(0.006255) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.006325) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalTestFunctionCall: ocelot/executive/implementation/DynamicTranslationCache.cpp:1028: void setupCallTargets(ir::PTXKernel&, const executive::DynamicTranslationCache&): Assertion `0 && "arbitrary function calls not yet supported"' failed.
Handlers()
(0.006362) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.006377) KernelPartitioningPass.cpp:1585:     IN-edge: $BB_2_0003_entry_handler_from_2_0002 -> $BB_2_0003 (2 live values
(0.006397) KernelPartitioningPass.cpp:1725:       skipping alive: 2 [type: s64]
(0.006411) KernelPartitioningPass.cpp:1725:       skipping alive: 6 [type: s32]
(0.006429) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.006442) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_2_0003 -> $BB_2_0003_thread_exit (0 live values
(0.006457) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.006470) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_2_0003_thread_exit
(0.006490) KernelPartitioningPass.cpp:1664:   adding $BB_2_0003 to frontierExitBlocks
(0.006504) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.006518) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.006530) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_2_0003
(0.006545) KernelPartitioningPass.cpp:1782:  block $BB_2_0003 (1 external edges) terminator: exit
(0.006558) KernelPartitioningPass.cpp:1810:    exit
(0.006571) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.006644) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.008214) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.008224) KernelPartitioningPass.cpp:1585:     IN-edge: $BB_2_0004_entry_handler_from_2_0002 -> $BB_2_0004 (2 live values
(0.008236) KernelPartitioningPass.cpp:1731:       alive: 2 [type: s64, offset: 0]
(0.008251) KernelPartitioningPass.cpp:1731:       alive: 6 [type: s32, offset: 8]
(0.008265) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.008274) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_2_0004 -> $BB_2_0004_thread_exit (0 live values
(0.008284) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.008293) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_2_0004_thread_exit
(0.008306) KernelPartitioningPass.cpp:1664:   adding $BB_2_0004 to frontierExitBlocks
(0.008316) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.008325) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.008334) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_2_0004
(0.008342) KernelPartitioningPass.cpp:1782:  block $BB_2_0004 (1 external edges) terminator: exit
(0.008351) KernelPartitioningPass.cpp:1810:    exit
(0.008359) KernelPartitioningPass.cpp:1825: end frontier exit blocks:

INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCudaSequence 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCudaTexture2D
INFO     Test completed in 0.0980761051178 seconds
INFO      It produced the following output:
(0.002780) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(_Z6kernelPfii)
(0.002805) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.002815) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.002940) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.002955) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.002995) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 0]
(0.003006) KernelPartitioningPass.cpp:729:    saved 160 bytes per thread
(0.003026) KernelPartitioningPass.cpp:568:    Spill region size is 0
(0.003045) KernelPartitioningPass.cpp:1111: Subkernel::create(_Z6kernelPfii)
(0.003054) KernelPartitioningPass.cpp:1134: Subkernel::_create(_Z6kernelPfii id: 1)
(0.003075) KernelPartitioningPass.cpp:1162: 
(0.003083) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.003102) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0002
(0.003119) KernelPartitioningPass.cpp:1192:   this block exits
(0.003134) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> exit
(0.003145) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_1_0002
(0.003160) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.003168) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_1_0002
(0.003176) KernelPartitioningPass.cpp:1285:   examined terminator
(0.003183) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.003192) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_1_0002 type: fallthrough
(0.003201) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.003209) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.003222) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.003232) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.003240) KernelPartitioningPass.cpp:1374:   $BB_1_0002
(0.003248) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.003267) KernelPartitioningPass.cpp:573:  Linking external edges
(0.003275) KernelPartitioningPass.cpp:575:    but first!
(0.003283) KernelPartitioningPass.cpp:581:    subkernel _subkernel__Z6kernelPfii_1 out edges: 
(0.003290) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> exit
(0.003300) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.003309) KernelPartitioningPass.cpp:604:    now linking
(0.003316) KernelPartitioningPass.cpp:621:     same subkernel
(0.003324) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0002 -> exit
(0.003391) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.003414) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.003425) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.003434) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_thread_exit (0 live values
(0.003453) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.003463) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_thread_exit
(0.003481) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.003495) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.003504) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.003513) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0002
(0.003528) KernelPartitioningPass.cpp:1782:  block $BB_1_0002 (1 external edges) terminator: exit
(0.003538) KernelPartitioningPass.cpp:1810:    exit
(0.003547) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
Pass/Fail : Pass

INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestPTXToLLVMTranslator -i ../tests/ptx 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestDeviceSwitching
INFO     Test completed in 0.111538887024 seconds
INFO      It produced the following output:
(0.003397) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(increment)
(0.003434) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.003448) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.003597) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.003621) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.003674) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 0]
(0.003689) KernelPartitioningPass.cpp:729:    saved 16 bytes per thread
(0.003719) KernelPartitioningPass.cpp:568:    Spill region size is 0
(0.003746) KernelPartitioningPass.cpp:1111: Subkernel::create(increment)
(0.003761) KernelPartitioningPass.cpp:1134: Subkernel::_create(increment id: 1)
(0.003788) KernelPartitioningPass.cpp:1162: 
(0.003801) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.003819) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0002
(0.003848) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> $BB_1_0003
(0.003865) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_1_0002
(0.003887) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.003900) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_1_0002
(0.003912) KernelPartitioningPass.cpp:1285:   examined terminator
(0.003923) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.003936) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_1_0002 type: fallthrough
(0.003951) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.003962) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.003981) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.003995) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.004007) KernelPartitioningPass.cpp:1374:   $BB_1_0002
(0.004020) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.004048) KernelPartitioningPass.cpp:1111: Subkernel::create(increment)
(0.004061) KernelPartitioningPass.cpp:1134: Subkernel::_create(increment id: 2)
(0.004082) KernelPartitioningPass.cpp:1162: 
(0.004094) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.004107) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0003
(0.004121) KernelPartitioningPass.cpp:1192:   this block exits
(0.004136) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0003 -> exit
(0.004153) KernelPartitioningPass.cpp:1259:   adding EXTERNAL IN-Edge $BB_1_0002 -> $BB_1_0003 with entry ID 131073
(0.004166) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.004178) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.004190) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.004204) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.004216) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.004228) KernelPartitioningPass.cpp:1374:   $BB_1_0003
(0.004240) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.004262) KernelPartitioningPass.cpp:573:  Linking external edges
(0.004274) KernelPartitioningPass.cpp:575:    but first!
(0.004285) KernelPartitioningPass.cpp:581:    subkernel _subkernel_increment_1 out edges: 
(0.004296) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> $BB_1_0003
(0.004308) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.004319) KernelPartitioningPass.cpp:581:    subkernel _subkernel_increment_2 out edges: 
(0.004330) KernelPartitioningPass.cpp:588:      $BB_1_0003 -> exit
(0.004341) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.004352) KernelPartitioningPass.cpp:599:      $BB_1_0002 -> $BB_1_0003
(0.004364) KernelPartitioningPass.cpp:604:    now linking
(0.004375) KernelPartitioningPass.cpp:621:     same subkernel
(0.004386) KernelPartitioningPass.cpp:635:    linking $BB_1_0002_exit_handler_to_1_0003 to $BB_1_0003_entry_handler_from_1_0002 (entry 131073)
(0.004399) KernelPartitioningPass.cpp:621:     same subkernel
(0.004458) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0003 -> exit
(0.004521) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.004547) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.004563) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.004577) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_exit_handler_to_1_0003 (0 live values
(0.004605) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.004621) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_exit_handler_to_1_0003
(0.004649) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.004670) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.004684) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.004697) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0002
(0.004745) KernelPartitioningPass.cpp:1782:  block $BB_1_0002 (1 external edges) terminator: st.global.u32 [%r0], %r2
(0.004769) KernelPartitioningPass.cpp:1821:  fall-through non-control-flow instruction to external edge: st.global.u32 [%r0], %r2
(0.004782) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.004845) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.004864) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.004876) KernelPartitioningPass.cpp:1585:     IN-edge: $BB_1_0003_entry_handler_from_1_0002 -> $BB_1_0003 (0 live values
(0.004901) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.004915) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0003 -> $BB_1_0003_thread_exit (0 live values
(0.004930) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.004942) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0003_thread_exit
(0.004962) KernelPartitioningPass.cpp:1664:   adding $BB_1_0003 to frontierExitBlocks
(0.004977) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.004990) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.005003) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0003
(0.005018) KernelPartitioningPass.cpp:1782:  block $BB_1_0003 (1 external edges) terminator: exit
(0.005032) KernelPartitioningPass.cpp:1810:    exit
(0.005044) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.021933) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(increment)
(0.021955) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.021964) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.022036) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.022048) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.022071) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 0]
(0.022081) KernelPartitioningPass.cpp:729:    saved 16 bytes per thread
(0.022100) KernelPartitioningPass.cpp:568:    Spill region size is 0
(0.022112) KernelPartitioningPass.cpp:1111: Subkernel::create(increment)
(0.022121) KernelPartitioningPass.cpp:1134: Subkernel::_create(increment id: 1)
(0.022138) KernelPartitioningPass.cpp:1162: 
(0.022146) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.022157) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0002
(0.022175) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> $BB_1_0003
(0.022185) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_1_0002
(0.022197) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.022205) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_1_0002
(0.022213) KernelPartitioningPass.cpp:1285:   examined terminator
(0.022222) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.022230) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_1_0002 type: fallthrough
(0.022241) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.022303) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.022315) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.022324) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.022333) KernelPartitioningPass.cpp:1374:   $BB_1_0002
(0.022342) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.022361) KernelPartitioningPass.cpp:1111: Subkernel::create(increment)
(0.022370) KernelPartitioningPass.cpp:1134: Subkernel::_create(increment id: 2)
(0.022385) KernelPartitioningPass.cpp:1162: 
(0.022393) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.022402) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0003
(0.022412) KernelPartitioningPass.cpp:1192:   this block exits
(0.022423) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0003 -> exit
(0.022435) KernelPartitioningPass.cpp:1259:   adding EXTERNAL IN-Edge $BB_1_0002 -> $BB_1_0003 with entry ID 131073
(0.022444) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.022452) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.022461) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.022470) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.022479) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.022487) KernelPartitioningPass.cpp:1374:   $BB_1_0003
(0.022496) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.022510) KernelPartitioningPass.cpp:573:  Linking external edges
(0.022519) KernelPartitioningPass.cpp:575:    but first!
(0.022527) KernelPartitioningPass.cpp:581:    subkernel _subkernel_increment_1 out edges: 
(0.022535) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> $BB_1_0003
(0.022543) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.022552) KernelPartitioningPass.cpp:581:    subkernel _subkernel_increment_2 out edges: 
(0.022559) KernelPartitioningPass.cpp:588:      $BB_1_0003 -> exit
(0.022567) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.022575) KernelPartitioningPass.cpp:599:      $BB_1_0002 -> $BB_1_0003
(0.022583) KernelPartitioningPass.cpp:604:    now linking
(0.022591) KernelPartitioningPass.cpp:621:     same subkernel
(0.022599) KernelPartitioningPass.cpp:635:    linking $BB_1_0002_exit_handler_to_1_0003 to $BB_1_0003_entry_handler_from_1_0002 (entry 131073)
(0.022608) KernelPartitioningPass.cpp:621:     same subkernel
(0.022615) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0003 -> exit
(0.022660) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.022675) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.022685) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.022695) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_exit_handler_to_1_0003 (0 live values
(0.022710) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.022719) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_exit_handler_to_1_0003
(0.022742) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.022754) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.022764) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.022773) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0002
(0.022793) KernelPartitioningPass.cpp:1782:  block $BB_1_0002 (1 external edges) terminator: st.global.u32 [%r0], %r2
(0.022809) KernelPartitioningPass.cpp:1821:  fall-through non-control-flow instruction to external edge: st.global.u32 [%r0], %r2
(0.022818) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.022860) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.022873) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.022882) KernelPartitioningPass.cpp:1585:     IN-edge: $BB_1_0003_entry_handler_from_1_0002 -> $BB_1_0003 (0 live values
(0.022926) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.022937) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0003 -> $BB_1_0003_thread_exit (0 live values
(0.022948) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.022956) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0003_thread_exit
(0.022971) KernelPartitioningPass.cpp:1664:   adding $BB_1_0003 to frontierExitBlocks
(0.022981) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.022991) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.022999) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0003
(0.023008) KernelPartitioningPass.cpp:1782:  block $BB_1_0003 (1 external edges) terminator: exit
(0.023017) KernelPartitioningPass.cpp:1810:    exit
(0.023026) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.024693) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(increment)
(0.024709) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.024719) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.024781) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.024792) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.024813) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 0]
(0.024823) KernelPartitioningPass.cpp:729:    saved 16 bytes per thread
(0.024842) KernelPartitioningPass.cpp:568:    Spill region size is 0
(0.024854) KernelPartitioningPass.cpp:1111: Subkernel::create(increment)
(0.024863) KernelPartitioningPass.cpp:1134: Subkernel::_create(increment id: 1)
(0.024879) KernelPartitioningPass.cpp:1162: 
(0.024888) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.024899) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0002
(0.024915) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> $BB_1_0003
(0.024925) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_1_0002
(0.024936) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.024944) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_1_0002
(0.024952) KernelPartitioningPass.cpp:1285:   examined terminator
(0.024961) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.024969) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_1_0002 type: fallthrough
(0.024979) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.024987) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.024997) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.025007) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.025016) KernelPartitioningPass.cpp:1374:   $BB_1_0002
(0.025025) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.025044) KernelPartitioningPass.cpp:1111: Subkernel::create(increment)
(0.025053) KernelPartitioningPass.cpp:1134: Subkernel::_create(increment id: 2)
(0.025068) KernelPartitioningPass.cpp:1162: 
(0.025076) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.025085) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0003
(0.025095) KernelPartitioningPass.cpp:1192:   this block exits
(0.025106) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0003 -> exit
(0.025117) KernelPartitioningPass.cpp:1259:   adding EXTERNAL IN-Edge $BB_1_0002 -> $BB_1_0003 with entry ID 131073
(0.025127) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.025134) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.025143) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.025152) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.025161) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.025169) KernelPartitioningPass.cpp:1374:   $BB_1_0003
(0.025178) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.025243) KernelPartitioningPass.cpp:573:  Linking external edges
(0.025252) KernelPartitioningPass.cpp:575:    but first!
(0.025260) KernelPartitioningPass.cpp:581:    subkernel _subkernel_increment_1 out edges: 
(0.025269) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> $BB_1_0003
(0.025277) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.025285) KernelPartitioningPass.cpp:581:    subkernel _subkernel_increment_2 out edges: 
(0.025294) KernelPartitioningPass.cpp:588:      $BB_1_0003 -> exit
(0.025302) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.025310) KernelPartitioningPass.cpp:599:      $BB_1_0002 -> $BB_1_0003
(0.025318) KernelPartitioningPass.cpp:604:    now linking
(0.025326) KernelPartitioningPass.cpp:621:     same subkernel
(0.025335) KernelPartitioningPass.cpp:635:    linking $BB_1_0002_exit_handler_to_1_0003 to $BB_1_0003_entry_handler_from_1_0002 (entry 131073)
(0.025344) KernelPartitioningPass.cpp:621:     same subkernel
(0.025352) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0003 -> exit
(0.025398) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.025414) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.025423) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.025432) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_exit_handler_to_1_0003 (0 live values
(0.025447) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.025457) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_exit_handler_to_1_0003
(0.025477) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.025489) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.025498) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.025507) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0002
(0.025537) KernelPartitioningPass.cpp:1782:  block $BB_1_0002 (1 external edges) terminator: st.global.u32 [%r0], %r2
(0.025553) KernelPartitioningPass.cpp:1821:  fall-through non-control-flow instruction to external edge: st.global.u32 [%r0], %r2
(0.025562) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.025603) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.025616) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.025625) KernelPartitioningPass.cpp:1585:     IN-edge: $BB_1_0003_entry_handler_from_1_0002 -> $BB_1_0003 (0 live values
(0.025640) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.025650) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0003 -> $BB_1_0003_thread_exit (0 live values
(0.025661) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.025669) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0003_thread_exit
(0.025684) KernelPartitioningPass.cpp:1664:   adding $BB_1_0003 to frontierExitBlocks
(0.025694) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.025703) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.025712) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0003
(0.025720) KernelPartitioningPass.cpp:1782:  block $BB_1_0003 (1 external edges) terminator: exit
(0.025729) KernelPartitioningPass.cpp:1810:    exit
(0.025738) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
Pass/Fail : Pass


Name : TestDeviceSwitching

Description: A unit test for the ability of the CUDA runtime to switch 
             between devices and use multiple threads Test Points: 1) In a single 
             threaded application, iterate across all devices launching the same 
             simple kernel each time 2) Test context migration support in 
             ocelot. Iterate across all devices, launching a simple kernel that 
             updates shared variable. Use the context switch mechanism to 
             migrate the shared data. 3) Test multi-threading support. Launch one 
             host thread to allocate memory, pass pointers to worker 
             threads, each of which should launch independent kernels in 
             parallel.


Test Seed : 1336584815
Test time : 0.0251904

Status : Test Point 1 Passed
Test Point 2 Passed
Test Point 3 Passed



INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestLexer -i ../tests/ptx 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestInstructions
INFO     Test completed in 0.0665261745453 seconds
INFO      It produced the following output:
Pass/Fail : Pass


Name : TestInstructions

Description: 


Test Seed : 1336584815
Test time : 0.000887632

Status : Test output:
Accessors test passed.
pass: load and store instructions
Abs test passed.
pass: arithmetic instructions
pass: exotic arithmetic instructions
pass: floating-point instructions
pass: logical instructions
pass: comparison instructions
pass: predicated Add and Ld isntructions



INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestIndirectFunctionCall 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestPTXToLLVMTranslator
INFO     Test completed in 0.0628850460052 seconds
INFO      It produced the following output:
Pass/Fail : Pass


Name : TestPTXToLLVMTranslator

Description: This is a basic test that just tries to get through a 
             translation successfully of as many PTX programs as possible Test 
             Points: 1) Scan for all PTX files in a directory, try to 
             translate them.


Test Seed : 1336584815
Test time : 2.0504e-05

Status : 


INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCudaTextureArray 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestLexer
INFO     Test completed in 0.0733249187469 seconds
INFO      It produced the following output:
Pass/Fail : Pass


Name : TestLexer

Description: Tests for the PTX lexer. Test Point 1: Scan a PTX file and 
             write out a temp stream, scan the stream again and make sure that the 
             two sets of tokens match


Test Seed : 1336584815
Test time : 2.31266e-05

Status : 


INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestKernels 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCudaSequence
INFO     Test completed in 0.121432065964 seconds
INFO      It produced the following output:
sequence() - A_gpu = 0x7f5818002100
(0.005241) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(sequence)
(0.005270) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.005279) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.005418) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.005433) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.005483) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 2]
(0.005493) KernelPartitioningPass.cpp:729:    saved 64 bytes per thread
(0.005519) KernelPartitioningPass.cpp:568:    Spill region size is 16
(0.005542) KernelPartitioningPass.cpp:1111: Subkernel::create(sequence)
(0.005552) KernelPartitioningPass.cpp:1134: Subkernel::_create(sequence id: 1)
(0.005575) KernelPartitioningPass.cpp:1162: 
(0.005584) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.005602) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0002
(0.005629) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> $BB_1_0003
(0.005643) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> $BB_1_0004
(0.005653) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_1_0002
(0.005668) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.005677) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_1_0002
(0.005685) KernelPartitioningPass.cpp:1285:   examined terminator
(0.005692) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.005702) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_1_0002 type: fallthrough
(0.005712) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.005720) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.005734) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.005744) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.005753) KernelPartitioningPass.cpp:1374:   $BB_1_0002
(0.005762) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.005784) KernelPartitioningPass.cpp:1111: Subkernel::create(sequence)
(0.005792) KernelPartitioningPass.cpp:1134: Subkernel::_create(sequence id: 2)
(0.005808) KernelPartitioningPass.cpp:1162: 
(0.005817) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.005826) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0003
(0.005835) KernelPartitioningPass.cpp:1192:   this block exits
(0.005845) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0003 -> exit
(0.005857) KernelPartitioningPass.cpp:1259:   adding EXTERNAL IN-Edge $BB_1_0002 -> $BB_1_0003 with entry ID 131073
(0.005866) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.005874) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.005883) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.005892) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.005900) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.005909) KernelPartitioningPass.cpp:1374:   $BB_1_0003
(0.005917) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.005931) KernelPartitioningPass.cpp:1111: Subkernel::create(sequence)
(0.005940) KernelPartitioningPass.cpp:1134: Subkernel::_create(sequence id: 3)
(0.005955) KernelPartitioningPass.cpp:1162: 
(0.005963) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.005975) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0004
(0.005985) KernelPartitioningPass.cpp:1192:   this block exits
(0.005996) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0004 -> exit
(0.006006) KernelPartitioningPass.cpp:1259:   adding EXTERNAL IN-Edge $BB_1_0002 -> $BB_1_0004 with entry ID 196609
(0.006016) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.006024) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.006032) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.006096) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.006106) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.006114) KernelPartitioningPass.cpp:1374:   $BB_1_0004
(0.006122) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.006137) KernelPartitioningPass.cpp:573:  Linking external edges
(0.006145) KernelPartitioningPass.cpp:575:    but first!
(0.006153) KernelPartitioningPass.cpp:581:    subkernel _subkernel_sequence_1 out edges: 
(0.006160) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> $BB_1_0003
(0.006170) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> $BB_1_0004
(0.006178) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.006186) KernelPartitioningPass.cpp:581:    subkernel _subkernel_sequence_2 out edges: 
(0.006194) KernelPartitioningPass.cpp:588:      $BB_1_0003 -> exit
(0.006201) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.006209) KernelPartitioningPass.cpp:599:      $BB_1_0002 -> $BB_1_0003
(0.006216) KernelPartitioningPass.cpp:581:    subkernel _subkernel_sequence_3 out edges: 
(0.006223) KernelPartitioningPass.cpp:588:      $BB_1_0004 -> exit
(0.006231) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.006239) KernelPartitioningPass.cpp:599:      $BB_1_0002 -> $BB_1_0004
(0.006246) KernelPartitioningPass.cpp:604:    now linking
(0.006253) KernelPartitioningPass.cpp:621:     same subkernel
(0.006261) KernelPartitioningPass.cpp:635:    linking $BB_1_0002_exit_handler_to_1_0003 to $BB_1_0003_entry_handler_from_1_0002 (entry 131073)
(0.006269) KernelPartitioningPass.cpp:621:     same subkernel
(0.006277) KernelPartitioningPass.cpp:635:    linking $BB_1_0002_exit_handler_to_1_0004 to $BB_1_0004_entry_handler_from_1_0002 (entry 196609)
(0.006284) KernelPartitioningPass.cpp:621:     same subkernel
(0.006292) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0003 -> exit
(0.006299) KernelPartitioningPass.cpp:621:     same subkernel
(0.006307) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0004 -> exit
(0.006362) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.006383) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.006395) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.006404) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_exit_handler_to_1_0003 (2 live values
(0.006428) KernelPartitioningPass.cpp:1731:       alive: 2 [type: s64, offset: 0]
(0.006449) KernelPartitioningPass.cpp:1731:       alive: 6 [type: s32, offset: 8]
(0.006462) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.006472) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_exit_handler_to_1_0003
(0.006490) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.006505) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_exit_handler_to_1_0004 (2 live values
(0.006516) KernelPartitioningPass.cpp:1731:       alive: 2 [type: s64, offset: 0]
(0.006529) KernelPartitioningPass.cpp:1731:       alive: 6 [type: s32, offset: 8]
(0.006542) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 1
(0.006551) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_exit_handler_to_1_0004
(0.006567) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.006579) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.006589) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.006598) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0002
(0.006626) KernelPartitioningPass.cpp:1782:  block $BB_1_0002 (2 external edges) terminator: @%p7 bra $BB_1_0004
(0.006636) KernelPartitioningPass.cpp:1785:    branch
(0.006644) KernelPartitioningPass.cpp:1791:  1 external edge, modifying branch target to point to handler
(0.006654) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.006702) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.006728) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.006737) KernelPartitioningPass.cpp:1585:     IN-edge: $BB_1_0003_entry_handler_from_1_0002 -> $BB_1_0003 (2 live values
(0.006753) KernelPartitioningPass.cpp:1725:       skipping alive: 2 [type: s64]
(0.006764) KernelPartitioningPass.cpp:1725:       skipping alive: 6 [type: s32]
(0.006777) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.006786) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0003 -> $BB_1_0003_thread_exit (0 live values
(0.006797) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.006806) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0003_thread_exit
(0.006819) KernelPartitioningPass.cpp:1664:   adding $BB_1_0003 to frontierExitBlocks
(0.006830) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.006840) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.006848) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0003
(0.006860) KernelPartitioningPass.cpp:1782:  block $BB_1_0003 (1 external edges) terminator: exit
(0.006869) KernelPartitioningPass.cpp:1810:    exit
(0.006878) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.006924) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.006938) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.006947) KernelPartitioningPass.cpp:1585:     IN-edge: $BB_1_0004_entry_handler_from_1_0002 -> $BB_1_0004 (2 live values
(0.006959) KernelPartitioningPass.cpp:1731:       alive: 2 [type: s64, offset: 0]
(0.006973) KernelPartitioningPass.cpp:1731:       alive: 6 [type: s32, offset: 8]
(0.006988) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.006998) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0004 -> $BB_1_0004_thread_exit (0 live values
(0.007008) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.007016) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0004_thread_exit
(0.007030) KernelPartitioningPass.cpp:1664:   adding $BB_1_0004 to frontierExitBlocks
(0.007041) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.007050) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.007059) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0004
(0.007067) KernelPartitioningPass.cpp:1782:  block $BB_1_0004 (1 external edges) terminator: exit
(0.007076) KernelPartitioningPass.cpp:1810:    exit
(0.007084) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.029054) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(testShr)
(0.029083) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.029094) KernelPartitioningPass.cpp:131:    barrier in block $BB_4_0002(instruction 11)
(0.029126) KernelPartitioningPass.cpp:148:    encountered 1 barriers
(0.029239) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.029249) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.029282) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 3]
(0.029291) KernelPartitioningPass.cpp:729:    saved 136 bytes per thread
(0.029317) KernelPartitioningPass.cpp:568:    Spill region size is 24
(0.029329) KernelPartitioningPass.cpp:1111: Subkernel::create(testShr)
(0.029338) KernelPartitioningPass.cpp:1134: Subkernel::_create(testShr id: 4)
(0.029359) KernelPartitioningPass.cpp:1162: 
(0.029368) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.029390) KernelPartitioningPass.cpp:1173:  adding block $BB_4_0002
(0.029408) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_4_0002 -> $BB_4_0002_bar
(0.029417) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_4_0002
(0.029429) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.029438) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_4_0002
(0.029446) KernelPartitioningPass.cpp:1285:   examined terminator
(0.029484) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.029494) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_4_0002 type: fallthrough
(0.029504) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.029512) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.029522) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.029532) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.029541) KernelPartitioningPass.cpp:1374:   $BB_4_0002
(0.029549) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.029567) KernelPartitioningPass.cpp:1111: Subkernel::create(testShr)
(0.029576) KernelPartitioningPass.cpp:1134: Subkernel::_create(testShr id: 5)
(0.029592) KernelPartitioningPass.cpp:1162: 
(0.029601) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.029621) KernelPartitioningPass.cpp:1173:  adding block $BB_4_0002_bar
(0.029634) KernelPartitioningPass.cpp:1192:   this block exits
(0.029645) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_4_0002_bar -> exit
(0.029657) KernelPartitioningPass.cpp:1259:   adding EXTERNAL IN-Edge $BB_4_0002 -> $BB_4_0002_bar with entry ID 327681
(0.029666) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.029674) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.029683) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.029692) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.029701) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.029709) KernelPartitioningPass.cpp:1374:   $BB_4_0002_bar
(0.029717) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.029732) KernelPartitioningPass.cpp:573:  Linking external edges
(0.029740) KernelPartitioningPass.cpp:575:    but first!
(0.029747) KernelPartitioningPass.cpp:581:    subkernel _subkernel_testShr_4 out edges: 
(0.029755) KernelPartitioningPass.cpp:588:      $BB_4_0002 -> $BB_4_0002_bar
(0.029763) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.029771) KernelPartitioningPass.cpp:581:    subkernel _subkernel_testShr_5 out edges: 
(0.029778) KernelPartitioningPass.cpp:588:      $BB_4_0002_bar -> exit
(0.029787) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.029794) KernelPartitioningPass.cpp:599:      $BB_4_0002 -> $BB_4_0002_bar
(0.029802) KernelPartitioningPass.cpp:604:    now linking
(0.029809) KernelPartitioningPass.cpp:621:     same subkernel
(0.029817) KernelPartitioningPass.cpp:635:    linking $BB_4_0002_exit_handler_to_4_0002_bar to $BB_4_0002_bar_entry_handler_from_4_0002 (entry 327681)
(0.029826) KernelPartitioningPass.cpp:621:     same subkernel
(0.029833) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_4_0002_bar -> exit
(0.029896) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.029913) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.029922) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.029931) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_4_0002 -> $BB_4_0002_exit_handler_to_4_0002_bar (3 live values
(0.029947) KernelPartitioningPass.cpp:1731:       alive: 1 [type: s64, offset: 0]
(0.029964) KernelPartitioningPass.cpp:1731:       alive: 5 [type: s32, offset: 8]
(0.029977) KernelPartitioningPass.cpp:1731:       alive: 8 [type: s64, offset: 16]
(0.029990) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.030000) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_4_0002_exit_handler_to_4_0002_bar
(0.030018) KernelPartitioningPass.cpp:1664:   adding $BB_4_0002 to frontierExitBlocks
(0.030030) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.030040) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.030049) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_4_0002
(0.030098) KernelPartitioningPass.cpp:1782:  block $BB_4_0002 (1 external edges) terminator: bar.sync 0
(0.030108) KernelPartitioningPass.cpp:1800:    barrier
(0.030117) KernelPartitioningPass.cpp:1801:     block: $BB_4_0002
(0.030128) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.030199) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.030221) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.030231) KernelPartitioningPass.cpp:1585:     IN-edge: $BB_4_0002_bar_entry_handler_from_4_0002 -> $BB_4_0002_bar (3 live values
(0.030243) KernelPartitioningPass.cpp:1731:       alive: 1 [type: s64, offset: 0]
(0.030259) KernelPartitioningPass.cpp:1731:       alive: 5 [type: s32, offset: 8]
(0.030272) KernelPartitioningPass.cpp:1731:       alive: 8 [type: s64, offset: 16]
(0.030288) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.030298) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_4_0002_bar -> $BB_4_0002_bar_thread_exit (0 live values
(0.030309) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.030318) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_4_0002_bar_thread_exit
(0.030332) KernelPartitioningPass.cpp:1664:   adding $BB_4_0002_bar to frontierExitBlocks
(0.030343) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.030353) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.030361) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_4_0002_bar
(0.030370) KernelPartitioningPass.cpp:1782:  block $BB_4_0002_bar (1 external edges) terminator: exit
(0.030379) KernelPartitioningPass.cpp:1810:    exit
(0.030388) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
Pass/Fail : Pass

INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestIndirectFunctionCall
INFO     Test completed in 0.0697870254517 seconds
INFO      It produced the following output:
(0.005012) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(kernelEntry)
(0.005081) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.005092) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.005341) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.005361) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.005442) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 4]
(0.005454) KernelPartitioningPass.cpp:729:    saved 88 bytes per thread
(0.005490) KernelPartitioningPass.cpp:568:    Spill region size is 32
(0.005513) KernelPartitioningPass.cpp:1111: Subkernel::create(kernelEntry)
(0.005523) KernelPartitioningPass.cpp:1134: Subkernel::_create(kernelEntry id: 1)
(0.005549) KernelPartitioningPass.cpp:1162: 
(0.005558) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.005577) KernelPartitioningPass.cpp:1173:  adding block $BB_5_0002
(0.005603) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_5_0002 -> $BB_5_0003
(0.005617) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_5_0002 -> $BB_5_0008
(0.005626) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_5_0002
(0.005643) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.005651) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_5_0002
(0.005659) KernelPartitioningPass.cpp:1285:   examined terminator
(0.005667) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.005677) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_5_0002 type: fallthrough
(0.005687) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.005695) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.005711) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.005721) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.005731) KernelPartitioningPass.cpp:1374:   $BB_5_0002
(0.005740) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.005763) KernelPartitioningPass.cpp:1111: Subkernel::create(kernelEntry)
(0.005773) KernelPartitioningPass.cpp:1134: Subkernel::_create(kernelEntry id: 2)
(0.005789) KernelPartitioningPass.cpp:1162: 
(0.005798) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.005809) KernelPartitioningPass.cpp:1173:  adding block $BB_5_0003
(0.005821) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_5_0003 -> $BB_5_0004
(0.005833) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_5_0003 -> $BB_5_0007
(0.005845) KernelPartitioningPass.cpp:1259:   adding EXTERNAL IN-Edge $BB_5_0002 -> $BB_5_0003 with entry ID 131073
(0.005855) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.005863) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.005872) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.005883) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.005893) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.005902) KernelPartitioningPass.cpp:1374:   $BB_5_0003
(0.005910) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.005926) KernelPartitioningPass.cpp:1111: Subkernel::create(kernelEntry)
(0.005934) KernelPartitioningPass.cpp:1134: Subkernel::_create(kernelEntry id: 3)
(0.005950) KernelPartitioningPass.cpp:1162: 
(0.005959) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.005969) KernelPartitioningPass.cpp:1173:  adding block $BB_5_0004
(0.005982) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_5_0004 -> $BB_5_0005
(0.005993) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_5_0004 -> $BB_5_0006
(0.006004) KernelPartitioningPass.cpp:1259:   adding EXTERNAL IN-Edge $BB_5_0003 -> $BB_5_0004 with entry ID 196609
(0.006014) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.006022) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.006031) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.006105) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.006116) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.006125) KernelPartitioningPass.cpp:1374:   $BB_5_0004
(0.006133) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.006149) KernelPartitioningPass.cpp:1111: Subkernel::create(kernelEntry)
(0.006184) KernelPartitioningPass.cpp:1134: Subkernel::_create(kernelEntry id: 4)
(0.006201) KernelPartitioningPass.cpp:1162: 
(0.006210) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.006222) KernelPartitioningPass.cpp:1173:  adding block $BB_5_0005
(0.006235) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_5_0005 -> $BB_5_0009
(0.006246) KernelPartitioningPass.cpp:1259:   adding EXTERNAL IN-Edge $BB_5_0004 -> $BB_5_0005 with entry ID 262145
(0.006256) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.006264) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.006273) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.006282) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.006291) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.006300) KernelPartitioningPass.cpp:1374:   $BB_5_0005
(0.006308) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.006323) KernelPartitioningPass.cpp:1111: Subkernel::create(kernelEntry)
(0.006332) KernelPartitioningPass.cpp:1134: Subkernel::_create(kernelEntry id: 5)
(0.006348) KernelPartitioningPass.cpp:1162: 
(0.006356) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.006367) KernelPartitioningPass.cpp:1173:  adding block $BB_5_0006
(0.006379) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_5_0006 -> $BB_5_0009
(0.006391) KernelPartitioningPass.cpp:1259:   adding EXTERNAL IN-Edge $BB_5_0004 -> $BB_5_0006 with entry ID 327681
(0.006401) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.006409) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.006418) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.006428) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.006437) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.006445) KernelPartitioningPass.cpp:1374:   $BB_5_0006
(0.006454) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.006469) KernelPartitioningPass.cpp:1111: Subkernel::create(kernelEntry)
(0.006478) KernelPartitioningPass.cpp:1134: Subkernel::_create(kernelEntry id: 6)
(0.006494) KernelPartitioningPass.cpp:1162: 
(0.006503) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.006513) KernelPartitioningPass.cpp:1173:  adding block $BB_5_0007
(0.006525) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_5_0007 -> $BB_5_0009
(0.006537) KernelPartitioningPass.cpp:1259:   adding EXTERNAL IN-Edge $BB_5_0003 -> $BB_5_0007 with entry ID 393217
(0.006547) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.006555) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.006565) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.006574) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.006583) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.006592) KernelPartitioningPass.cpp:1374:   $BB_5_0007
(0.006600) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.006615) KernelPartitioningPass.cpp:1111: Subkernel::create(kernelEntry)
(0.006624) KernelPartitioningPass.cpp:1134: Subkernel::_create(kernelEntry id: 7)
(0.006639) KernelPartitioningPass.cpp:1162: 
(0.006648) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.006657) KernelPartitioningPass.cpp:1173:  adding block $BB_5_0008
(0.006670) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_5_0008 -> $BB_5_0009
(0.006682) KernelPartitioningPass.cpp:1259:   adding EXTERNAL IN-Edge $BB_5_0002 -> $BB_5_0008 with entry ID 458753
(0.006719) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.006728) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.006738) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.006747) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.006757) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.006765) KernelPartitioningPass.cpp:1374:   $BB_5_0008
(0.006774) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.006789) KernelPartitioningPass.cpp:1111: Subkernel::create(kernelEntry)
(0.006798) KernelPartitioningPass.cpp:1134: Subkernel::_create(kernelEntry id: 8)
(0.006814) KernelPartitioningPass.cpp:1162: 
(0.006823) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.006840) KernelPartitioningPass.cpp:1173:  adding block $BB_5_0009
(0.006852) KernelPartitioningPass.cpp:1192:   this block exits
(0.006863) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_5_0009 -> exit
(0.006874) KernelPartitioningPass.cpp:1259:   adding EXTERNAL IN-Edge $BB_5_0008 -> $BB_5_0009 with entry ID 524289
(0.006886) KernelPartitioningPass.cpp:1259:   adding EXTERNAL IN-Edge $BB_5_0005 -> $BB_5_0009 with entry ID 524290
(0.006898) KernelPartitioningPass.cpp:1259:   adding EXTERNAL IN-Edge $BB_5_0006 -> $BB_5_0009 with entry ID 524291
(0.006909) KernelPartitioningPass.cpp:1259:   adding EXTERNAL IN-Edge $BB_5_0007 -> $BB_5_0009 with entry ID 524292
(0.006918) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.006926) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.006937) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.006947) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.006956) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.006964) KernelPartitioningPass.cpp:1374:   $BB_5_0009
(0.006973) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.006993) KernelPartitioningPass.cpp:573:  Linking external edges
(0.007002) KernelPartitioningPass.cpp:575:    but first!
(0.007010) KernelPartitioningPass.cpp:581:    subkernel _subkernel_kernelEntry_1 out edges: 
(0.007018) KernelPartitioningPass.cpp:588:      $BB_5_0002 -> $BB_5_0003
(0.007030) KernelPartitioningPass.cpp:588:      $BB_5_0002 -> $BB_5_0008
(0.007039) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.007047) KernelPartitioningPass.cpp:581:    subkernel _subkernel_kernelEntry_2 out edges: 
(0.007056) KernelPartitioningPass.cpp:588:      $BB_5_0003 -> $BB_5_0004
(0.007063) KernelPartitioningPass.cpp:588:      $BB_5_0003 -> $BB_5_0007
(0.007071) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.007079) KernelPartitioningPass.cpp:599:      $BB_5_0002 -> $BB_5_0003
(0.007087) KernelPartitioningPass.cpp:581:    subkernel _subkernel_kernelEntry_3 out edges: 
(0.007095) KernelPartitioningPass.cpp:588:      $BB_5_0004 -> $BB_5_0005
(0.007103) KernelPartitioningPass.cpp:588:      $BB_5_0004 -> $BB_5_0006
(0.007111) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.007118) KernelPartitioningPass.cpp:599:      $BB_5_0003 -> $BB_5_0004
(0.007127) KernelPartitioningPass.cpp:581:    subkernel _subkernel_kernelEntry_4 out edges: 
(0.007135) KernelPartitioningPass.cpp:588:      $BB_5_0005 -> $BB_5_0009
(0.007143) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.007150) KernelPartitioningPass.cpp:599:      $BB_5_0004 -> $BB_5_0005
(0.007158) KernelPartitioningPass.cpp:581:    subkernel _subkernel_kernelEntry_5 out edges: 
(0.007166) KernelPartitioningPass.cpp:588:      $BB_5_0006 -> $BB_5_0009
(0.007174) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.007182) KernelPartitioningPass.cpp:599:      $BB_5_0004 -> $BB_5_0006
(0.007190) KernelPartitioningPass.cpp:581:    subkernel _subkernel_kernelEntry_6 out edges: 
(0.007198) KernelPartitioningPass.cpp:588:      $BB_5_0007 -> $BB_5_0009
(0.007226) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.007235) KernelPartitioningPass.cpp:599:      $BB_5_0003 -> $BB_5_0007
(0.007243) KernelPartitioningPass.cpp:581:    subkernel _subkernel_kernelEntry_7 out edges: 
(0.007251) KernelPartitioningPass.cpp:588:      $BB_5_0008 -> $BB_5_0009
(0.007259) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.007267) KernelPartitioningPass.cpp:599:      $BB_5_0002 -> $BB_5_0008
(0.007275) KernelPartitioningPass.cpp:581:    subkernel _subkernel_kernelEntry_8 out edges: 
(0.007283) KernelPartitioningPass.cpp:588:      $BB_5_0009 -> exit
(0.007291) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.007298) KernelPartitioningPass.cpp:599:      $BB_5_0008 -> $BB_5_0009
(0.007306) KernelPartitioningPass.cpp:599:      $BB_5_0005 -> $BB_5_0009
(0.007314) KernelPartitioningPass.cpp:599:      $BB_5_0006 -> $BB_5_0009
(0.007322) KernelPartitioningPass.cpp:599:      $BB_5_0007 -> $BB_5_0009
(0.007330) KernelPartitioningPass.cpp:604:    now linking
(0.007338) KernelPartitioningPass.cpp:621:     same subkernel
(0.007346) KernelPartitioningPass.cpp:635:    linking $BB_5_0002_exit_handler_to_5_0003 to $BB_5_0003_entry_handler_from_5_0002 (entry 131073)
(0.007355) KernelPartitioningPass.cpp:621:     same subkernel
(0.007363) KernelPartitioningPass.cpp:635:    linking $BB_5_0002_exit_handler_to_5_0008 to $BB_5_0008_entry_handler_from_5_0002 (entry 458753)
(0.007371) KernelPartitioningPass.cpp:621:     same subkernel
(0.007379) KernelPartitioningPass.cpp:635:    linking $BB_5_0003_exit_handler_to_5_0004 to $BB_5_0004_entry_handler_from_5_0003 (entry 196609)
(0.007388) KernelPartitioningPass.cpp:621:     same subkernel
(0.007395) KernelPartitioningPass.cpp:635:    linking $BB_5_0003_exit_handler_to_5_0007 to $BB_5_0007_entry_handler_from_5_0003 (entry 393217)
(0.007404) KernelPartitioningPass.cpp:621:     same subkernel
(0.007411) KernelPartitioningPass.cpp:635:    linking $BB_5_0004_exit_handler_to_5_0005 to $BB_5_0005_entry_handler_from_5_0004 (entry 262145)
(0.007420) KernelPartitioningPass.cpp:621:     same subkernel
(0.007427) KernelPartitioningPass.cpp:635:    linking $BB_5_0004_exit_handler_to_5_0006 to $BB_5_0006_entry_handler_from_5_0004 (entry 327681)
(0.007436) KernelPartitioningPass.cpp:621:     same subkernel
(0.007444) KernelPartitioningPass.cpp:635:    linking $BB_5_0005_exit_handler_to_5_0009 to $BB_5_0009_entry_handler_from_5_0005 (entry 524290)
(0.007452) KernelPartitioningPass.cpp:621:     same subkernel
(0.007460) KernelPartitioningPass.cpp:635:    linking $BB_5_0006_exit_handler_to_5_0009 to $BB_5_0009_entry_handler_from_5_0006 (entry 524291)
(0.007469) KernelPartitioningPass.cpp:621:     same subkernel
(0.007476) KernelPartitioningPass.cpp:635:    linking $BB_5_0007_exit_handler_to_5_0009 to $BB_5_0009_entry_handler_from_5_0007 (entry 524292)
(0.007485) KernelPartitioningPass.cpp:621:     same subkernel
(0.007493) KernelPartitioningPass.cpp:635:    linking $BB_5_0008_exit_handler_to_5_0009 to $BB_5_0009_entry_handler_from_5_0008 (entry 524289)
(0.007501) KernelPartitioningPass.cpp:621:     same subkernel
(0.007509) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_5_0009 -> exit
(0.007602) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.007629) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.007641) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.007651) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_5_0002 -> $BB_5_0002_exit_handler_to_5_0003 (3 live values
(0.007687) KernelPartitioningPass.cpp:1731:       alive: 2 [type: s64, offset: 0]
(0.007715) KernelPartitioningPass.cpp:1731:       alive: 6 [type: s32, offset: 8]
(0.007728) KernelPartitioningPass.cpp:1731:       alive: 8 [type: s32, offset: 16]
(0.007743) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.007754) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_5_0002_exit_handler_to_5_0003
(0.007787) KernelPartitioningPass.cpp:1664:   adding $BB_5_0002 to frontierExitBlocks
(0.007828) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_5_0002 -> $BB_5_0002_exit_handler_to_5_0008 (3 live values
(0.007840) KernelPartitioningPass.cpp:1731:       alive: 2 [type: s64, offset: 0]
(0.007855) KernelPartitioningPass.cpp:1731:       alive: 6 [type: s32, offset: 8]
(0.007868) KernelPartitioningPass.cpp:1731:       alive: 8 [type: s32, offset: 16]
(0.007881) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 1
(0.007890) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_5_0002_exit_handler_to_5_0008
(0.007911) KernelPartitioningPass.cpp:1664:   adding $BB_5_0002 to frontierExitBlocks
(0.007924) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.007934) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.007943) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_5_0002
(0.007980) KernelPartitioningPass.cpp:1782:  block $BB_5_0002 (2 external edges) terminator: @%p9 bra $BB_5_0008
(0.007990) KernelPartitioningPass.cpp:1785:    branch
(0.007999) KernelPartitioningPass.cpp:1791:  1 external edge, modifying branch target to point to handler
(0.008009) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.008079) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.008096) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.008106) KernelPartitioningPass.cpp:1585:     IN-edge: $BB_5_0003_entry_handler_from_5_0002 -> $BB_5_0003 (3 live values
(0.008121) KernelPartitioningPass.cpp:1725:       skipping alive: 2 [type: s64]
(0.008130) KernelPartitioningPass.cpp:1725:       skipping alive: 6 [type: s32]
(0.008139) KernelPartitioningPass.cpp:1731:       alive: 8 [type: s32, offset: 16]
(0.008156) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.008166) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_5_0003 -> $BB_5_0003_exit_handler_to_5_0004 (3 live values
(0.008177) KernelPartitioningPass.cpp:1725:       skipping alive: 2 [type: s64]
(0.008186) KernelPartitioningPass.cpp:1725:       skipping alive: 6 [type: s32]
(0.008195) KernelPartitioningPass.cpp:1731:       alive: 8 [type: s32, offset: 16]
(0.008209) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.008218) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_5_0003_exit_handler_to_5_0004
(0.008242) KernelPartitioningPass.cpp:1664:   adding $BB_5_0003 to frontierExitBlocks
(0.008253) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_5_0003 -> $BB_5_0003_exit_handler_to_5_0007 (3 live values
(0.008264) KernelPartitioningPass.cpp:1725:       skipping alive: 2 [type: s64]
(0.008273) KernelPartitioningPass.cpp:1725:       skipping alive: 6 [type: s32]
(0.008282) KernelPartitioningPass.cpp:1731:       alive: 8 [type: s32, offset: 16]
(0.008295) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 1
(0.008305) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_5_0003_exit_handler_to_5_0007
(0.008325) KernelPartitioningPass.cpp:1664:   adding $BB_5_0003 to frontierExitBlocks
(0.008335) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.008345) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.008354) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_5_0003
(0.008367) KernelPartitioningPass.cpp:1782:  block $BB_5_0003 (2 external edges) terminator: @%p10 bra $BB_5_0007
(0.008377) KernelPartitioningPass.cpp:1785:    branch
(0.008384) KernelPartitioningPass.cpp:1791:  1 external edge, modifying branch target to point to handler
(0.008393) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.008445) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.008460) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.008469) KernelPartitioningPass.cpp:1585:     IN-edge: $BB_5_0004_entry_handler_from_5_0003 -> $BB_5_0004 (3 live values
(0.008483) KernelPartitioningPass.cpp:1725:       skipping alive: 2 [type: s64]
(0.008516) KernelPartitioningPass.cpp:1725:       skipping alive: 6 [type: s32]
(0.008526) KernelPartitioningPass.cpp:1731:       alive: 8 [type: s32, offset: 16]
(0.008543) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.008554) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_5_0004 -> $BB_5_0004_exit_handler_to_5_0005 (2 live values
(0.008564) KernelPartitioningPass.cpp:1725:       skipping alive: 2 [type: s64]
(0.008573) KernelPartitioningPass.cpp:1725:       skipping alive: 6 [type: s32]
(0.008582) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.008590) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_5_0004_exit_handler_to_5_0005
(0.008611) KernelPartitioningPass.cpp:1664:   adding $BB_5_0004 to frontierExitBlocks
(0.008623) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_5_0004 -> $BB_5_0004_exit_handler_to_5_0006 (2 live values
(0.008634) KernelPartitioningPass.cpp:1725:       skipping alive: 2 [type: s64]
(0.008643) KernelPartitioningPass.cpp:1725:       skipping alive: 6 [type: s32]
(0.008651) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 1
(0.008660) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_5_0004_exit_handler_to_5_0006
(0.008676) KernelPartitioningPass.cpp:1664:   adding $BB_5_0004 to frontierExitBlocks
(0.008690) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.008700) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.008709) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_5_0004
(0.008722) KernelPartitioningPass.cpp:1782:  block $BB_5_0004 (2 external edges) terminator: @%p11 bra $BB_5_0006
(0.008732) KernelPartitioningPass.cpp:1785:    branch
(0.008739) KernelPartitioningPass.cpp:1791:  1 external edge, modifying branch target to point to handler
(0.008748) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.008792) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.008806) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.008815) KernelPartitioningPass.cpp:1585:     IN-edge: $BB_5_0005_entry_handler_from_5_0004 -> $BB_5_0005 (2 live values
(0.008827) KernelPartitioningPass.cpp:1725:       skipping alive: 2 [type: s64]
(0.008837) KernelPartitioningPass.cpp:1725:       skipping alive: 6 [type: s32]
(0.008850) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.008860) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_5_0005 -> $BB_5_0005_exit_handler_to_5_0009 (3 live values
(0.008872) KernelPartitioningPass.cpp:1731:       alive: 12 [type: s64, offset: 24]
(0.008886) KernelPartitioningPass.cpp:1725:       skipping alive: 2 [type: s64]
(0.008895) KernelPartitioningPass.cpp:1725:       skipping alive: 6 [type: s32]
(0.008904) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.008912) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_5_0005_exit_handler_to_5_0009
(0.008928) KernelPartitioningPass.cpp:1664:   adding $BB_5_0005 to frontierExitBlocks
(0.008939) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.008948) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.008957) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_5_0005
(0.008967) KernelPartitioningPass.cpp:1782:  block $BB_5_0005 (1 external edges) terminator: bra.uni $BB_5_0009
(0.008976) KernelPartitioningPass.cpp:1785:    branch
(0.008984) KernelPartitioningPass.cpp:1791:  1 external edge, modifying branch target to point to handler
(0.008992) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.009034) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.009049) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.009058) KernelPartitioningPass.cpp:1585:     IN-edge: $BB_5_0006_entry_handler_from_5_0004 -> $BB_5_0006 (2 live values
(0.009071) KernelPartitioningPass.cpp:1725:       skipping alive: 2 [type: s64]
(0.009080) KernelPartitioningPass.cpp:1725:       skipping alive: 6 [type: s32]
(0.009118) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.009128) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_5_0006 -> $BB_5_0006_exit_handler_to_5_0009 (3 live values
(0.009139) KernelPartitioningPass.cpp:1731:       alive: 12 [type: s64, offset: 24]
(0.009154) KernelPartitioningPass.cpp:1725:       skipping alive: 2 [type: s64]
(0.009164) KernelPartitioningPass.cpp:1725:       skipping alive: 6 [type: s32]
(0.009173) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.009182) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_5_0006_exit_handler_to_5_0009
(0.009198) KernelPartitioningPass.cpp:1664:   adding $BB_5_0006 to frontierExitBlocks
(0.009208) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.009218) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.009227) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_5_0006
(0.009238) KernelPartitioningPass.cpp:1782:  block $BB_5_0006 (1 external edges) terminator: bra.uni $BB_5_0009
(0.009246) KernelPartitioningPass.cpp:1785:    branch
(0.009254) KernelPartitioningPass.cpp:1791:  1 external edge, modifying branch target to point to handler
(0.009263) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.009305) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.009320) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.009330) KernelPartitioningPass.cpp:1585:     IN-edge: $BB_5_0007_entry_handler_from_5_0003 -> $BB_5_0007 (3 live values
(0.009342) KernelPartitioningPass.cpp:1725:       skipping alive: 2 [type: s64]
(0.009351) KernelPartitioningPass.cpp:1725:       skipping alive: 6 [type: s32]
(0.009361) KernelPartitioningPass.cpp:1725:       skipping alive: 8 [type: s32]
(0.009373) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.009383) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_5_0007 -> $BB_5_0007_exit_handler_to_5_0009 (3 live values
(0.009394) KernelPartitioningPass.cpp:1731:       alive: 12 [type: s64, offset: 24]
(0.009414) KernelPartitioningPass.cpp:1725:       skipping alive: 2 [type: s64]
(0.009424) KernelPartitioningPass.cpp:1725:       skipping alive: 6 [type: s32]
(0.009434) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.009442) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_5_0007_exit_handler_to_5_0009
(0.009459) KernelPartitioningPass.cpp:1664:   adding $BB_5_0007 to frontierExitBlocks
(0.009469) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.009479) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.009488) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_5_0007
(0.009498) KernelPartitioningPass.cpp:1782:  block $BB_5_0007 (1 external edges) terminator: bra.uni $BB_5_0009
(0.009506) KernelPartitioningPass.cpp:1785:    branch
(0.009515) KernelPartitioningPass.cpp:1791:  1 external edge, modifying branch target to point to handler
(0.009523) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.009566) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.009580) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.009589) KernelPartitioningPass.cpp:1585:     IN-edge: $BB_5_0008_entry_handler_from_5_0002 -> $BB_5_0008 (3 live values
(0.009601) KernelPartitioningPass.cpp:1725:       skipping alive: 2 [type: s64]
(0.009611) KernelPartitioningPass.cpp:1725:       skipping alive: 6 [type: s32]
(0.009620) KernelPartitioningPass.cpp:1725:       skipping alive: 8 [type: s32]
(0.009632) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.009642) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_5_0008 -> $BB_5_0008_exit_handler_to_5_0009 (3 live values
(0.009653) KernelPartitioningPass.cpp:1731:       alive: 12 [type: s64, offset: 24]
(0.009672) KernelPartitioningPass.cpp:1725:       skipping alive: 2 [type: s64]
(0.009682) KernelPartiTestIndirectFunctionCall: ocelot/executive/implementation/DynamicTranslationCache.cpp:1028: void setupCallTargets(ir::PTXKernel&, const executive::DynamicTranslationCache&): Assertion `0 && "arbitrary function calls not yet supported"' failed.
tioningPass.cpp:1725:       skipping alive: 6 [type: s32]
(0.009711) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.009720) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_5_0008_exit_handler_to_5_0009
(0.009738) KernelPartitioningPass.cpp:1664:   adding $BB_5_0008 to frontierExitBlocks
(0.009749) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.009758) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.009767) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_5_0008
(0.009790) KernelPartitioningPass.cpp:1782:  block $BB_5_0008 (1 external edges) terminator: mov.u64 %r12, funcDouble
(0.009803) KernelPartitioningPass.cpp:1821:  fall-through non-control-flow instruction to external edge: mov.u64 %r12, funcDouble
(0.009812) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.009887) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.009905) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.009915) KernelPartitioningPass.cpp:1585:     IN-edge: $BB_5_0009_entry_handler_from_5_0008 -> $BB_5_0009 (3 live values
(0.009928) KernelPartitioningPass.cpp:1731:       alive: 12 [type: s64, offset: 24]
(0.009953) KernelPartitioningPass.cpp:1731:       alive: 2 [type: s64, offset: 0]
(0.009967) KernelPartitioningPass.cpp:1731:       alive: 6 [type: s32, offset: 8]
(0.009983) KernelPartitioningPass.cpp:1585:     IN-edge: $BB_5_0009_entry_handler_from_5_0005 -> $BB_5_0009 (3 live values
(0.009995) KernelPartitioningPass.cpp:1731:       alive: 12 [type: s64, offset: 24]
(0.010009) KernelPartitioningPass.cpp:1731:       alive: 2 [type: s64, offset: 0]
(0.010026) KernelPartitioningPass.cpp:1731:       alive: 6 [type: s32, offset: 8]
(0.010041) KernelPartitioningPass.cpp:1585:     IN-edge: $BB_5_0009_entry_handler_from_5_0006 -> $BB_5_0009 (3 live values
(0.010054) KernelPartitioningPass.cpp:1731:       alive: 12 [type: s64, offset: 24]
(0.010067) KernelPartitioningPass.cpp:1731:       alive: 2 [type: s64, offset: 0]
(0.010079) KernelPartitioningPass.cpp:1731:       alive: 6 [type: s32, offset: 8]
(0.010098) KernelPartitioningPass.cpp:1585:     IN-edge: $BB_5_0009_entry_handler_from_5_0007 -> $BB_5_0009 (3 live values
(0.010111) KernelPartitioningPass.cpp:1731:       alive: 12 [type: s64, offset: 24]
(0.010124) KernelPartitioningPass.cpp:1731:       alive: 2 [type: s64, offset: 0]
(0.010137) KernelPartitioningPass.cpp:1731:       alive: 6 [type: s32, offset: 8]
(0.010155) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.010165) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_5_0009 -> $BB_5_0009_thread_exit (0 live values
(0.010175) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.010184) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_5_0009_thread_exit
(0.010198) KernelPartitioningPass.cpp:1664:   adding $BB_5_0009 to frontierExitBlocks
(0.010209) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.010219) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.010228) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_5_0009
(0.010239) KernelPartitioningPass.cpp:1782:  block $BB_5_0009 (1 external edges) terminator: exit
(0.010248) KernelPartitioningPass.cpp:1810:    exit
(0.010256) KernelPartitioningPass.cpp:1825: end frontier exit blocks:

INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCalVectorScale 
INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestLLVMKernels 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCudaTextureArray
INFO     Test completed in 0.0880010128021 seconds
INFO      It produced the following output:
(0.003276) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(_Z6kernelPfii)
(0.003311) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.003321) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.003462) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.003478) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.003522) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 0]
(0.003532) KernelPartitioningPass.cpp:729:    saved 160 bytes per thread
(0.003555) KernelPartitioningPass.cpp:568:    Spill region size is 0
(0.003576) KernelPartitioningPass.cpp:1111: Subkernel::create(_Z6kernelPfii)
(0.003586) KernelPartitioningPass.cpp:1134: Subkernel::_create(_Z6kernelPfii id: 1)
(0.003608) KernelPartitioningPass.cpp:1162: 
(0.003616) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.003636) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0002
(0.003654) KernelPartitioningPass.cpp:1192:   this block exits
(0.003670) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> exit
(0.003682) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_1_0002
(0.003698) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.003707) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_1_0002
(0.003715) KernelPartitioningPass.cpp:1285:   examined terminator
(0.003722) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.003731) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_1_0002 type: fallthrough
(0.003741) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.003748) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.003762) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.003772) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.003780) KernelPartitioningPass.cpp:1374:   $BB_1_0002
(0.003788) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.003809) KernelPartitioningPass.cpp:573:  Linking external edges
(0.003817) KernelPartitioningPass.cpp:575:    but first!
(0.003825) KernelPartitioningPass.cpp:581:    subkernel _subkernel__Z6kernelPfii_1 out edges: 
(0.003834) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> exit
(0.003843) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.003852) KernelPartitioningPass.cpp:604:    now linking
(0.003860) KernelPartitioningPass.cpp:621:     same subkernel
(0.003868) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0002 -> exit
(0.003938) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.003961) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.003973) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.003981) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_thread_exit (0 live values
(0.004004) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.004013) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_thread_exit
(0.004034) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.004049) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.004059) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.004067) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0002
(0.004085) KernelPartitioningPass.cpp:1782:  block $BB_1_0002 (1 external edges) terminator: exit
(0.004094) KernelPartitioningPass.cpp:1810:    exit
(0.004103) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
Pass/Fail : Pass

INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestParser -i ../tests/ptx 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestKernels
INFO     Test completed in 0.0932600498199 seconds
INFO      It produced the following output:
Pass/Fail : Pass


Name : TestKernels

Description: 


Test Seed : 1336584815
Test time : 0.0157437

Status : Test output:
looping kernel succeeded
matrix vector kernel succeeded



INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestExternalFunctions 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCalVectorScale
INFO     Test completed in 0.0668089389801 seconds
INFO      It produced the following output:
No CAL devices found
Pass/Fail : Pass

INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCudaGlobals 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestParser
INFO     Test completed in 0.0561089515686 seconds
INFO      It produced the following output:
Pass/Fail : Pass


Name : TestParser

Description: A test for the PTXParser class. Test Points: 1) Load a PTX file 
             and run it through the parser generating a module. Write the 
             module to an intermediate stream. Parse the stream again 
             generating a new module, compare both to make sure that they match.


Test Seed : 1336584816
Test time : 2.16961e-05

Status : 


INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestEmulator 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestExternalFunctions
INFO     Test completed in 0.0575740337372 seconds
INFO      It produced the following output:
TestExternalFunctions: ocelot/executive/implementation/DynamicTranslationCache.cpp:1028: void setupCallTargets(ir::PTXKernel&, const executive::DynamicTranslationCache&): Assertion `0 && "arbitrary function calls not yet supported"' failed.
(0.002944) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(kernel)
(0.002990) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.003000) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.003113) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.003128) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.003169) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 0]
(0.003179) KernelPartitioningPass.cpp:729:    saved 24 bytes per thread
(0.003201) KernelPartitioningPass.cpp:568:    Spill region size is 0
(0.003221) KernelPartitioningPass.cpp:1111: Subkernel::create(kernel)
(0.003231) KernelPartitioningPass.cpp:1134: Subkernel::_create(kernel id: 1)
(0.003250) KernelPartitioningPass.cpp:1162: 
(0.003259) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.003275) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0002
(0.003292) KernelPartitioningPass.cpp:1192:   this block exits
(0.003308) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> exit
(0.003320) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_1_0002
(0.003337) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.003345) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_1_0002
(0.003353) KernelPartitioningPass.cpp:1285:   examined terminator
(0.003361) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.003370) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_1_0002 type: fallthrough
(0.003379) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.003387) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.003399) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.003409) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.003417) KernelPartitioningPass.cpp:1374:   $BB_1_0002
(0.003426) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.003447) KernelPartitioningPass.cpp:573:  Linking external edges
(0.003455) KernelPartitioningPass.cpp:575:    but first!
(0.003463) KernelPartitioningPass.cpp:581:    subkernel _subkernel_kernel_1 out edges: 
(0.003471) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> exit
(0.003479) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.003486) KernelPartitioningPass.cpp:604:    now linking
(0.003494) KernelPartitioningPass.cpp:621:     same subkernel
(0.003501) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0002 -> exit
(0.003549) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.003567) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.003578) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.003586) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_thread_exit (0 live values
(0.003608) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.003618) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_thread_exit
(0.003635) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.003649) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.003659) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.003667) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0002
(0.003684) KernelPartitioningPass.cpp:1782:  block $BB_1_0002 (1 external edges) terminator: exit
(0.003693) KernelPartitioningPass.cpp:1810:    exit
(0.003702) KernelPartitioningPass.cpp:1825: end frontier exit blocks:

INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestPTXAssembly 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCudaGlobals
INFO     Test completed in 0.0836260318756 seconds
INFO      It produced the following output:
cudaSetDevice() - 0 - Ocelot Dynamic Multicore CPU 
(0.006356) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(copyFromGlobal)
(0.006375) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.006384) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.006508) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.006524) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.006565) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 0]
(0.006576) KernelPartitioningPass.cpp:729:    saved 120 bytes per thread
(0.006597) KernelPartitioningPass.cpp:568:    Spill region size is 0
(0.006617) KernelPartitioningPass.cpp:1111: Subkernel::create(copyFromGlobal)
(0.006627) KernelPartitioningPass.cpp:1134: Subkernel::_create(copyFromGlobal id: 1)
(0.006647) KernelPartitioningPass.cpp:1162: 
(0.006656) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.006677) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0002
(0.006694) KernelPartitioningPass.cpp:1192:   this block exits
(0.006710) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> exit
(0.006721) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_1_0002
(0.006738) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.006747) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_1_0002
(0.006756) KernelPartitioningPass.cpp:1285:   examined terminator
(0.006764) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.006773) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_1_0002 type: fallthrough
(0.006783) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.006792) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.006806) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.006816) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.006824) KernelPartitioningPass.cpp:1374:   $BB_1_0002
(0.006833) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.006854) KernelPartitioningPass.cpp:573:  Linking external edges
(0.006863) KernelPartitioningPass.cpp:575:    but first!
(0.006871) KernelPartitioningPass.cpp:581:    subkernel _subkernel_copyFromGlobal_1 out edges: 
(0.006880) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> exit
(0.006890) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.006899) KernelPartitioningPass.cpp:604:    now linking
(0.006908) KernelPartitioningPass.cpp:621:     same subkernel
(0.006916) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0002 -> exit
(0.006983) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.007006) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.007018) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.007027) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_thread_exit (0 live values
(0.007049) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.007060) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_thread_exit
(0.007078) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.007094) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.007181) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.007191) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0002
(0.007209) KernelPartitioningPass.cpp:1782:  block $BB_1_0002 (1 external edges) terminator: exit
(0.007218) KernelPartitioningPass.cpp:1810:    exit
(0.007228) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
Pass/Fail : Pass

INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCudaMalloc 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestEmulator
INFO     Test completed in 0.0577290058136 seconds
INFO      It produced the following output:
Pass/Fail : Pass


Name : TestEmulator

Description: 


Test Seed : 1336584816
Test time : 0.00404787

Status : Test output:
10 registers
Register test passed
Load test passed
Store test passed
no errors
Full kernel test passed



INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestDataflowGraph -i ../tests/ptx 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestLLVMKernels
INFO     Test completed in 0.175793886185 seconds
INFO      It produced the following output:
Pass/Fail : Pass


Name : TestLLVMKernels

Description: A unit test for the LLVM executive runtime. Test Points: 1) 
             Execute a kernel with a loop. 2) Execute a matrix multiply kernel.


Test Seed : 1336584816
Test time : 0.092838

Status : A = [
 1 0 0 0 0 0 0 0 ;
 0.5 1 0 0 0 0 0 0 ;
 0.333333 0.5 1 0 0 0 0 0 ;
 0.25 0.333333 0.5 1 0 0 0 0 ;
 0.2 0.25 0.333333 0.5 1 0 0 0 ;
 0.166667 0.2 0.25 0.333333 0.5 1 0 0 ;
 0.142857 0.166667 0.2 0.25 0.333333 0.5 1 0 ;
 0.125 0.142857 0.166667 0.2 0.25 0.333333 0.5 1 ;
];
V = [
 1 ;
 2 ;
 3 ;
 4 ;
 5 ;
 6 ;
 7 ;
 8 ;
];
R = [
 1 ;
 2.5 ;
 4.33333 ;
 6.41667 ;
 8.7 ;
 11.15 ;
 13.7429 ;
 16.4607 ;
];



INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestDataflowGraph
INFO     Test completed in 0.0617001056671 seconds
INFO      It produced the following output:
Pass/Fail : Pass


Name : TestDataflowGraph

Description: A test for the DataflowGraph class. Test Points: 1) 
             Generic: load PTX files, convert them into dataflow graphs, verify that 
             all live ranges spanning blocks are consistent. 2) SSA: convert to 
             ssa form, verify that no register is declared more than once. 3) 
             reverse SSA: convert to ssa then out of ssa, verify that all live 
             ranges spanning blocks are consistent.


Test Seed : 1336584816
Test time : 1.93119e-05

Status : Testing Generic Dataflow
 Test Passed
Testing SSA Dataflow
 Test Passed
Testing SSA then back Dataflow
 Test Passed



INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestPTXAssembly
INFO     Test completed in 0.107580184937 seconds
INFO      It produced the following output:
(0.007018) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(test)
(0.007044) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.007054) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.007164) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.007180) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.007217) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 0]
(0.007228) KernelPartitioningPass.cpp:729:    saved 72 bytes per thread
(0.007248) KernelPartitioningPass.cpp:568:    Spill region size is 0
(0.007268) KernelPartitioningPass.cpp:1111: Subkernel::create(test)
(0.007277) KernelPartitioningPass.cpp:1134: Subkernel::_create(test id: 1)
(0.007297) KernelPartitioningPass.cpp:1162: 
(0.007306) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.007321) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0002
(0.007336) KernelPartitioningPass.cpp:1192:   this block exits
(0.007350) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> exit
(0.007361) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_1_0002
(0.007377) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.007385) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_1_0002
(0.007393) KernelPartitioningPass.cpp:1285:   examined terminator
(0.007401) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.007410) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_1_0002 type: fallthrough
(0.007419) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.007427) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.007440) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.007450) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.007458) KernelPartitioningPass.cpp:1374:   $BB_1_0002
(0.007467) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.007487) KernelPartitioningPass.cpp:573:  Linking external edges
(0.007495) KernelPartitioningPass.cpp:575:    but first!
(0.007503) KernelPartitioningPass.cpp:581:    subkernel _subkernel_test_1 out edges: 
(0.007511) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> exit
(0.007519) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.007527) KernelPartitioningPass.cpp:604:    now linking
(0.007536) KernelPartitioningPass.cpp:621:     same subkernel
(0.007544) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0002 -> exit
(0.007596) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.007615) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.007627) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.007636) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_thread_exit (0 live values
(0.007657) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.007668) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_thread_exit
(0.007686) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.007702) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.007712) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.007721) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0002
(0.007734) KernelPartitioningPass.cpp:1782:  block $BB_1_0002 (1 external edges) terminator: exit
(0.007743) KernelPartitioningPass.cpp:1810:    exit
(0.007753) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.018076) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(test)
(0.018091) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.018100) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.018156) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.018166) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.018209) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 0]
(0.018219) KernelPartitioningPass.cpp:729:    saved 72 bytes per thread
(0.018234) KernelPartitioningPass.cpp:568:    Spill region size is 0
(0.018245) KernelPartitioningPass.cpp:1111: Subkernel::create(test)
(0.018254) KernelPartitioningPass.cpp:1134: Subkernel::_create(test id: 1)
(0.018269) KernelPartitioningPass.cpp:1162: 
(0.018277) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.018291) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0002
(0.018303) KernelPartitioningPass.cpp:1192:   this block exits
(0.018314) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> exit
(0.018323) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_1_0002
(0.018333) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.018341) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_1_0002
(0.018349) KernelPartitioningPass.cpp:1285:   examined terminator
(0.018357) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.018365) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_1_0002 type: fallthrough
(0.018374) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.018382) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.018391) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.018399) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.018408) KernelPartitioningPass.cpp:1374:   $BB_1_0002
(0.018416) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.018430) KernelPartitioningPass.cpp:573:  Linking external edges
(0.018438) KernelPartitioningPass.cpp:575:    but first!
(0.018445) KernelPartitioningPass.cpp:581:    subkernel _subkernel_test_1 out edges: 
(0.018453) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> exit
(0.018461) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.018469) KernelPartitioningPass.cpp:604:    now linking
(0.018476) KernelPartitioningPass.cpp:621:     same subkernel
(0.018484) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0002 -> exit
(0.018528) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.018544) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.018552) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.018561) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_thread_exit (0 live values
(0.018573) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.018582) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_thread_exit
(0.018597) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.018608) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.018617) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.018625) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0002
(0.018634) KernelPartitioningPass.cpp:1782:  block $BB_1_0002 (1 external edges) terminator: exit
(0.018643) KernelPartitioningPass.cpp:1810:    exit
(0.018651) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.019656) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(test)
(0.019667) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.019675) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.019722) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.019732) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.019748) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 0]
(0.019758) KernelPartitioningPass.cpp:729:    saved 72 bytes per thread
(0.019773) KernelPartitioningPass.cpp:568:    Spill region size is 0
(0.019784) KernelPartitioningPass.cpp:1111: Subkernel::create(test)
(0.019792) KernelPartitioningPass.cpp:1134: Subkernel::_create(test id: 1)
(0.019808) KernelPartitioningPass.cpp:1162: 
(0.019816) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.019845) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0002
(0.019857) KernelPartitioningPass.cpp:1192:   this block exits
(0.019868) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> exit
(0.019877) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_1_0002
(0.019887) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.019895) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_1_0002
(0.019903) KernelPartitioningPass.cpp:1285:   examined terminator
(0.019910) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.019919) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_1_0002 type: fallthrough
(0.019928) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.019935) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.019944) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.019954) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.019962) KernelPartitioningPass.cpp:1374:   $BB_1_0002
(0.019971) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.019984) KernelPartitioningPass.cpp:573:  Linking external edges
(0.019993) KernelPartitioningPass.cpp:575:    but first!
(0.020000) KernelPartitioningPass.cpp:581:    subkernel _subkernel_test_1 out edges: 
(0.020009) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> exit
(0.020016) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.020024) KernelPartitioningPass.cpp:604:    now linking
(0.020032) KernelPartitioningPass.cpp:621:     same subkernel
(0.020040) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0002 -> exit
(0.020085) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.020099) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.020108) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.020117) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_thread_exit (0 live values
(0.020129) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.020138) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_thread_exit
(0.020153) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.020162) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.020172) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.020180) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0002
(0.020188) KernelPartitioningPass.cpp:1782:  block $BB_1_0002 (1 external edges) terminator: exit
(0.020197) KernelPartitioningPass.cpp:1810:    exit
(0.020205) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.021488) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(test)
(0.021500) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.021509) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.021556) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.021565) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.021582) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 0]
(0.021591) KernelPartitioningPass.cpp:729:    saved 72 bytes per thread
(0.021605) KernelPartitioningPass.cpp:568:    Spill region size is 0
(0.021616) KernelPartitioningPass.cpp:1111: Subkernel::create(test)
(0.021624) KernelPartitioningPass.cpp:1134: Subkernel::_create(test id: 1)
(0.021639) KernelPartitioningPass.cpp:1162: 
(0.021648) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.021661) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0002
(0.021672) KernelPartitioningPass.cpp:1192:   this block exits
(0.021683) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> exit
(0.021691) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_1_0002
(0.021701) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.021722) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_1_0002
(0.021731) KernelPartitioningPass.cpp:1285:   examined terminator
(0.021739) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.021747) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_1_0002 type: fallthrough
(0.021756) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.021764) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.021773) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.021783) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.021791) KernelPartitioningPass.cpp:1374:   $BB_1_0002
(0.021800) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.021813) KernelPartitioningPass.cpp:573:  Linking external edges
(0.021821) KernelPartitioningPass.cpp:575:    but first!
(0.021829) KernelPartitioningPass.cpp:581:    subkernel _subkernel_test_1 out edges: 
(0.021837) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> exit
(0.021845) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.021853) KernelPartitioningPass.cpp:604:    now linking
(0.021860) KernelPartitioningPass.cpp:621:     same subkernel
(0.021868) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0002 -> exit
(0.021914) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.021929) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.021937) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.021946) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_thread_exit (0 live values
(0.021957) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.021966) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_thread_exit
(0.021981) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.021990) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.021999) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.022007) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0002
(0.022016) KernelPartitioningPass.cpp:1782:  block $BB_1_0002 (1 external edges) terminator: exit
(0.022024) KernelPartitioningPass.cpp:1810:    exit
(0.022032) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.023225) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(test)
(0.023237) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.023246) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.023294) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.023304) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.023321) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 0]
(0.023330) KernelPartitioningPass.cpp:729:    saved 72 bytes per thread
(0.023345) KernelPartitioningPass.cpp:568:    Spill region size is 0
(0.023356) KernelPartitioningPass.cpp:1111: Subkernel::create(test)
(0.023365) KernelPartitioningPass.cpp:1134: Subkernel::_create(test id: 1)
(0.023380) KernelPartitioningPass.cpp:1162: 
(0.023389) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.023402) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0002
(0.023414) KernelPartitioningPass.cpp:1192:   this block exits
(0.023425) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> exit
(0.023433) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_1_0002
(0.023444) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.023452) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_1_0002
(0.023460) KernelPartitioningPass.cpp:1285:   examined terminator
(0.023468) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.023476) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_1_0002 type: fallthrough
(0.023485) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.023515) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.023525) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.023535) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.023544) KernelPartitioningPass.cpp:1374:   $BB_1_0002
(0.023552) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.023567) KernelPartitioningPass.cpp:573:  Linking external edges
(0.023576) KernelPartitioningPass.cpp:575:    but first!
(0.023583) KernelPartitioningPass.cpp:581:    subkernel _subkernel_test_1 out edges: 
(0.023592) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> exit
(0.023600) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.023608) KernelPartitioningPass.cpp:604:    now linking
(0.023616) KernelPartitioningPass.cpp:621:     same subkernel
(0.023623) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0002 -> exit
(0.023669) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.023685) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.023694) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.023702) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_thread_exit (0 live values
(0.023714) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.023723) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_thread_exit
(0.023738) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.023748) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.023757) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.023766) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0002
(0.023774) KernelPartitioningPass.cpp:1782:  block $BB_1_0002 (1 external edges) terminator: exit
(0.023783) KernelPartitioningPass.cpp:1810:    exit
(0.023791) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.025174) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(test)
(0.025186) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.025195) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.025240) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.025250) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.025267) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 0]
(0.025275) KernelPartitioningPass.cpp:729:    saved 72 bytes per thread
(0.025290) KernelPartitioningPass.cpp:568:    Spill region size is 0
(0.025300) KernelPartitioningPass.cpp:1111: Subkernel::create(test)
(0.025308) KernelPartitioningPass.cpp:1134: Subkernel::_create(test id: 1)
(0.025324) KernelPartitioningPass.cpp:1162: 
(0.025332) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.025346) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0002
(0.025358) KernelPartitioningPass.cpp:1192:   this block exits
(0.025369) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> exit
(0.025377) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_1_0002
(0.025387) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.025395) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_1_0002
(0.025403) KernelPartitioningPass.cpp:1285:   examined terminator
(0.025410) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.025418) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_1_0002 type: fallthrough
(0.025428) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.025435) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.025445) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.025453) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.025461) KernelPartitioningPass.cpp:1374:   $BB_1_0002
(0.025470) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.025496) KernelPartitioningPass.cpp:573:  Linking external edges
(0.025505) KernelPartitioningPass.cpp:575:    but first!
(0.025512) KernelPartitioningPass.cpp:581:    subkernel _subkernel_test_1 out edges: 
(0.025520) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> exit
(0.025528) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.025536) KernelPartitioningPass.cpp:604:    now linking
(0.025544) KernelPartitioningPass.cpp:621:     same subkernel
(0.025551) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0002 -> exit
(0.025596) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.025611) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.025620) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.025628) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_thread_exit (0 live values
(0.025640) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.025648) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_thread_exit
(0.025663) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.025673) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.025682) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.025690) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0002
(0.025698) KernelPartitioningPass.cpp:1782:  block $BB_1_0002 (1 external edges) terminator: exit
(0.025707) KernelPartitioningPass.cpp:1810:    exit
(0.025715) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.026653) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(test)
(0.026664) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.026672) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.026717) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.026726) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.026742) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 0]
(0.026751) KernelPartitioningPass.cpp:729:    saved 72 bytes per thread
(0.026765) KernelPartitioningPass.cpp:568:    Spill region size is 0
(0.026775) KernelPartitioningPass.cpp:1111: Subkernel::create(test)
(0.026783) KernelPartitioningPass.cpp:1134: Subkernel::_create(test id: 1)
(0.026798) KernelPartitioningPass.cpp:1162: 
(0.026806) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.026820) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0002
(0.026831) KernelPartitioningPass.cpp:1192:   this block exits
(0.026842) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> exit
(0.026850) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_1_0002
(0.026860) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.026867) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_1_0002
(0.026875) KernelPartitioningPass.cpp:1285:   examined terminator
(0.026883) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.026891) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_1_0002 type: fallthrough
(0.026901) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.026908) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.026917) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.026926) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.026934) KernelPartitioningPass.cpp:1374:   $BB_1_0002
(0.026942) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.026956) KernelPartitioningPass.cpp:573:  Linking external edges
(0.026963) KernelPartitioningPass.cpp:575:    but first!
(0.026971) KernelPartitioningPass.cpp:581:    subkernel _subkernel_test_1 out edges: 
(0.026979) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> exit
(0.026987) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.026995) KernelPartitioningPass.cpp:604:    now linking
(0.027014) KernelPartitioningPass.cpp:621:     same subkernel
(0.027022) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0002 -> exit
(0.027067) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.027082) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.027091) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.027099) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_thread_exit (0 live values
(0.027110) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.027118) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_thread_exit
(0.027133) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.027142) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.027151) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.027160) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0002
(0.027168) KernelPartitioningPass.cpp:1782:  block $BB_1_0002 (1 external edges) terminator: exit
(0.027176) KernelPartitioningPass.cpp:1810:    exit
(0.027185) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.028371) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(test)
(0.028383) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.028391) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.028439) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.028448) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.028465) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 0]
(0.028474) KernelPartitioningPass.cpp:729:    saved 72 bytes per thread
(0.028489) KernelPartitioningPass.cpp:568:    Spill region size is 0
(0.028500) KernelPartitioningPass.cpp:1111: Subkernel::create(test)
(0.028508) KernelPartitioningPass.cpp:1134: Subkernel::_create(test id: 1)
(0.028523) KernelPartitioningPass.cpp:1162: 
(0.028532) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.028544) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0002
(0.028556) KernelPartitioningPass.cpp:1192:   this block exits
(0.028567) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> exit
(0.028575) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_1_0002
(0.028585) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.028593) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_1_0002
(0.028601) KernelPartitioningPass.cpp:1285:   examined terminator
(0.028609) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.028617) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_1_0002 type: fallthrough
(0.028626) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.028634) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.028643) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.028652) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.028660) KernelPartitioningPass.cpp:1374:   $BB_1_0002
(0.028669) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.028682) KernelPartitioningPass.cpp:573:  Linking external edges
(0.028691) KernelPartitioningPass.cpp:575:    but first!
(0.028698) KernelPartitioningPass.cpp:581:    subkernel _subkernel_test_1 out edges: 
(0.028706) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> exit
(0.028714) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.028722) KernelPartitioningPass.cpp:604:    now linking
(0.028730) KernelPartitioningPass.cpp:621:     same subkernel
(0.028737) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0002 -> exit
(0.028781) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.028796) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.028805) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.028813) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_thread_exit (0 live values
(0.028839) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.028848) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_thread_exit
(0.028862) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.028872) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.028882) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.028890) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0002
(0.028898) KernelPartitioningPass.cpp:1782:  block $BB_1_0002 (1 external edges) terminator: exit
(0.028907) KernelPartitioningPass.cpp:1810:    exit
(0.028915) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
(0.030042) KernelPartitioningPass.cpp:76:   KernelPartitioningPass::runOnFunction(test)
(0.030052) KernelPartitioningPass.cpp:113:  partitioning blocks at barriers
(0.030061) KernelPartitioningPass.cpp:148:    encountered 0 barriers
(0.030099) KernelPartitioningPass.cpp:195:   KernelGraph( partitioning with heuristic minimum)
(0.030108) KernelPartitioningPass.cpp:290:  KernelGraph::_partitionMinimumSize()
(0.030123) KernelPartitioningPass.cpp:727:  LiveRegisters [count: 0]
(0.030132) KernelPartitioningPass.cpp:729:    saved 32 bytes per thread
(0.030146) KernelPartitioningPass.cpp:568:    Spill region size is 0
(0.030156) KernelPartitioningPass.cpp:1111: Subkernel::create(test)
(0.030165) KernelPartitioningPass.cpp:1134: Subkernel::_create(test id: 1)
(0.030180) KernelPartitioningPass.cpp:1162: 
(0.030188) KernelPartitioningPass.cpp:1163:  _analyzeExternalEdges()
(0.030200) KernelPartitioningPass.cpp:1173:  adding block $BB_1_0002
(0.030211) KernelPartitioningPass.cpp:1192:   this block exits
(0.030222) KernelPartitioningPass.cpp:1222:   adding EXTERNAL OUT-Edge $BB_1_0002 -> exit
(0.030231) KernelPartitioningPass.cpp:1262:  ENTRY EDGE: entry -> $BB_1_0002
(0.030240) KernelPartitioningPass.cpp:1276: Creating internal edges
(0.030248) KernelPartitioningPass.cpp:1281:  looking in block mapping: entry -> $BB_1_0002
(0.030256) KernelPartitioningPass.cpp:1285:   examined terminator
(0.030264) KernelPartitioningPass.cpp:1296:   instantiating internal edge
(0.030272) KernelPartitioningPass.cpp:1302:   adding internal edge: entry -> $BB_1_0002 type: fallthrough
(0.030281) KernelPartitioningPass.cpp:1308:  identifying targets of external IN edges
(0.030289) KernelPartitioningPass.cpp:1320:  identifying sources of external OUT edges
(0.030298) KernelPartitioningPass.cpp:1341:  _analyzeDivergentControlFlow()
(0.030307) KernelPartitioningPass.cpp:1371: as a reminder, this partition contains 1 blocks:
(0.030316) KernelPartitioningPass.cpp:1374:   $BB_1_0002
(0.030324) KernelPartitioningPass.cpp:1379:   0 divergent blocks
(0.030337) KernelPartitioningPass.cpp:573:  Linking external edges
(0.030345) KernelPartitioningPass.cpp:575:    but first!
(0.030353) KernelPartitioningPass.cpp:581:    subkernel _subkernel_test_1 out edges: 
(0.030360) KernelPartitioningPass.cpp:588:      $BB_1_0002 -> exit
(0.030368) KernelPartitioningPass.cpp:592:    and here are all the in_edges:
(0.030375) KernelPartitioningPass.cpp:604:    now linking
(0.030383) KernelPartitioningPass.cpp:621:     same subkernel
(0.030390) KernelPartitioningPass.cpp:647:   failed to link external edge: $BB_1_0002 -> exit
(0.030428) KernelPartitioningPass.cpp:1560: Subkernel::_createExternalHandlers()
(0.030442) KernelPartitioningPass.cpp:1568:   visiting external IN-edges
(0.030451) KernelPartitioningPass.cpp:1600:   visiting external OUT-edges
(0.030459) KernelPartitioningPass.cpp:1615:     OUT-edge: $BB_1_0002 -> $BB_1_0002_thread_exit (0 live values
(0.030470) KernelPartitioningPass.cpp:1630: is this a divergent handler? edgeIndex 0
(0.030479) KernelPartitioningPass.cpp:1679:   creating exit in block $BB_1_0002_thread_exit
(0.030493) KernelPartitioningPass.cpp:1664:   adding $BB_1_0002 to frontierExitBlocks
(0.030504) KernelPartitioningPass.cpp:1765: Frontier exit blocks:
(0.030525) KernelPartitioningPass.cpp:1770:   obtained CFG-to-DFG mapping. Now visiting 1 frontier exit blocks
(0.030534) KernelPartitioningPass.cpp:1775:    frontier exit block: $BB_1_0002
(0.030542) KernelPartitioningPass.cpp:1782:  block $BB_1_0002 (1 external edges) terminator: exit
(0.030551) KernelPartitioningPass.cpp:1810:    exit
(0.030559) KernelPartitioningPass.cpp:1825: end frontier exit blocks:
Pass/Fail : Fail


Name : TestPTXAssembly

Description: A unit test framework for PTX. Runs random inputs through unit 
             tests on all available devices until a timer expires.


Test Seed : 1336584816
Test time : 0.0320537

Status : Ran 'TestVectorElements-u32' for 8 iterations.
 Output parameter 0 (I16) computed value - 0 does not match reference value - -22778
  On device - 0 - 'Ocelot Dynamic Multicore CPU'
Test 'TestAdd-u16' seed '1336584816' failed.



INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCudaMalloc
INFO     Test completed in 0.107849121094 seconds
INFO      It produced the following output:
test_malloc(256, 128)
PASSED
test_mallocArray(256, 128)
checking results from last cudaMemcpyFromArray
PASSED
[1] mallocing pitch
[2] memcpying2d
[3] memcpying
[4] checking for errors
[5] mallocing
[6] memcpying
[7] memcpying
[8] final free
Pass/Fail : Pass

INFO     
Passing tests:
 (0.121s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCudaSequence : Passed
 (0.098s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCudaTexture2D : Passed
 (0.062s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestDataflowGraph : Passed
 (0.176s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestLLVMKernels : Passed
 (0.084s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCudaGlobals : Passed
 (0.088s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCudaTextureArray : Passed
 (0.073s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestLexer : Passed
 (0.063s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestPTXToLLVMTranslator : Passed
 (0.108s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCudaMalloc : Passed
 (0.058s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestEmulator : Passed
 (0.056s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestParser : Passed
 (0.112s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestDeviceSwitching : Passed
 (0.067s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestInstructions : Passed
 (0.069s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestLLVMInstructions : Passed
 (0.067s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestCalVectorScale : Passed
 (0.093s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestKernels : Passed

Failing tests:
 (0.070s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestIndirectFunctionCall : Did not complete.
 (0.108s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestPTXAssembly : Failed
 (0.082s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestFunctionCall : Did not complete.
 (0.058s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-subkernel/.release_build/TestExternalFunctions : Did not complete.

