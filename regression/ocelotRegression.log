INFO     Reading in test file /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/regression/ocelotRegressionTests.txt
INFO      Found the following tests:
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestLexer
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestParser
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestEmulator
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestInstructions
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestKernels
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestDataflowGraph
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestLLVMInstructions
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestPTXToLLVMTranslator
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestLLVMKernels
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestCudaMalloc
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestCudaTexture2D
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestCudaTextureArray
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestCudaGlobals
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestDeviceSwitching
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestCudaSequence
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestCalVectorScale
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestPTXAssembly
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestFunctionCall
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestIndirectFunctionCall
INFO       /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestConvergence
INFO     ==== INDIVIDUAL TEST RESULTS ====

INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestCudaTextureArray 
INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestKernels 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestKernels
INFO     Test completed in 0.652291059494 seconds
INFO      It produced the following output:
Pass/Fail : Pass


Name : TestKernels

Description: 


Test Seed : 1315863507
Test time : 0.0739467

Status : Test output:
looping kernel succeeded
matrix vector kernel succeeded



INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestLexer -i ../tests/ptx 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestLexer
INFO     Test completed in 0.152019023895 seconds
INFO      It produced the following output:
Pass/Fail : Pass


Name : TestLexer

Description: Tests for the PTX lexer. Test Point 1: Scan a PTX file and 
             write out a temp stream, scan the stream again and make sure that the 
             two sets of tokens match


Test Seed : 1315863508
Test time : 0.0212653

Status : 


INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestIndirectFunctionCall 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestIndirectFunctionCall
INFO     Test completed in 0.0268189907074 seconds
INFO      It produced the following output:
(0.004815) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - indirectCall.cu
(0.004840) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'funcQuadruple'
(0.005051) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'kernelEntry'
(0.006739) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'funcPentuple'
(0.006905) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'funcTriple'
(0.007076) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'funcDouble'
(0.008373) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.008384) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_funcQuadruple( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_3_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 4;
	%rt3 = bitcast i8* %rt0 to i32*;
	%r0 = load i32* %rt3, align 4;
	%r1 = bitcast i32 %r0 to i32;
	%r2 = mul i32 %r1, 4;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i32*;
	store i32 %r2, i32* %rt6, align 4;
	%rt7 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt8 = load i8** %rt7;
	%rt9 = bitcast i8* %rt8 to i32*;
	store i32 2, i32* %rt9;
	br label %exit;
$BB_3_0002_entry:
	br label %$BB_3_0002;
$BB_3_0002_exit:
	ret void;
exit:
	ret void;

}

(0.009513) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.009525) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.009534) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.009717) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_funcQuadruple_opt3_ws1(%LLVMContext* %__ctaContext) nounwind align 1 {
"$BB_3_0002":
  %rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 4
  %rt3 = bitcast i8* %rt0 to i32*
  %r0 = load i32* %rt3, align 4
  %r1 = bitcast i32 %r0 to i32
  %r2 = mul i32 %r1, 4
  %rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i32*
  store i32 %r2, i32* %rt6, align 4
  %rt7 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4
  %rt8 = load i8** %rt7
  %rt9 = bitcast i8* %rt8 to i32*
  store i32 2, i32* %rt9
  br label %exit

"$BB_3_0002_entry":                               ; No predecessors!
  br label %"$BB_3_0002"

"$BB_3_0002_exit":                                ; No predecessors!
  ret void

exit:                                             ; preds = %"$BB_3_0002"
  ret void
}


(0.010878) LLVMState.cpp:52:   Bringing the LLVM JIT-Compiler online.
(0.010894) LLVMState.cpp:59:     initialized native target
(0.012367) LLVMState.cpp:68:     created engine builder
(0.012381) LLVMState.cpp:73:    The JIT is alive.
_Z_ocelotTranslated_funcQuadruple_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext* %__ctaContext to %LLVMContext**
  %context.t0 = load %LLVMContext** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 4
  %rt3 = bitcast i8* %rt0 to i32*
  %r0 = load i32* %rt3, align 4
  %r2 = shl i32 %r0, 2
  %rt6 = bitcast i8* %gridDimPtr.0. to i32*
  store i32 %r2, i32* %rt6, align 4
  %rt9 = bitcast i8* %localMemPtr.0 to i32*
  store i32 2, i32* %rt9, align 4
  ret void

}
TestIndirectFunctionCall: ocelot/executive/implementation/LLVMDynamicTranslationCache.cpp:1033: void executive::setupCallTargets(ir::PTXKernel&, const executive::LLVMDynamicTranslationCache&): Assertion `0 && "arbitrary function calls not yet supported"' failed.
(0.014182) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.015991) LLVMDynamicTranslationCache.cpp:137:  inserting translation 0 with 24 bytes of local memory

INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestCalVectorScale 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestCalVectorScale
INFO     Test completed in 0.234437942505 seconds
INFO      It produced the following output:
No CAL devices found
Pass/Fail : Pass

INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestLLVMKernels 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestLLVMKernels
INFO     Test completed in 1.25173211098 seconds
INFO      It produced the following output:

INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestConvergence 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestConvergence
INFO     Test completed in 0.126873016357 seconds
INFO      It produced the following output:
(0.002691) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestConvergence.cu
(0.002720) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'convergence'
(0.004346) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.004361) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_convergence( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt0 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 0, i32 0;
	%rt1 = load i32* %rt0;
	%r0 = bitcast i32 %rt1 to i32;
	%r1 = sitofp i32 %r0 to float;
	%r2 = fadd float %r1, %r1;
	%r3 = bitcast float 0x3ff0000000000000 to float;
	%r4 = fadd float %r2, %r3;
	%rt2 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt3 = load i8** %rt2;
	%rt4 = bitcast i8* %rt3 to i64*;
	%r5 = load i64* %rt4, align 8;
	%r6 = sext i32 %r0 to i64;
	%rt5 = sext i32 %r0 to i64;
	%r7 = mul i64 %rt5, 4;
	%r8 = add i64 %r5, %r7;
	%rt6 = inttoptr i64 %r8 to float*;
	store float %r4, float* %rt6, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r9 = bitcast i32 0 to i32;
	%rt7 = zext i32 %r9 to i64;
	%rt8 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt9 = load i8** %rt8;
	%rt10 = ptrtoint i8* %rt9 to i64;
	%rt11 = add i64 %rt7, %rt10;
	%rt12 = inttoptr i64 %rt11 to i32*;
	store i32 6, i32* %rt12, align 4;
	br label %exit;
exit:
	ret void;

}

(0.005568) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.005581) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.005590) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.005777) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_convergence_opt3_ws1(%LLVMContext* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt0 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 0, i32 0
  %rt1 = load i32* %rt0
  %r0 = bitcast i32 %rt1 to i32
  %r1 = sitofp i32 %r0 to float
  %r2 = fadd float %r1, %r1
  %r3 = bitcast float 1.000000e+00 to float
  %r4 = fadd float %r2, %r3
  %rt2 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8
  %rt3 = load i8** %rt2
  %rt4 = bitcast i8* %rt3 to i64*
  %r5 = load i64* %rt4, align 8
  %r6 = sext i32 %r0 to i64
  %rt5 = sext i32 %r0 to i64
  %r7 = mul i64 %rt5, 4
  %r8 = add i64 %r5, %r7
  %rt6 = inttoptr i64 %r8 to float*
  store float %r4, float* %rt6, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r9 = bitcast i32 0 to i32
  %rt7 = zext i32 %r9 to i64
  %rt8 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4
  %rt9 = load i8** %rt8
  %rt10 = ptrtoint i8* %rt9 to i64
  %rt11 = add i64 %rt7, %rt10
  %rt12 = inttoptr i64 %rt11 to i32*
  store i32 6, i32* %rt12, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


(0.007436) LLVMState.cpp:52:   Bringing the LLVM JIT-Compiler online.
(0.007453) LLVMState.cpp:59:     initialized native target
(0.008943) LLVMState.cpp:68:     created engine builder
(0.008956) LLVMState.cpp:73:    The JIT is alive.
_Z_ocelotTranslated_convergence_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext* %__ctaContext to %LLVMContext**
  %context.t0 = load %LLVMContext** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.threadId.x = getelementptr %LLVMContext* %context.t0, i64 0, i32 0, i32 0
  %threadId_x.0. = load i32* %ptr.threadId.x, align 4
  %ptr.argMem. = getelementptr %LLVMContext* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %r1 = sitofp i32 %threadId_x.0. to float
  %r2 = fadd float %r1, %r1
  %r4 = fadd float %r2, 1.000000e+00
  %rt4 = bitcast i8* %gridDimPtr.0. to i64*
  %r5 = load i64* %rt4, align 8
  %rt5 = sext i32 %threadId_x.0. to i64
  %r7 = shl nsw i64 %rt5, 2
  %r8 = add i64 %r5, %r7
  %rt6 = inttoptr i64 %r8 to float*
  store float %r4, float* %rt6, align 4
  %rt12 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt12, align 4
  ret void

}
(0.011029) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.013310) LLVMDynamicTranslationCache.cpp:137:  inserting translation 0 with 72 bytes of local memory
Pass/Fail : Pass

INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestCudaGlobals 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestCudaTextureArray
INFO     Test completed in 2.64675402641 seconds
INFO      It produced the following output:
(0.135243) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - textureArray.cu
(0.135279) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel '_Z6kernelPfii'
(0.172382) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.172402) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated__Z6kernelPfii( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$OcelotTextureAllocateBlock:
	%integerTexture = alloca i32, i32 4, align 16;
	%floatingPointTexture = alloca float, i32 4, align 16;
	br label %$BB_1_0002;
$BB_1_0002:
	%rt0 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 2, i32 0;
	%rt1 = load i32* %rt0;
	%r0 = bitcast i32 %rt1 to i32;
	%rt2 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 1, i32 0;
	%rt3 = load i32* %rt2;
	%r1 = bitcast i32 %rt3 to i32;
	%r2 = mul i32 %r0, %r1;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 2, i32 1;
	%rt5 = load i32* %rt4;
	%r3 = bitcast i32 %rt5 to i32;
	%rt6 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 1, i32 1;
	%rt7 = load i32* %rt6;
	%r4 = bitcast i32 %rt7 to i32;
	%r5 = mul i32 %r3, %r4;
	%rt8 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 0, i32 0;
	%rt9 = load i32* %rt8;
	%r6 = bitcast i32 %rt9 to i32;
	%r7 = add i32 %r6, %r2;
	%rt10 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 0, i32 1;
	%rt11 = load i32* %rt10;
	%r8 = bitcast i32 %rt11 to i32;
	%r9 = add i32 %r8, %r5;
	%r10 = uitofp i32 %r7 to float;
	%r11 = uitofp i32 %r9 to float;
	%r12 = bitcast float 0x0 to float;
	%r13 = bitcast float 0x0 to float;
	call void @__ocelot_tex_2d_ff(float* %floatingPointTexture, %LLVMContext* %__ctaContext, i32 0, float %r10, float %r11);
	%r14 = load float* %floatingPointTexture;
	%rt12 = getelementptr float* %floatingPointTexture, i32 1;
	%r15 = load float* %rt12;
	%rt13 = getelementptr float* %floatingPointTexture, i32 2;
	%r16 = load float* %rt13;
	%rt14 = getelementptr float* %floatingPointTexture, i32 3;
	%r17 = load float* %rt14;
	%r18 = bitcast float %r14 to float;
	%rt15 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt16 = load i8** %rt15;
	%rt17 = bitcast i8* %rt16 to i64*;
	%r19 = load i64* %rt17, align 8;
	%rt19 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt20 = load i8** %rt19;
	%rt18 = getelementptr i8* %rt20, i32 8;
	%rt21 = bitcast i8* %rt18 to i32*;
	%r20 = load i32* %rt21, align 4;
	%r21 = mul i32 %r20, %r9;
	%r22 = add i32 %r7, %r21;
	%r23 = zext i32 %r22 to i64;
	%rt22 = zext i32 %r22 to i64;
	%r24 = mul i64 %rt22, 4;
	%r25 = add i64 %r19, %r24;
	%rt23 = inttoptr i64 %r25 to float*;
	store float %r18, float* %rt23, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r26 = bitcast i32 0 to i32;
	%rt24 = zext i32 %r26 to i64;
	%rt25 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt26 = load i8** %rt25;
	%rt27 = ptrtoint i8* %rt26 to i64;
	%rt28 = add i64 %rt24, %rt27;
	%rt29 = inttoptr i64 %rt28 to i32*;
	store i32 6, i32* %rt29, align 4;
	br label %exit;
exit:
	ret void;

}

(0.302841) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.302860) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.302869) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.303060) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated__Z6kernelPfii_opt3_ws1(%LLVMContext* %__ctaContext) nounwind align 1 {
"$OcelotTextureAllocateBlock":
  %integerTexture = alloca i32, i32 4, align 16
  %floatingPointTexture = alloca float, i32 4, align 16
  br label %"$BB_1_0002"

"$BB_1_0002":                                     ; preds = %"$BB_1_0002_entry", %"$OcelotTextureAllocateBlock"
  %rt0 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 2, i32 0
  %rt1 = load i32* %rt0
  %r0 = bitcast i32 %rt1 to i32
  %rt2 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 1, i32 0
  %rt3 = load i32* %rt2
  %r1 = bitcast i32 %rt3 to i32
  %r2 = mul i32 %r0, %r1
  %rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 2, i32 1
  %rt5 = load i32* %rt4
  %r3 = bitcast i32 %rt5 to i32
  %rt6 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 1, i32 1
  %rt7 = load i32* %rt6
  %r4 = bitcast i32 %rt7 to i32
  %r5 = mul i32 %r3, %r4
  %rt8 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 0, i32 0
  %rt9 = load i32* %rt8
  %r6 = bitcast i32 %rt9 to i32
  %r7 = add i32 %r6, %r2
  %rt10 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 0, i32 1
  %rt11 = load i32* %rt10
  %r8 = bitcast i32 %rt11 to i32
  %r9 = add i32 %r8, %r5
  %r10 = uitofp i32 %r7 to float
  %r11 = uitofp i32 %r9 to float
  %r12 = bitcast float 0.000000e+00 to float
  %r13 = bitcast float 0.000000e+00 to float
  call void @__ocelot_tex_2d_ff(float* %floatingPointTexture, %LLVMContext* %__ctaContext, i32 0, float %r10, float %r11)
  %r14 = load float* %floatingPointTexture
  %rt12 = getelementptr float* %floatingPointTexture, i32 1
  %r15 = load float* %rt12
  %rt13 = getelementptr float* %floatingPointTexture, i32 2
  %r16 = load float* %rt13
  %rt14 = getelementptr float* %floatingPointTexture, i32 3
  %r17 = load float* %rt14
  %r18 = bitcast float %r14 to float
  %rt15 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8
  %rt16 = load i8** %rt15
  %rt17 = bitcast i8* %rt16 to i64*
  %r19 = load i64* %rt17, align 8
  %rt19 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8
  %rt20 = load i8** %rt19
  %rt18 = getelementptr i8* %rt20, i32 8
  %rt21 = bitcast i8* %rt18 to i32*
  %r20 = load i32* %rt21, align 4
  %r21 = mul i32 %r20, %r9
  %r22 = add i32 %r7, %r21
  %r23 = zext i32 %r22 to i64
  %rt22 = zext i32 %r22 to i64
  %r24 = mul i64 %rt22, 4
  %r25 = add i64 %r19, %r24
  %rt23 = inttoptr i64 %r25 to float*
  store float %r18, float* %rt23, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r26 = bitcast i32 0 to i32
  %rt24 = zext i32 %r26 to i64
  %rt25 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4
  %rt26 = load i8** %rt25
  %rt27 = ptrtoint i8* %rt26 to i64
  %rt28 = add i64 %rt24, %rt27
  %rt29 = inttoptr i64 %rt28 to i32*
  store i32 6, i32* %rt29, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


(0.326444) LLVMState.cpp:52:   Bringing the LLVM JIT-Compiler online.
(0.326462) LLVMState.cpp:59:     initialized native target
(0.475134) LLVMState.cpp:68:     created engine builder
(0.475151) LLVMState.cpp:73:    The JIT is alive.
_Z_ocelotTranslated__Z6kernelPfii_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %floatingPointTexture1 = alloca [4 x float], align 16
  %floatingPointTexture1.sub = getelementptr inbounds [4 x float]* %floatingPointTexture1, i64 0, i64 0
  %contexts = bitcast %LLVMContext* %__ctaContext to %LLVMContext**
  %context.t0 = load %LLVMContext** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.threadId.x = getelementptr %LLVMContext* %context.t0, i64 0, i32 0, i32 0
  %threadId_x.0. = load i32* %ptr.threadId.x, align 4
  %ptr.threadId.y = getelementptr %LLVMContext* %context.t0, i64 0, i32 0, i32 1
  %threadId_y.0. = load i32* %ptr.threadId.y, align 4
  %ptr.blockDim.x = getelementptr %LLVMContext* %context.t0, i64 0, i32 1, i32 0
  %blockDim_x.0. = load i32* %ptr.blockDim.x, align 4
  %ptr.blockDim.y = getelementptr %LLVMContext* %context.t0, i64 0, i32 1, i32 1
  %blockDim_y.0. = load i32* %ptr.blockDim.y, align 4
  %ptr.blockId.x = getelementptr %LLVMContext* %context.t0, i64 0, i32 2, i32 0
  %blockId_x.0. = load i32* %ptr.blockId.x, align 4
  %ptr.blockId.y = getelementptr %LLVMContext* %context.t0, i64 0, i32 2, i32 1
  %blockId_y.0. = load i32* %ptr.blockId.y, align 4
  %ptr.argMem. = getelementptr %LLVMContext* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %r2 = mul i32 %blockId_x.0., %blockDim_x.0.
  %r5 = mul i32 %blockId_y.0., %blockDim_y.0.
  %r7 = add i32 %r2, %threadId_x.0.
  %r9 = add i32 %r5, %threadId_y.0.
  %r10 = uitofp i32 %r7 to float
  %r11 = uitofp i32 %r9 to float
  call void @__ocelot_tex_2d_ff(float* %floatingPointTexture1.sub, %LLVMContext* %context.t0, i32 0, float %r10, float %r11) nounwind
  %r14 = load float* %floatingPointTexture1.sub, align 16
  %rt17 = bitcast i8* %gridDimPtr.0. to i64*
  %r19 = load i64* %rt17, align 8
  %rt18 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt21 = bitcast i8* %rt18 to i32*
  %r20 = load i32* %rt21, align 4
  %r21 = mul i32 %r20, %r9
  %r22 = add i32 %r21, %r7
  %rt22 = zext i32 %r22 to i64
  %r24 = shl nuw nsw i64 %rt22, 2
  %r25 = add i64 %r24, %r19
  %rt23 = inttoptr i64 %r25 to float*
  store float %r14, float* %rt23, align 4
  %rt29 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt29, align 4
  ret void

}
(0.662599) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.746889) LLVMDynamicTranslationCache.cpp:137:  inserting translation 0 with 208 bytes of local memory
Pass/Fail : Pass

INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestDataflowGraph -i ../tests/ptx 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestDataflowGraph
INFO     Test completed in 0.0828220844269 seconds
INFO      It produced the following output:
Pass/Fail : Pass


Name : TestDataflowGraph

Description: A test for the DataflowGraph class. Test Points: 1) 
             Generic: load PTX files, convert them into dataflow graphs, verify that 
             all live ranges spanning blocks are consistent. 2) SSA: convert to 
             ssa form, verify that no register is declared more than once. 3) 
             reverse SSA: convert to ssa then out of ssa, verify that all live 
             ranges spanning blocks are consistent.


Test Seed : 1315863510
Test time : 2.26498e-05

Status : Testing Generic Dataflow
 Test Passed
Testing SSA Dataflow
 Test Passed
Testing SSA then back Dataflow
 Test Passed



INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestParser -i ../tests/ptx 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestParser
INFO     Test completed in 0.0851640701294 seconds
INFO      It produced the following output:
Pass/Fail : Pass


Name : TestParser

Description: A test for the PTXParser class. Test Points: 1) Load a PTX file 
             and run it through the parser generating a module. Write the 
             module to an intermediate stream. Parse the stream again 
             generating a new module, compare both to make sure that they match.


Test Seed : 1315863510
Test time : 2.40803e-05

Status : 


INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestPTXAssembly 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestCudaGlobals
INFO     Test completed in 1.45684504509 seconds
INFO      It produced the following output:
cudaSetDevice() - 0 - Ocelot Dynamic Multicore CPU Backend (LLVM-JIT) 
(0.013427) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - global.cu
(0.013446) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'copyFromGlobal'
(0.058287) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.058302) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896

@Pi = external global float, align 4;

%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_copyFromGlobal( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt0 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 0, i32 0;
	%rt1 = load i32* %rt0;
	%r0 = bitcast i32 %rt1 to i32;
	%rt2 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 2, i32 0;
	%rt3 = load i32* %rt2;
	%r1 = bitcast i32 %rt3 to i32;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 1, i32 0;
	%rt5 = load i32* %rt4;
	%r2 = bitcast i32 %rt5 to i32;
	%r3 = mul i32 %r1, %r2;
	%r4 = add i32 %r0, %r3;
	%r5 = ashr i32 %r4, 31;
	%r6 = bitcast i32 127 to i32;
	%r7 = and i32 %r5, %r6;
	%r8 = add i32 %r7, %r4;
	%r9 = ashr i32 %r8, 7;
	%r10 = mul i32 %r9, 128;
	%r11 = sub i32 %r4, %r10;
	%r12 = sitofp i32 %r11 to float;
	%rt6 = bitcast float* @Pi to float*;
	%r13 = load float* %rt6, align 4;
	%r14 = fmul float %r12, %r13;
	%rt7 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt8 = load i8** %rt7;
	%rt9 = bitcast i8* %rt8 to i64*;
	%r15 = load i64* %rt9, align 8;
	%r16 = sext i32 %r4 to i64;
	%rt10 = sext i32 %r4 to i64;
	%r17 = mul i64 %rt10, 4;
	%r18 = add i64 %r15, %r17;
	%rt11 = inttoptr i64 %r18 to float*;
	store float %r14, float* %rt11, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r19 = bitcast i32 0 to i32;
	%rt12 = zext i32 %r19 to i64;
	%rt13 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt14 = load i8** %rt13;
	%rt15 = ptrtoint i8* %rt14 to i64;
	%rt16 = add i64 %rt12, %rt15;
	%rt17 = inttoptr i64 %rt16 to i32*;
	store i32 6, i32* %rt17, align 4;
	br label %exit;
exit:
	ret void;

}

(0.138596) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.138611) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.138623) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.138816) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_copyFromGlobal_opt3_ws1(%LLVMContext* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt0 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 0, i32 0
  %rt1 = load i32* %rt0
  %r0 = bitcast i32 %rt1 to i32
  %rt2 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 2, i32 0
  %rt3 = load i32* %rt2
  %r1 = bitcast i32 %rt3 to i32
  %rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 1, i32 0
  %rt5 = load i32* %rt4
  %r2 = bitcast i32 %rt5 to i32
  %r3 = mul i32 %r1, %r2
  %r4 = add i32 %r0, %r3
  %r5 = ashr i32 %r4, 31
  %r6 = bitcast i32 127 to i32
  %r7 = and i32 %r5, %r6
  %r8 = add i32 %r7, %r4
  %r9 = ashr i32 %r8, 7
  %r10 = mul i32 %r9, 128
  %r11 = sub i32 %r4, %r10
  %r12 = sitofp i32 %r11 to float
  %rt6 = bitcast float* @Pi to float*
  %r13 = load float* %rt6, align 4
  %r14 = fmul float %r12, %r13
  %rt7 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8
  %rt8 = load i8** %rt7
  %rt9 = bitcast i8* %rt8 to i64*
  %r15 = load i64* %rt9, align 8
  %r16 = sext i32 %r4 to i64
  %rt10 = sext i32 %r4 to i64
  %r17 = mul i64 %rt10, 4
  %r18 = add i64 %r15, %r17
  %rt11 = inttoptr i64 %r18 to float*
  store float %r14, float* %rt11, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r19 = bitcast i32 0 to i32
  %rt12 = zext i32 %r19 to i64
  %rt13 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4
  %rt14 = load i8** %rt13
  %rt15 = ptrtoint i8* %rt14 to i64
  %rt16 = add i64 %rt12, %rt15
  %rt17 = inttoptr i64 %rt16 to i32*
  store i32 6, i32* %rt17, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


(0.141135) LLVMState.cpp:52:   Bringing the LLVM JIT-Compiler online.
(0.141151) LLVMState.cpp:59:     initialized native target
(0.292673) LLVMState.cpp:68:     created engine builder
(0.292688) LLVMState.cpp:73:    The JIT is alive.
_Z_ocelotTranslated_copyFromGlobal_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext* %__ctaContext to %LLVMContext**
  %context.t0 = load %LLVMContext** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.threadId.x = getelementptr %LLVMContext* %context.t0, i64 0, i32 0, i32 0
  %threadId_x.0. = load i32* %ptr.threadId.x, align 4
  %ptr.blockDim.x = getelementptr %LLVMContext* %context.t0, i64 0, i32 1, i32 0
  %blockDim_x.0. = load i32* %ptr.blockDim.x, align 4
  %ptr.blockId.x = getelementptr %LLVMContext* %context.t0, i64 0, i32 2, i32 0
  %blockId_x.0. = load i32* %ptr.blockId.x, align 4
  %ptr.argMem. = getelementptr %LLVMContext* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %r3 = mul i32 %blockId_x.0., %blockDim_x.0.
  %r4 = add i32 %r3, %threadId_x.0.
  %r5 = ashr i32 %r4, 31
  %r7 = and i32 %r5, 127
  %r8 = add i32 %r7, %r4
  %r91 = and i32 %r8, -128
  %r11 = sub i32 %r4, %r91
  %r12 = sitofp i32 %r11 to float
  %r13 = load float* @Pi, align 4
  %r14 = fmul float %r12, %r13
  %rt9 = bitcast i8* %gridDimPtr.0. to i64*
  %r15 = load i64* %rt9, align 8
  %rt10 = sext i32 %r4 to i64
  %r17 = shl nsw i64 %rt10, 2
  %r18 = add i64 %r17, %r15
  %rt11 = inttoptr i64 %r18 to float*
  store float %r14, float* %rt11, align 4
  %rt17 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt17, align 4
  ret void

}
(0.325912) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.406754) LLVMDynamicTranslationCache.cpp:137:  inserting translation 0 with 152 bytes of local memory
Pass/Fail : Pass

INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestCudaMalloc 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestCudaMalloc
INFO     Test completed in 0.779019832611 seconds
INFO      It produced the following output:
test_malloc(256, 128)
PASSED
test_mallocArray(256, 128)
checking results from last cudaMemcpyFromArray
PASSED
[1] mallocing pitch
[2] memcpying2d
[3] memcpying
[4] checking for errors
[5] mallocing
[6] memcpying
[7] memcpying
[8] final free
Pass/Fail : Pass

INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestEmulator 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestEmulator
INFO     Test completed in 0.13544011116 seconds
INFO      It produced the following output:
Pass/Fail : Pass


Name : TestEmulator

Description: 


Test Seed : 1315863512
Test time : 0.0302494

Status : Test output:
10 registers
Register test passed
Load test passed
Store test passed
no errors
Full kernel test passed



INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestDeviceSwitching 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestDeviceSwitching
INFO     Test completed in 0.0657949447632 seconds
INFO      It produced the following output:
(0.011694) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - simpleKernels
(0.011722) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'increment'
(0.013149) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.013161) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_increment( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt0 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt1 = load i8** %rt0;
	%rt2 = bitcast i8* %rt1 to i64*;
	%r0 = load i64* %rt2, align 8;
	%rt3 = inttoptr i64 %r0 to i32*;
	%r1 = load i32* %rt3, align 4;
	%r2 = add i32 %r1, 1;
	%rt4 = inttoptr i64 %r0 to i32*;
	store i32 %r2, i32* %rt4, align 4;
	br label %$BB_1_0003;
$BB_1_0003:
	br i1 1, label %$BB_1_0003_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0003_entry:
	br label %$BB_1_0003;
$BB_1_0002_exit:
	ret void;
$BB_1_0003_exit:
	%r3 = bitcast i32 0 to i32;
	%rt5 = zext i32 %r3 to i64;
	%rt6 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt7 = load i8** %rt6;
	%rt8 = ptrtoint i8* %rt7 to i64;
	%rt9 = add i64 %rt5, %rt8;
	%rt10 = inttoptr i64 %rt9 to i32*;
	store i32 6, i32* %rt10, align 4;
	br label %exit;
exit:
	ret void;

}

(0.014310) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.014323) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.014332) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.014518) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_increment_opt3_ws1(%LLVMContext* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt0 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8
  %rt1 = load i8** %rt0
  %rt2 = bitcast i8* %rt1 to i64*
  %r0 = load i64* %rt2, align 8
  %rt3 = inttoptr i64 %r0 to i32*
  %r1 = load i32* %rt3, align 4
  %r2 = add i32 %r1, 1
  %rt4 = inttoptr i64 %r0 to i32*
  store i32 %r2, i32* %rt4, align 4
  br label %"$BB_1_0003"

"$BB_1_0003":                                     ; preds = %"$BB_1_0003_entry", %"$BB_1_0002"
  br i1 true, label %"$BB_1_0003_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0003_entry":                               ; No predecessors!
  br label %"$BB_1_0003"

"$BB_1_0002_exit":                                ; No predecessors!
  ret void

"$BB_1_0003_exit":                                ; preds = %"$BB_1_0003"
  %r3 = bitcast i32 0 to i32
  %rt5 = zext i32 %r3 to i64
  %rt6 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4
  %rt7 = load i8** %rt6
  %rt8 = ptrtoint i8* %rt7 to i64
  %rt9 = add i64 %rt5, %rt8
  %rt10 = inttoptr i64 %rt9 to i32*
  store i32 6, i32* %rt10, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0003_exit", %"$BB_1_0003"
  ret void
}


(0.016279) LLVMState.cpp:52:   Bringing the LLVM JIT-Compiler online.
(0.016298) LLVMState.cpp:59:     initialized native target
(0.017745) LLVMState.cpp:68:     created engine builder
(0.017757) LLVMState.cpp:73:    The JIT is alive.
_Z_ocelotTranslated_increment_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext* %__ctaContext to %LLVMContext**
  %context.t0 = load %LLVMContext** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr = getelementptr i8* %localMemPtr.0, i64 4
  %ptrEntryPoint = bitcast i8* %ptr to i32*
  %warpEntryId = load i32* %ptrEntryPoint, align 4
  %warpEntryPoint = and i32 %warpEntryId, 65535
  %cond = icmp eq i32 %warpEntryPoint, 1
  br i1 %cond, label %exit, label %"$BB_1_0002"

"$BB_1_0002":       // predecessors: { WarpSynchronousEntry,   }
  %ptr.argMem. = getelementptr %LLVMContext* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt2 = bitcast i8* %gridDimPtr.0. to i64*
  %r0 = load i64* %rt2, align 8
  %rt3 = inttoptr i64 %r0 to i32*
  %r1 = load i32* %rt3, align 4
  %r2 = add i32 %r1, 1
  store i32 %r2, i32* %rt3, align 4
  br label %exit

"exit":       // predecessors: { WarpSynchronousEntry,  $BB_1_0002,   }
  %rt10 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt10, align 4
  ret void

}
(0.020017) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.022205) LLVMDynamicTranslationCache.cpp:137:  inserting translation 0 with 24 bytes of local memory
Pass/Fail : Pass


Name : TestDeviceSwitching

Description: A unit test for the ability of the CUDA runtime to switch 
             between devices and use multiple threads Test Points: 1) In a single 
             threaded application, iterate across all devices launching the same 
             simple kernel each time 2) Test context migration support in 
             ocelot. Iterate across all devices, launching a simple kernel that 
             updates shared variable. Use the context switch mechanism to 
             migrate the shared data. 3) Test multi-threading support. Launch one 
             host thread to allocate memory, pass pointers to worker 
             threads, each of which should launch independent kernels in 
             parallel.


Test Seed : 1315863512
Test time : 0.0241401

Status : Test Point 1 Passed
Test Point 2 Passed
Test Point 3 Passed



INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestLLVMInstructions 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestLLVMInstructions
INFO     Test completed in 0.0328459739685 seconds
INFO      It produced the following output:
Pass/Fail : Pass


Name : TestLLVMInstructions

Description: A test for the assembly code generation and automatic 
             verfication of individual LLVM instructions. Test Points: 1) For each 
             instruction, generate several assembly strings using the 
             instruction's toString method, make sure that these pass the valid() 
             check, compare to references from the LLVM manual.


Test Seed : 1315863512
Test time : 0.000882387

Status :  Checked instruction "<result> = add i32 4, %var"
Add Instruction Passed
 Checked instruction "%ptr = alloca i32"
 Checked instruction "%ptr = alloca i32, i32 4"
 Checked instruction "%ptr = alloca i32, i32 4, align 1024"
 Checked instruction "%ptr = alloca i32, align 1024"
Alloca Instruction Passed
 Checked instruction "<result> = and i32 4, %var"
 Checked instruction "<result> = and i32 15, 40"
 Checked instruction "<result> = and i32 4, 8"
And Instruction Passed
 Checked instruction "<result> = ashr i32 4, 1"
 Checked instruction "<result> = ashr i8 -2, 1"
 Checked instruction "<result> = ashr < 2 x i32 > < i32 -2, i32 4 >, < i32 1, i32 3 >"
Ashr Instruction Passed
 Checked instruction "%X = bitcast i8 -1 to i8"
 Checked instruction "%Z = bitcast < 2 x i32 > %V to i64"
Bitcast Instruction Passed
 Checked instruction "br i1 %cond, label %IfEqual, label %IfUnequal"
Br Instruction Passed
 Checked instruction "%retval = call i32 @test(i32 %argc)"
 Checked instruction "call i32 (i8*, ...)* @printf(i8* %msg, i32 12, i8 42)"
 Checked instruction "%X = tail call i32 @foo()"
 Checked instruction "%Y = tail call fastcc i32 @foo()"
 Checked instruction "call void @foo(i8 97 signext)"
 Checked instruction "%r = call %struct.A @foo()"
 Checked instruction "call void @foo() noreturn"
 Checked instruction "%ZZ = call zeroext i32 @bar()"
Call Instruction Passed
 Checked instruction "%result = extractelement < 4 x i32 > %vec, i32 0"
Extractelement Instruction Passed
 Checked instruction "%result = extractvalue { i32, float } %agg, 0"
Extractvalue Instruction Passed
 Checked instruction "<result> = fadd float 0x4010000000000000, %var"
Fadd Instruction Passed
 Checked instruction "<result> = fcmp oeq float 0x4010000000000000, 0x4014000000000000"
 Checked instruction "<result> = fcmp one float 0x4010000000000000, 0x4014000000000000"
 Checked instruction "<result> = fcmp olt float 0x4010000000000000, 0x4014000000000000"
 Checked instruction "<result> = fcmp ueq float 0x3ff0000000000000, 0x4000000000000000"
Fcmp Instruction Passed
 Checked instruction "<result> = fdiv float 0x4010000000000000, %var"
Fdiv Instruction Passed
 Checked instruction "<result> = fmul float 0x4010000000000000, %var"
Fmul Instruction Passed
 Checked instruction "%X = fpext float 0x400921cac0000000 to double"
 Checked instruction "%Y = fpext float 0x3ff0000000000000 to float"
Fpext Instruction Passed
 Checked instruction "%X = fptosi double 0xc05ec00000000000 to i32"
Fptosi Instruction Passed
 Checked instruction "%X = fptoui double 0x405ec00000000000 to i32"
Fptoui Instruction Passed
 Checked instruction "%X = fptrunc double 0x405ec00000000000 to float"
Fptrunc Instruction Passed
 Checked instruction "free [ 4 x i8 ]* %array"
Free Instruction Passed
 Checked instruction "<result> = frem float 0x4010000000000000, %var"
Frem Instruction Passed
 Checked instruction "<result> = fsub float 0x0, %val"
Fsub Instruction Passed
 Checked instruction "%vptr = getelementptr { i32, < 2 x i8 > }* %svptr, i32 0, i32 1, i32 1"
 Checked instruction "%eptr = getelementptr [ 12 x i8 ]* %aptr, i32 0, i32 1"
Getelementptr Instruction Passed
 Checked instruction "<result> = icmp ne float* %X, %X"
Icmp Instruction Passed
 Checked instruction "%result = insertelement < 4 x i32 > %vec, i32 1, i32 0"
Insertelement Instruction Passed
 Checked instruction "%result = insertvalue { i32, float } %agg, i32 1, 0"
Insertvalue Instruction Passed
 Checked instruction "%Y = inttoptr i64 0 to i32*"
Inttoptr Instruction Passed
 Checked instruction "%retval = invoke i32 @Test(i32 15) to label %Continue unwind label %TestCleanup"
Invoke Instruction Passed
 Checked instruction "%val = load i32* %ptr"
Load Instruction Passed
 Checked instruction "<result> = lshr i8 -2, 1"
Lshr Instruction Passed
 Checked instruction "%array2 = malloc [ 12 x i8 ], i32 %size"
Malloc Instruction Passed
 Checked instruction "<result> = mul i32 4, %var"
Mul Instruction Passed
 Checked instruction "<result> = or i32 15, 40"
Or Instruction Passed
 Checked instruction "%indvar = phi i32 [ 0, %LoopHeader ], [ %nextindvar, %Loop ]"
Phi Instruction Passed
 Checked instruction "%Y = ptrtoint i32* %x to i64"
Prtoint Instruction Passed
 Checked instruction "ret void"
Ret Instruction Passed
 Checked instruction "<result> = sdiv i32 4, %var"
Sdiv Instruction Passed
 Checked instruction "%X = select i1 1, i8 17, i8 42"
Select Instruction Passed
 Checked instruction "%X = sext i8 -1 to i16"
Sext Instruction Passed
 Checked instruction "<result> = shl i32 1, 32"
Shl Instruction Passed
 Checked instruction "%result = shufflevector < 4 x i32 > %v1, < 4 x i32 > %v2, < 8 x i32 > < i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7 >"
ShuffleVector Instruction Passed
 Checked instruction "%X = sitofp i32 257 to float"
Sitofp Instruction Passed
 Checked instruction "<result> = srem i32 4, %var"
Srem Instruction Passed
 Checked instruction "store i32 3, i32* %ptr"
Store Instruction Passed
 Checked instruction "<result> = sub i32 4, %var"
Sub Instruction Passed
 Checked instruction "switch i32 %val, label %otherwise [ i32 0, label %onzero i32 1, label %onone i32 2, label %ontwo ]"
Switch Instruction Passed
 Checked instruction "%Y = trunc i32 123 to i1"
Trunc Instruction Passed
 Checked instruction "<result> = udiv i32 4, %var"
Udiv Instruction Passed
 Checked instruction "%Y = uitofp i8 -1 to double"
Uitofp Instruction Passed
 Checked instruction "unreachable"
Unreachable Instruction Passed
 Checked instruction "unwind"
Unwind Instruction Passed
 Checked instruction "<result> = urem i32 4, %var"
Urem Instruction Passed
 Checked instruction "%tmp = va_arg i8** %ap, i32"
VarArg Instruction Passed
 Checked instruction "<result> = xor i32 -1, %V"
Xor Instruction Passed
 Checked instruction "%X = zext i32 257 to i64"
Zext Instruction Passed



INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestFunctionCall 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestFunctionCall
INFO     Test completed in 0.0241930484772 seconds
INFO      It produced the following output:
(0.003370) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - simpleFunc.cu
(0.003400) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'square'
(0.003623) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'kernel'
(0.005408) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.005420) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_square( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 4;
	%rt3 = bitcast i8* %rt0 to float*;
	%r0 = load float* %rt3, align 4;
	%r1 = bitcast float %r0 to float;
	%r2 = fmul float %r1, %r1;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to float*;
	store float %r2, float* %rt6, align 4;
	%rt7 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt8 = load i8** %rt7;
	%rt9 = bitcast i8* %rt8 to i32*;
	store i32 2, i32* %rt9;
	br label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	ret void;
exit:
	ret void;

}

(0.006757) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.006771) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.006780) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.006968) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_square_opt3_ws1(%LLVMContext* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 4
  %rt3 = bitcast i8* %rt0 to float*
  %r0 = load float* %rt3, align 4
  %r1 = bitcast float %r0 to float
  %r2 = fmul float %r1, %r1
  %rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to float*
  store float %r2, float* %rt6, align 4
  %rt7 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4
  %rt8 = load i8** %rt7
  %rt9 = bitcast i8* %rt8 to i32*
  store i32 2, i32* %rt9
  br label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; No predecessors!
  ret void

exit:                                             ; preds = %"$BB_1_0002"
  ret void
}


(0.008096) LLVMState.cpp:52:   Bringing the LLVM JIT-Compiler online.
(0.008115) LLVMState.cpp:59:     initialized native target
(0.009720) LLVMState.cpp:68:     created engine builder
(0.009733) LLVMState.cpp:73:    The JIT is alive.
_Z_ocelotTranslated_square_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext* %__ctaContext to %LLVMContext**
  %context.t0 = load %LLVMContext** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 4
  %rt3 = bitcast i8* %rt0 to float*
  %r0 = load float* %rt3, align 4
  %r2 = fmul float %r0, %r0
  %rt6 = bitcast i8* %gridDimPtr.0. to float*
  store float %r2, float* %rt6, align 4
  %rt9 = bitcast i8* %localMemPtr.0 to i32*
  store i32 2, i32* %rt9, align 4
  ret void

}
TestFunctionCall: ocelot/executive/implementation/LLVMDynamicTranslationCache.cpp:1033: void executive::setupCallTargets(ir::PTXKernel&, const executive::LLVMDynamicTranslationCache&): Assertion `0 && "arbitrary function calls not yet supported"' failed.
(0.011519) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.013395) LLVMDynamicTranslationCache.cpp:137:  inserting translation 0 with 24 bytes of local memory

INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestCudaTexture2D 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestPTXAssembly
INFO     Test completed in 2.68222904205 seconds
INFO      It produced the following output:
(0.004716) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestVectorElements-u32
(0.004740) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(0.006537) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.006550) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt8 = inttoptr i64 %r0 to < 4 x i32 >*;
	%rt7 = load < 4 x i32 >* %rt8, align 16;
	%r2 = extractelement < 4 x i32 > %rt7, i32 0;
	%r3 = extractelement < 4 x i32 > %rt7, i32 1;
	%r4 = extractelement < 4 x i32 > %rt7, i32 2;
	%r5 = extractelement < 4 x i32 > %rt7, i32 3;
	%r6 = bitcast i32 %r3 to i32;
	%r7 = bitcast i32 %r4 to i32;
	%r8 = bitcast i32 %r5 to i32;
	%r9 = bitcast i32 %r2 to i32;
	%rt9 = inttoptr i64 %r1 to < 4 x i32 >*;
	%rt10 = insertelement < 4 x i32 > < i32 0, i32 0, i32 0, i32 0 >, i32 %r6, i32 0;
	%rt11 = insertelement < 4 x i32 > %rt10, i32 %r7, i32 1;
	%rt12 = insertelement < 4 x i32 > %rt11, i32 %r8, i32 2;
	%rt13 = insertelement < 4 x i32 > %rt12, i32 %r9, i32 3;
	store < 4 x i32 > %rt13, < 4 x i32 >* %rt9, align 16;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r10 = bitcast i32 0 to i32;
	%rt14 = zext i32 %r10 to i64;
	%rt15 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt16 = load i8** %rt15;
	%rt17 = ptrtoint i8* %rt16 to i64;
	%rt18 = add i64 %rt14, %rt17;
	%rt19 = inttoptr i64 %rt18 to i32*;
	store i32 6, i32* %rt19, align 4;
	br label %exit;
exit:
	ret void;

}

(0.007769) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.007781) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.007789) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.007976) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt8 = inttoptr i64 %r0 to <4 x i32>*
  %rt7 = load <4 x i32>* %rt8, align 16
  %r2 = extractelement <4 x i32> %rt7, i32 0
  %r3 = extractelement <4 x i32> %rt7, i32 1
  %r4 = extractelement <4 x i32> %rt7, i32 2
  %r5 = extractelement <4 x i32> %rt7, i32 3
  %r6 = bitcast i32 %r3 to i32
  %r7 = bitcast i32 %r4 to i32
  %r8 = bitcast i32 %r5 to i32
  %r9 = bitcast i32 %r2 to i32
  %rt9 = inttoptr i64 %r1 to <4 x i32>*
  %rt10 = insertelement <4 x i32> zeroinitializer, i32 %r6, i32 0
  %rt11 = insertelement <4 x i32> %rt10, i32 %r7, i32 1
  %rt12 = insertelement <4 x i32> %rt11, i32 %r8, i32 2
  %rt13 = insertelement <4 x i32> %rt12, i32 %r9, i32 3
  store <4 x i32> %rt13, <4 x i32>* %rt9, align 16
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r10 = bitcast i32 0 to i32
  %rt14 = zext i32 %r10 to i64
  %rt15 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4
  %rt16 = load i8** %rt15
  %rt17 = ptrtoint i8* %rt16 to i64
  %rt18 = add i64 %rt14, %rt17
  %rt19 = inttoptr i64 %rt18 to i32*
  store i32 6, i32* %rt19, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


(0.010220) LLVMState.cpp:52:   Bringing the LLVM JIT-Compiler online.
(0.010236) LLVMState.cpp:59:     initialized native target
(0.011687) LLVMState.cpp:68:     created engine builder
(0.011701) LLVMState.cpp:73:    The JIT is alive.
_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext* %__ctaContext to %LLVMContext**
  %context.t0 = load %LLVMContext** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt8 = inttoptr i64 %r0 to <4 x i32>*
  %rt7 = load <4 x i32>* %rt8, align 16
  %rt9 = inttoptr i64 %r1 to <4 x i32>*
  %rt13 = shufflevector <4 x i32> %rt7, <4 x i32> undef, <4 x i32> <i32 1, i32 2, i32 3, i32 0>
  store <4 x i32> %rt13, <4 x i32>* %rt9, align 16
  %rt19 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt19, align 4
  ret void

}
(0.013626) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.015474) LLVMDynamicTranslationCache.cpp:137:  inserting translation 0 with 80 bytes of local memory
(0.028398) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestAdd-u16
(0.028411) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(0.029743) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.029754) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i16*;
	%r2 = load i16* %rt7, align 2;
	%rt8 = add i64 %r0, 2;
	%rt9 = inttoptr i64 %rt8 to i16*;
	%r3 = load i16* %rt9, align 2;
	%r4 = add i16 %r2, %r3;
	%rt10 = inttoptr i64 %r1 to i16*;
	store i16 %r4, i16* %rt10, align 2;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt11 = zext i32 %r5 to i64;
	%rt12 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt13 = load i8** %rt12;
	%rt14 = ptrtoint i8* %rt13 to i64;
	%rt15 = add i64 %rt11, %rt14;
	%rt16 = inttoptr i64 %rt15 to i32*;
	store i32 6, i32* %rt16, align 4;
	br label %exit;
exit:
	ret void;

}

(0.030683) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.030695) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.030718) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.030905) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.0* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.0* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.0* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %r4 = add i16 %r2, %r3
  %rt10 = inttoptr i64 %r1 to i16*
  store i16 %r4, i16* %rt10, align 2
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt11 = zext i32 %r5 to i64
  %rt12 = getelementptr %LLVMContext.0* %__ctaContext, i32 0, i32 4
  %rt13 = load i8** %rt12
  %rt14 = ptrtoint i8* %rt13 to i64
  %rt15 = add i64 %rt11, %rt14
  %rt16 = inttoptr i64 %rt15 to i32*
  store i32 6, i32* %rt16, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.0* %__ctaContext to %LLVMContext.0**
  %context.t0 = load %LLVMContext.0** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.0* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.0* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %r4 = add i16 %r3, %r2
  %rt10 = inttoptr i64 %r1 to i16*
  store i16 %r4, i16* %rt10, align 2
  %rt16 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt16, align 4
  ret void

}
(0.033852) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.034938) LLVMDynamicTranslationCache.cpp:137:  inserting translation 65536 with 40 bytes of local memory
(0.052621) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestAdd-s16
(0.052633) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(0.053901) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.053912) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i16*;
	%r2 = load i16* %rt7, align 2;
	%rt8 = add i64 %r0, 2;
	%rt9 = inttoptr i64 %rt8 to i16*;
	%r3 = load i16* %rt9, align 2;
	%r4 = add i16 %r2, %r3;
	%rt10 = inttoptr i64 %r1 to i16*;
	store i16 %r4, i16* %rt10, align 2;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt11 = zext i32 %r5 to i64;
	%rt12 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt13 = load i8** %rt12;
	%rt14 = ptrtoint i8* %rt13 to i64;
	%rt15 = add i64 %rt11, %rt14;
	%rt16 = inttoptr i64 %rt15 to i32*;
	store i32 6, i32* %rt16, align 4;
	br label %exit;
exit:
	ret void;

}

(0.054776) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.054788) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.054811) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.054998) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.2* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.2* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.2* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %r4 = add i16 %r2, %r3
  %rt10 = inttoptr i64 %r1 to i16*
  store i16 %r4, i16* %rt10, align 2
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt11 = zext i32 %r5 to i64
  %rt12 = getelementptr %LLVMContext.2* %__ctaContext, i32 0, i32 4
  %rt13 = load i8** %rt12
  %rt14 = ptrtoint i8* %rt13 to i64
  %rt15 = add i64 %rt11, %rt14
  %rt16 = inttoptr i64 %rt15 to i32*
  store i32 6, i32* %rt16, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.2* %__ctaContext to %LLVMContext.2**
  %context.t0 = load %LLVMContext.2** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.2* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.2* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %r4 = add i16 %r3, %r2
  %rt10 = inttoptr i64 %r1 to i16*
  store i16 %r4, i16* %rt10, align 2
  %rt16 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt16, align 4
  ret void

}
(0.057886) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.058881) LLVMDynamicTranslationCache.cpp:137:  inserting translation 131072 with 40 bytes of local memory
(0.076414) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestAdd-u32
(0.076425) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(0.077691) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.077702) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = add i64 %r0, 4;
	%rt9 = inttoptr i64 %rt8 to i32*;
	%r3 = load i32* %rt9, align 4;
	%r4 = add i32 %r2, %r3;
	%rt10 = inttoptr i64 %r1 to i32*;
	store i32 %r4, i32* %rt10, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt11 = zext i32 %r5 to i64;
	%rt12 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt13 = load i8** %rt12;
	%rt14 = ptrtoint i8* %rt13 to i64;
	%rt15 = add i64 %rt11, %rt14;
	%rt16 = inttoptr i64 %rt15 to i32*;
	store i32 6, i32* %rt16, align 4;
	br label %exit;
exit:
	ret void;

}

(0.078568) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.078579) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.078602) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.078791) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.4* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.4* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.4* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %r4 = add i32 %r2, %r3
  %rt10 = inttoptr i64 %r1 to i32*
  store i32 %r4, i32* %rt10, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt11 = zext i32 %r5 to i64
  %rt12 = getelementptr %LLVMContext.4* %__ctaContext, i32 0, i32 4
  %rt13 = load i8** %rt12
  %rt14 = ptrtoint i8* %rt13 to i64
  %rt15 = add i64 %rt11, %rt14
  %rt16 = inttoptr i64 %rt15 to i32*
  store i32 6, i32* %rt16, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.4* %__ctaContext to %LLVMContext.4**
  %context.t0 = load %LLVMContext.4** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.4* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.4* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %r4 = add i32 %r3, %r2
  %rt10 = inttoptr i64 %r1 to i32*
  store i32 %r4, i32* %rt10, align 4
  %rt16 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt16, align 4
  ret void

}
(0.081636) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.082622) LLVMDynamicTranslationCache.cpp:137:  inserting translation 196608 with 40 bytes of local memory
(0.100161) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestAdd-s32
(0.100173) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(0.101431) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.101443) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = add i64 %r0, 4;
	%rt9 = inttoptr i64 %rt8 to i32*;
	%r3 = load i32* %rt9, align 4;
	%r4 = add i32 %r2, %r3;
	%rt10 = inttoptr i64 %r1 to i32*;
	store i32 %r4, i32* %rt10, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt11 = zext i32 %r5 to i64;
	%rt12 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt13 = load i8** %rt12;
	%rt14 = ptrtoint i8* %rt13 to i64;
	%rt15 = add i64 %rt11, %rt14;
	%rt16 = inttoptr i64 %rt15 to i32*;
	store i32 6, i32* %rt16, align 4;
	br label %exit;
exit:
	ret void;

}

(0.102308) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.102319) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.102343) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.102531) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.6* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.6* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.6* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %r4 = add i32 %r2, %r3
  %rt10 = inttoptr i64 %r1 to i32*
  store i32 %r4, i32* %rt10, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt11 = zext i32 %r5 to i64
  %rt12 = getelementptr %LLVMContext.6* %__ctaContext, i32 0, i32 4
  %rt13 = load i8** %rt12
  %rt14 = ptrtoint i8* %rt13 to i64
  %rt15 = add i64 %rt11, %rt14
  %rt16 = inttoptr i64 %rt15 to i32*
  store i32 6, i32* %rt16, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.6* %__ctaContext to %LLVMContext.6**
  %context.t0 = load %LLVMContext.6** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.6* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.6* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %r4 = add i32 %r3, %r2
  %rt10 = inttoptr i64 %r1 to i32*
  store i32 %r4, i32* %rt10, align 4
  %rt16 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt16, align 4
  ret void

}
(0.105405) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.106414) LLVMDynamicTranslationCache.cpp:137:  inserting translation 262144 with 40 bytes of local memory
(0.123909) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestAdd-s32-sat
(0.123921) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(0.125252) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.125263) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = add i64 %r0, 4;
	%rt9 = inttoptr i64 %rt8 to i32*;
	%r3 = load i32* %rt9, align 4;
	%rt10 = sext i32 %r2 to i64;
	%rt11 = sext i32 %r3 to i64;
	%rt12 = add i64 %rt10, %rt11;
	%rt13 = icmp slt i64 %rt12, -2147483648;
	%rt14 = select i1 %rt13, i64 -2147483648, i64 %rt12;
	%rt15 = icmp sgt i64 %rt14, 2147483647;
	%rt16 = select i1 %rt15, i64 2147483647, i64 %rt14;
	%r4 = trunc i64 %rt16 to i32;
	%rt17 = inttoptr i64 %r1 to i32*;
	store i32 %r4, i32* %rt17, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt18 = zext i32 %r5 to i64;
	%rt19 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt20 = load i8** %rt19;
	%rt21 = ptrtoint i8* %rt20 to i64;
	%rt22 = add i64 %rt18, %rt21;
	%rt23 = inttoptr i64 %rt22 to i32*;
	store i32 6, i32* %rt23, align 4;
	br label %exit;
exit:
	ret void;

}

(0.126176) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.126187) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.126196) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.126405) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.8* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.8* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.8* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = sext i32 %r2 to i64
  %rt11 = sext i32 %r3 to i64
  %rt12 = add i64 %rt10, %rt11
  %rt13 = icmp slt i64 %rt12, -2147483648
  %rt14 = select i1 %rt13, i64 -2147483648, i64 %rt12
  %rt15 = icmp sgt i64 %rt14, 2147483647
  %rt16 = select i1 %rt15, i64 2147483647, i64 %rt14
  %r4 = trunc i64 %rt16 to i32
  %rt17 = inttoptr i64 %r1 to i32*
  store i32 %r4, i32* %rt17, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt18 = zext i32 %r5 to i64
  %rt19 = getelementptr %LLVMContext.8* %__ctaContext, i32 0, i32 4
  %rt20 = load i8** %rt19
  %rt21 = ptrtoint i8* %rt20 to i64
  %rt22 = add i64 %rt18, %rt21
  %rt23 = inttoptr i64 %rt22 to i32*
  store i32 6, i32* %rt23, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.8* %__ctaContext to %LLVMContext.8**
  %context.t0 = load %LLVMContext.8** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.8* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.8* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = sext i32 %r2 to i64
  %rt11 = sext i32 %r3 to i64
  %rt12 = add i64 %rt11, %rt10
  %rt13 = icmp slt i64 %rt12, -2147483648
  %rt14 = select i1 %rt13, i64 -2147483648, i64 %rt12
  %rt15 = icmp sgt i64 %rt14, 2147483647
  %0 = trunc i64 %rt14 to i32
  %r4 = select i1 %rt15, i32 2147483647, i32 %0
  %rt17 = inttoptr i64 %r1 to i32*
  store i32 %r4, i32* %rt17, align 4
  %rt23 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt23, align 4
  ret void

}
(0.129928) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.131255) LLVMDynamicTranslationCache.cpp:137:  inserting translation 327680 with 40 bytes of local memory
(0.148057) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestAdd-u64
(0.148069) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(0.149324) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.149335) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i64*;
	%r2 = load i64* %rt7, align 8;
	%rt8 = add i64 %r0, 8;
	%rt9 = inttoptr i64 %rt8 to i64*;
	%r3 = load i64* %rt9, align 8;
	%r4 = add i64 %r2, %r3;
	%rt10 = inttoptr i64 %r1 to i64*;
	store i64 %r4, i64* %rt10, align 8;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt11 = zext i32 %r5 to i64;
	%rt12 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt13 = load i8** %rt12;
	%rt14 = ptrtoint i8* %rt13 to i64;
	%rt15 = add i64 %rt11, %rt14;
	%rt16 = inttoptr i64 %rt15 to i32*;
	store i32 6, i32* %rt16, align 4;
	br label %exit;
exit:
	ret void;

}

(0.150216) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.150227) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.150251) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.150438) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.10* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.10* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.10* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %r4 = add i64 %r2, %r3
  %rt10 = inttoptr i64 %r1 to i64*
  store i64 %r4, i64* %rt10, align 8
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt11 = zext i32 %r5 to i64
  %rt12 = getelementptr %LLVMContext.10* %__ctaContext, i32 0, i32 4
  %rt13 = load i8** %rt12
  %rt14 = ptrtoint i8* %rt13 to i64
  %rt15 = add i64 %rt11, %rt14
  %rt16 = inttoptr i64 %rt15 to i32*
  store i32 6, i32* %rt16, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.10* %__ctaContext to %LLVMContext.10**
  %context.t0 = load %LLVMContext.10** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.10* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.10* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %r4 = add i64 %r3, %r2
  %rt10 = inttoptr i64 %r1 to i64*
  store i64 %r4, i64* %rt10, align 8
  %rt16 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt16, align 4
  ret void

}
(0.153320) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.154304) LLVMDynamicTranslationCache.cpp:137:  inserting translation 393216 with 40 bytes of local memory
(0.171812) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestAdd-s64
(0.171824) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(0.173076) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.173087) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i64*;
	%r2 = load i64* %rt7, align 8;
	%rt8 = add i64 %r0, 8;
	%rt9 = inttoptr i64 %rt8 to i64*;
	%r3 = load i64* %rt9, align 8;
	%r4 = add i64 %r2, %r3;
	%rt10 = inttoptr i64 %r1 to i64*;
	store i64 %r4, i64* %rt10, align 8;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt11 = zext i32 %r5 to i64;
	%rt12 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt13 = load i8** %rt12;
	%rt14 = ptrtoint i8* %rt13 to i64;
	%rt15 = add i64 %rt11, %rt14;
	%rt16 = inttoptr i64 %rt15 to i32*;
	store i32 6, i32* %rt16, align 4;
	br label %exit;
exit:
	ret void;

}

(0.173954) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.173965) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.173988) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.174176) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.12* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.12* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.12* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %r4 = add i64 %r2, %r3
  %rt10 = inttoptr i64 %r1 to i64*
  store i64 %r4, i64* %rt10, align 8
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt11 = zext i32 %r5 to i64
  %rt12 = getelementptr %LLVMContext.12* %__ctaContext, i32 0, i32 4
  %rt13 = load i8** %rt12
  %rt14 = ptrtoint i8* %rt13 to i64
  %rt15 = add i64 %rt11, %rt14
  %rt16 = inttoptr i64 %rt15 to i32*
  store i32 6, i32* %rt16, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.12* %__ctaContext to %LLVMContext.12**
  %context.t0 = load %LLVMContext.12** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.12* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.12* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %r4 = add i64 %r3, %r2
  %rt10 = inttoptr i64 %r1 to i64*
  store i64 %r4, i64* %rt10, align 8
  %rt16 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt16, align 4
  ret void

}
(0.177085) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.178060) LLVMDynamicTranslationCache.cpp:137:  inserting translation 458752 with 40 bytes of local memory
(0.195507) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestSub-u16
(0.195519) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(0.196802) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.196813) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i16*;
	%r2 = load i16* %rt7, align 2;
	%rt8 = add i64 %r0, 2;
	%rt9 = inttoptr i64 %rt8 to i16*;
	%r3 = load i16* %rt9, align 2;
	%r4 = sub i16 %r2, %r3;
	%rt10 = inttoptr i64 %r1 to i16*;
	store i16 %r4, i16* %rt10, align 2;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt11 = zext i32 %r5 to i64;
	%rt12 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt13 = load i8** %rt12;
	%rt14 = ptrtoint i8* %rt13 to i64;
	%rt15 = add i64 %rt11, %rt14;
	%rt16 = inttoptr i64 %rt15 to i32*;
	store i32 6, i32* %rt16, align 4;
	br label %exit;
exit:
	ret void;

}

(0.197672) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.197683) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.197706) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.197894) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.14* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.14* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.14* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %r4 = sub i16 %r2, %r3
  %rt10 = inttoptr i64 %r1 to i16*
  store i16 %r4, i16* %rt10, align 2
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt11 = zext i32 %r5 to i64
  %rt12 = getelementptr %LLVMContext.14* %__ctaContext, i32 0, i32 4
  %rt13 = load i8** %rt12
  %rt14 = ptrtoint i8* %rt13 to i64
  %rt15 = add i64 %rt11, %rt14
  %rt16 = inttoptr i64 %rt15 to i32*
  store i32 6, i32* %rt16, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.14* %__ctaContext to %LLVMContext.14**
  %context.t0 = load %LLVMContext.14** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.14* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.14* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %r4 = sub i16 %r2, %r3
  %rt10 = inttoptr i64 %r1 to i16*
  store i16 %r4, i16* %rt10, align 2
  %rt16 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt16, align 4
  ret void

}
(0.200759) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.201730) LLVMDynamicTranslationCache.cpp:137:  inserting translation 524288 with 40 bytes of local memory
(0.219298) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestSub-s16
(0.219309) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(0.220564) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.220575) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i16*;
	%r2 = load i16* %rt7, align 2;
	%rt8 = add i64 %r0, 2;
	%rt9 = inttoptr i64 %rt8 to i16*;
	%r3 = load i16* %rt9, align 2;
	%r4 = sub i16 %r2, %r3;
	%rt10 = inttoptr i64 %r1 to i16*;
	store i16 %r4, i16* %rt10, align 2;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt11 = zext i32 %r5 to i64;
	%rt12 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt13 = load i8** %rt12;
	%rt14 = ptrtoint i8* %rt13 to i64;
	%rt15 = add i64 %rt11, %rt14;
	%rt16 = inttoptr i64 %rt15 to i32*;
	store i32 6, i32* %rt16, align 4;
	br label %exit;
exit:
	ret void;

}

(0.221455) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.221466) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.221489) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.221676) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.16* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.16* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.16* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %r4 = sub i16 %r2, %r3
  %rt10 = inttoptr i64 %r1 to i16*
  store i16 %r4, i16* %rt10, align 2
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt11 = zext i32 %r5 to i64
  %rt12 = getelementptr %LLVMContext.16* %__ctaContext, i32 0, i32 4
  %rt13 = load i8** %rt12
  %rt14 = ptrtoint i8* %rt13 to i64
  %rt15 = add i64 %rt11, %rt14
  %rt16 = inttoptr i64 %rt15 to i32*
  store i32 6, i32* %rt16, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.16* %__ctaContext to %LLVMContext.16**
  %context.t0 = load %LLVMContext.16** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.16* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.16* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %r4 = sub i16 %r2, %r3
  %rt10 = inttoptr i64 %r1 to i16*
  store i16 %r4, i16* %rt10, align 2
  %rt16 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt16, align 4
  ret void

}
(0.224570) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.225535) LLVMDynamicTranslationCache.cpp:137:  inserting translation 589824 with 40 bytes of local memory
(0.243117) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestSub-u32
(0.243129) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(0.244529) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.244544) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = add i64 %r0, 4;
	%rt9 = inttoptr i64 %rt8 to i32*;
	%r3 = load i32* %rt9, align 4;
	%r4 = sub i32 %r2, %r3;
	%rt10 = inttoptr i64 %r1 to i32*;
	store i32 %r4, i32* %rt10, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt11 = zext i32 %r5 to i64;
	%rt12 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt13 = load i8** %rt12;
	%rt14 = ptrtoint i8* %rt13 to i64;
	%rt15 = add i64 %rt11, %rt14;
	%rt16 = inttoptr i64 %rt15 to i32*;
	store i32 6, i32* %rt16, align 4;
	br label %exit;
exit:
	ret void;

}

(0.245444) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.245456) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.245478) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.245667) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.18* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.18* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.18* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %r4 = sub i32 %r2, %r3
  %rt10 = inttoptr i64 %r1 to i32*
  store i32 %r4, i32* %rt10, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt11 = zext i32 %r5 to i64
  %rt12 = getelementptr %LLVMContext.18* %__ctaContext, i32 0, i32 4
  %rt13 = load i8** %rt12
  %rt14 = ptrtoint i8* %rt13 to i64
  %rt15 = add i64 %rt11, %rt14
  %rt16 = inttoptr i64 %rt15 to i32*
  store i32 6, i32* %rt16, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.18* %__ctaContext to %LLVMContext.18**
  %context.t0 = load %LLVMContext.18** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.18* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.18* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %r4 = sub i32 %r2, %r3
  %rt10 = inttoptr i64 %r1 to i32*
  store i32 %r4, i32* %rt10, align 4
  %rt16 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt16, align 4
  ret void

}
(0.248617) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.249656) LLVMDynamicTranslationCache.cpp:137:  inserting translation 655360 with 40 bytes of local memory
(0.267345) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestSub-s32
(0.267357) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(0.268631) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.268642) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = add i64 %r0, 4;
	%rt9 = inttoptr i64 %rt8 to i32*;
	%r3 = load i32* %rt9, align 4;
	%r4 = sub i32 %r2, %r3;
	%rt10 = inttoptr i64 %r1 to i32*;
	store i32 %r4, i32* %rt10, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt11 = zext i32 %r5 to i64;
	%rt12 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt13 = load i8** %rt12;
	%rt14 = ptrtoint i8* %rt13 to i64;
	%rt15 = add i64 %rt11, %rt14;
	%rt16 = inttoptr i64 %rt15 to i32*;
	store i32 6, i32* %rt16, align 4;
	br label %exit;
exit:
	ret void;

}

(0.269515) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.269526) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.269549) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.269737) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.20* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.20* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.20* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %r4 = sub i32 %r2, %r3
  %rt10 = inttoptr i64 %r1 to i32*
  store i32 %r4, i32* %rt10, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt11 = zext i32 %r5 to i64
  %rt12 = getelementptr %LLVMContext.20* %__ctaContext, i32 0, i32 4
  %rt13 = load i8** %rt12
  %rt14 = ptrtoint i8* %rt13 to i64
  %rt15 = add i64 %rt11, %rt14
  %rt16 = inttoptr i64 %rt15 to i32*
  store i32 6, i32* %rt16, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.20* %__ctaContext to %LLVMContext.20**
  %context.t0 = load %LLVMContext.20** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.20* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.20* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %r4 = sub i32 %r2, %r3
  %rt10 = inttoptr i64 %r1 to i32*
  store i32 %r4, i32* %rt10, align 4
  %rt16 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt16, align 4
  ret void

}
(0.272611) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.273599) LLVMDynamicTranslationCache.cpp:137:  inserting translation 720896 with 40 bytes of local memory
(0.291279) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestSub-s32-sat
(0.291291) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(0.292620) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.292631) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = add i64 %r0, 4;
	%rt9 = inttoptr i64 %rt8 to i32*;
	%r3 = load i32* %rt9, align 4;
	%rt10 = sext i32 %r2 to i64;
	%rt11 = sext i32 %r3 to i64;
	%rt12 = sub i64 %rt10, %rt11;
	%rt13 = icmp slt i64 %rt12, -2147483648;
	%rt14 = select i1 %rt13, i64 -2147483648, i64 %rt12;
	%rt15 = icmp sgt i64 %rt14, 2147483647;
	%rt16 = select i1 %rt15, i64 2147483647, i64 %rt14;
	%r4 = trunc i64 %rt16 to i32;
	%rt17 = inttoptr i64 %r1 to i32*;
	store i32 %r4, i32* %rt17, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt18 = zext i32 %r5 to i64;
	%rt19 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt20 = load i8** %rt19;
	%rt21 = ptrtoint i8* %rt20 to i64;
	%rt22 = add i64 %rt18, %rt21;
	%rt23 = inttoptr i64 %rt22 to i32*;
	store i32 6, i32* %rt23, align 4;
	br label %exit;
exit:
	ret void;

}

(0.293543) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.293555) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.293563) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.293750) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.22* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.22* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.22* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = sext i32 %r2 to i64
  %rt11 = sext i32 %r3 to i64
  %rt12 = sub i64 %rt10, %rt11
  %rt13 = icmp slt i64 %rt12, -2147483648
  %rt14 = select i1 %rt13, i64 -2147483648, i64 %rt12
  %rt15 = icmp sgt i64 %rt14, 2147483647
  %rt16 = select i1 %rt15, i64 2147483647, i64 %rt14
  %r4 = trunc i64 %rt16 to i32
  %rt17 = inttoptr i64 %r1 to i32*
  store i32 %r4, i32* %rt17, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt18 = zext i32 %r5 to i64
  %rt19 = getelementptr %LLVMContext.22* %__ctaContext, i32 0, i32 4
  %rt20 = load i8** %rt19
  %rt21 = ptrtoint i8* %rt20 to i64
  %rt22 = add i64 %rt18, %rt21
  %rt23 = inttoptr i64 %rt22 to i32*
  store i32 6, i32* %rt23, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.22* %__ctaContext to %LLVMContext.22**
  %context.t0 = load %LLVMContext.22** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.22* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.22* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = sext i32 %r2 to i64
  %rt11 = sext i32 %r3 to i64
  %rt12 = sub i64 %rt10, %rt11
  %rt13 = icmp slt i64 %rt12, -2147483648
  %rt14 = select i1 %rt13, i64 -2147483648, i64 %rt12
  %rt15 = icmp sgt i64 %rt14, 2147483647
  %0 = trunc i64 %rt14 to i32
  %r4 = select i1 %rt15, i32 2147483647, i32 %0
  %rt17 = inttoptr i64 %r1 to i32*
  store i32 %r4, i32* %rt17, align 4
  %rt23 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt23, align 4
  ret void

}
(0.297219) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.298453) LLVMDynamicTranslationCache.cpp:137:  inserting translation 786432 with 40 bytes of local memory
(0.315564) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestSub-u64
(0.315577) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(0.316890) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.316901) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i64*;
	%r2 = load i64* %rt7, align 8;
	%rt8 = add i64 %r0, 8;
	%rt9 = inttoptr i64 %rt8 to i64*;
	%r3 = load i64* %rt9, align 8;
	%r4 = sub i64 %r2, %r3;
	%rt10 = inttoptr i64 %r1 to i64*;
	store i64 %r4, i64* %rt10, align 8;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt11 = zext i32 %r5 to i64;
	%rt12 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt13 = load i8** %rt12;
	%rt14 = ptrtoint i8* %rt13 to i64;
	%rt15 = add i64 %rt11, %rt14;
	%rt16 = inttoptr i64 %rt15 to i32*;
	store i32 6, i32* %rt16, align 4;
	br label %exit;
exit:
	ret void;

}

(0.317787) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.317799) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.317823) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.318011) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.24* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.24* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.24* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %r4 = sub i64 %r2, %r3
  %rt10 = inttoptr i64 %r1 to i64*
  store i64 %r4, i64* %rt10, align 8
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt11 = zext i32 %r5 to i64
  %rt12 = getelementptr %LLVMContext.24* %__ctaContext, i32 0, i32 4
  %rt13 = load i8** %rt12
  %rt14 = ptrtoint i8* %rt13 to i64
  %rt15 = add i64 %rt11, %rt14
  %rt16 = inttoptr i64 %rt15 to i32*
  store i32 6, i32* %rt16, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.24* %__ctaContext to %LLVMContext.24**
  %context.t0 = load %LLVMContext.24** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.24* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.24* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %r4 = sub i64 %r2, %r3
  %rt10 = inttoptr i64 %r1 to i64*
  store i64 %r4, i64* %rt10, align 8
  %rt16 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt16, align 4
  ret void

}
(0.320930) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.322031) LLVMDynamicTranslationCache.cpp:137:  inserting translation 851968 with 40 bytes of local memory
(0.339752) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestSub-s64
(0.339764) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(0.341035) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.341046) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i64*;
	%r2 = load i64* %rt7, align 8;
	%rt8 = add i64 %r0, 8;
	%rt9 = inttoptr i64 %rt8 to i64*;
	%r3 = load i64* %rt9, align 8;
	%r4 = sub i64 %r2, %r3;
	%rt10 = inttoptr i64 %r1 to i64*;
	store i64 %r4, i64* %rt10, align 8;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt11 = zext i32 %r5 to i64;
	%rt12 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt13 = load i8** %rt12;
	%rt14 = ptrtoint i8* %rt13 to i64;
	%rt15 = add i64 %rt11, %rt14;
	%rt16 = inttoptr i64 %rt15 to i32*;
	store i32 6, i32* %rt16, align 4;
	br label %exit;
exit:
	ret void;

}

(0.341926) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.341937) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.341960) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.342148) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.26* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.26* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.26* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %r4 = sub i64 %r2, %r3
  %rt10 = inttoptr i64 %r1 to i64*
  store i64 %r4, i64* %rt10, align 8
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt11 = zext i32 %r5 to i64
  %rt12 = getelementptr %LLVMContext.26* %__ctaContext, i32 0, i32 4
  %rt13 = load i8** %rt12
  %rt14 = ptrtoint i8* %rt13 to i64
  %rt15 = add i64 %rt11, %rt14
  %rt16 = inttoptr i64 %rt15 to i32*
  store i32 6, i32* %rt16, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.26* %__ctaContext to %LLVMContext.26**
  %context.t0 = load %LLVMContext.26** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.26* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.26* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %r4 = sub i64 %r2, %r3
  %rt10 = inttoptr i64 %r1 to i64*
  store i64 %r4, i64* %rt10, align 8
  %rt16 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt16, align 4
  ret void

}
(0.345016) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.346011) LLVMDynamicTranslationCache.cpp:137:  inserting translation 917504 with 40 bytes of local memory
(0.363725) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestSub-Carry-s32
(0.363736) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(0.365235) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.365247) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = add i64 %r0, 4;
	%rt9 = inttoptr i64 %rt8 to i32*;
	%r3 = load i32* %rt9, align 4;
	%rt10 = sub i32 0, %r2;
	%r5 = add i32 %r3, %rt10;
	%rt11 = icmp ult i32 %r5, %r3;
	%rt12 = icmp ult i32 %r5, %rt10;
	%rt13 = or i1 %rt11, %rt12;
	%r4 = select i1 %rt13, i32 1, i32 0;
	%rt14 = sub i32 0, %r2;
	%rt15 = add i32 %r5, %rt14;
	%rt16 = add i32 %rt15, %r4;
	%r7 = sub i32 %rt16, 1;
	%rt17 = icmp ult i32 %r7, %r5;
	%rt18 = icmp ult i32 %r7, %rt14;
	%rt19 = or i1 %rt17, %rt18;
	%r6 = select i1 %rt19, i32 1, i32 0;
	%rt20 = sub i32 0, %r2;
	%rt21 = add i32 %r7, %rt20;
	%rt22 = add i32 %rt21, %r6;
	%r8 = sub i32 %rt22, 1;
	%rt23 = inttoptr i64 %r1 to i32*;
	store i32 %r8, i32* %rt23, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r9 = bitcast i32 0 to i32;
	%rt24 = zext i32 %r9 to i64;
	%rt25 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt26 = load i8** %rt25;
	%rt27 = ptrtoint i8* %rt26 to i64;
	%rt28 = add i64 %rt24, %rt27;
	%rt29 = inttoptr i64 %rt28 to i32*;
	store i32 6, i32* %rt29, align 4;
	br label %exit;
exit:
	ret void;

}

(0.366199) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.366210) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.366219) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.366438) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.28* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.28* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.28* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = sub i32 0, %r2
  %r5 = add i32 %r3, %rt10
  %rt11 = icmp ult i32 %r5, %r3
  %rt12 = icmp ult i32 %r5, %rt10
  %rt13 = or i1 %rt11, %rt12
  %r4 = select i1 %rt13, i32 1, i32 0
  %rt14 = sub i32 0, %r2
  %rt15 = add i32 %r5, %rt14
  %rt16 = add i32 %rt15, %r4
  %r7 = sub i32 %rt16, 1
  %rt17 = icmp ult i32 %r7, %r5
  %rt18 = icmp ult i32 %r7, %rt14
  %rt19 = or i1 %rt17, %rt18
  %r6 = select i1 %rt19, i32 1, i32 0
  %rt20 = sub i32 0, %r2
  %rt21 = add i32 %r7, %rt20
  %rt22 = add i32 %rt21, %r6
  %r8 = sub i32 %rt22, 1
  %rt23 = inttoptr i64 %r1 to i32*
  store i32 %r8, i32* %rt23, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r9 = bitcast i32 0 to i32
  %rt24 = zext i32 %r9 to i64
  %rt25 = getelementptr %LLVMContext.28* %__ctaContext, i32 0, i32 4
  %rt26 = load i8** %rt25
  %rt27 = ptrtoint i8* %rt26 to i64
  %rt28 = add i64 %rt24, %rt27
  %rt29 = inttoptr i64 %rt28 to i32*
  store i32 6, i32* %rt29, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.28* %__ctaContext to %LLVMContext.28**
  %context.t0 = load %LLVMContext.28** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.28* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.28* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt14 = sub i32 0, %r2
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %r5 = sub i32 %r3, %r2
  %rt11 = icmp ult i32 %r5, %r3
  %rt12 = icmp ult i32 %r5, %rt14
  %rt13 = or i1 %rt11, %rt12
  %r4 = zext i1 %rt13 to i32
  %rt15 = xor i32 %r2, -1
  %rt16 = add i32 %r5, %rt15
  %r7 = add i32 %rt16, %r4
  %rt17 = icmp ult i32 %r7, %r5
  %rt18 = icmp ult i32 %r7, %rt14
  %rt19 = or i1 %rt17, %rt18
  %r6 = zext i1 %rt19 to i32
  %rt22 = add i32 %r7, %rt15
  %r8 = add i32 %rt22, %r6
  %rt23 = inttoptr i64 %r1 to i32*
  store i32 %r8, i32* %rt23, align 4
  %rt29 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt29, align 4
  ret void

}
(0.370672) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.372287) LLVMDynamicTranslationCache.cpp:137:  inserting translation 983040 with 64 bytes of local memory
(0.387541) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestSub-Carry-u32
(0.387553) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(0.389057) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.389068) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = add i64 %r0, 4;
	%rt9 = inttoptr i64 %rt8 to i32*;
	%r3 = load i32* %rt9, align 4;
	%rt10 = sub i32 0, %r2;
	%r5 = add i32 %r3, %rt10;
	%rt11 = icmp ult i32 %r5, %r3;
	%rt12 = icmp ult i32 %r5, %rt10;
	%rt13 = or i1 %rt11, %rt12;
	%r4 = select i1 %rt13, i32 1, i32 0;
	%rt14 = sub i32 0, %r2;
	%rt15 = add i32 %r5, %rt14;
	%rt16 = add i32 %rt15, %r4;
	%r7 = sub i32 %rt16, 1;
	%rt17 = icmp ult i32 %r7, %r5;
	%rt18 = icmp ult i32 %r7, %rt14;
	%rt19 = or i1 %rt17, %rt18;
	%r6 = select i1 %rt19, i32 1, i32 0;
	%rt20 = sub i32 0, %r2;
	%rt21 = add i32 %r7, %rt20;
	%rt22 = add i32 %rt21, %r6;
	%r8 = sub i32 %rt22, 1;
	%rt23 = inttoptr i64 %r1 to i32*;
	store i32 %r8, i32* %rt23, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r9 = bitcast i32 0 to i32;
	%rt24 = zext i32 %r9 to i64;
	%rt25 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt26 = load i8** %rt25;
	%rt27 = ptrtoint i8* %rt26 to i64;
	%rt28 = add i64 %rt24, %rt27;
	%rt29 = inttoptr i64 %rt28 to i32*;
	store i32 6, i32* %rt29, align 4;
	br label %exit;
exit:
	ret void;

}

(0.390034) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.390046) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.390054) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.390243) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.30* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.30* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.30* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = sub i32 0, %r2
  %r5 = add i32 %r3, %rt10
  %rt11 = icmp ult i32 %r5, %r3
  %rt12 = icmp ult i32 %r5, %rt10
  %rt13 = or i1 %rt11, %rt12
  %r4 = select i1 %rt13, i32 1, i32 0
  %rt14 = sub i32 0, %r2
  %rt15 = add i32 %r5, %rt14
  %rt16 = add i32 %rt15, %r4
  %r7 = sub i32 %rt16, 1
  %rt17 = icmp ult i32 %r7, %r5
  %rt18 = icmp ult i32 %r7, %rt14
  %rt19 = or i1 %rt17, %rt18
  %r6 = select i1 %rt19, i32 1, i32 0
  %rt20 = sub i32 0, %r2
  %rt21 = add i32 %r7, %rt20
  %rt22 = add i32 %rt21, %r6
  %r8 = sub i32 %rt22, 1
  %rt23 = inttoptr i64 %r1 to i32*
  store i32 %r8, i32* %rt23, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r9 = bitcast i32 0 to i32
  %rt24 = zext i32 %r9 to i64
  %rt25 = getelementptr %LLVMContext.30* %__ctaContext, i32 0, i32 4
  %rt26 = load i8** %rt25
  %rt27 = ptrtoint i8* %rt26 to i64
  %rt28 = add i64 %rt24, %rt27
  %rt29 = inttoptr i64 %rt28 to i32*
  store i32 6, i32* %rt29, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.30* %__ctaContext to %LLVMContext.30**
  %context.t0 = load %LLVMContext.30** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.30* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.30* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt14 = sub i32 0, %r2
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %r5 = sub i32 %r3, %r2
  %rt11 = icmp ult i32 %r5, %r3
  %rt12 = icmp ult i32 %r5, %rt14
  %rt13 = or i1 %rt11, %rt12
  %r4 = zext i1 %rt13 to i32
  %rt15 = xor i32 %r2, -1
  %rt16 = add i32 %r5, %rt15
  %r7 = add i32 %rt16, %r4
  %rt17 = icmp ult i32 %r7, %r5
  %rt18 = icmp ult i32 %r7, %rt14
  %rt19 = or i1 %rt17, %rt18
  %r6 = zext i1 %rt19 to i32
  %rt22 = add i32 %r7, %rt15
  %r8 = add i32 %rt22, %r6
  %rt23 = inttoptr i64 %r1 to i32*
  store i32 %r8, i32* %rt23, align 4
  %rt29 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt29, align 4
  ret void

}
(0.394403) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.395916) LLVMDynamicTranslationCache.cpp:137:  inserting translation 1048576 with 64 bytes of local memory
(0.411218) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestAdd-Carry-s32
(0.411230) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(0.412677) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.412688) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = add i64 %r0, 4;
	%rt9 = inttoptr i64 %rt8 to i32*;
	%r3 = load i32* %rt9, align 4;
	%r5 = add i32 %r3, %r2;
	%rt10 = icmp ult i32 %r5, %r3;
	%rt11 = icmp ult i32 %r5, %r2;
	%rt12 = or i1 %rt10, %rt11;
	%r4 = select i1 %rt12, i32 1, i32 0;
	%rt13 = add i32 %r5, %r2;
	%r7 = add i32 %rt13, %r4;
	%rt14 = icmp ult i32 %r7, %r5;
	%rt15 = icmp ult i32 %r7, %r2;
	%rt16 = or i1 %rt14, %rt15;
	%r6 = select i1 %rt16, i32 1, i32 0;
	%rt17 = add i32 %r7, %r2;
	%r8 = add i32 %rt17, %r6;
	%rt18 = inttoptr i64 %r1 to i32*;
	store i32 %r8, i32* %rt18, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r9 = bitcast i32 0 to i32;
	%rt19 = zext i32 %r9 to i64;
	%rt20 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt21 = load i8** %rt20;
	%rt22 = ptrtoint i8* %rt21 to i64;
	%rt23 = add i64 %rt19, %rt22;
	%rt24 = inttoptr i64 %rt23 to i32*;
	store i32 6, i32* %rt24, align 4;
	br label %exit;
exit:
	ret void;

}

(0.413608) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.413620) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.413628) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.413817) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.32* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.32* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.32* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %r5 = add i32 %r3, %r2
  %rt10 = icmp ult i32 %r5, %r3
  %rt11 = icmp ult i32 %r5, %r2
  %rt12 = or i1 %rt10, %rt11
  %r4 = select i1 %rt12, i32 1, i32 0
  %rt13 = add i32 %r5, %r2
  %r7 = add i32 %rt13, %r4
  %rt14 = icmp ult i32 %r7, %r5
  %rt15 = icmp ult i32 %r7, %r2
  %rt16 = or i1 %rt14, %rt15
  %r6 = select i1 %rt16, i32 1, i32 0
  %rt17 = add i32 %r7, %r2
  %r8 = add i32 %rt17, %r6
  %rt18 = inttoptr i64 %r1 to i32*
  store i32 %r8, i32* %rt18, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r9 = bitcast i32 0 to i32
  %rt19 = zext i32 %r9 to i64
  %rt20 = getelementptr %LLVMContext.32* %__ctaContext, i32 0, i32 4
  %rt21 = load i8** %rt20
  %rt22 = ptrtoint i8* %rt21 to i64
  %rt23 = add i64 %rt19, %rt22
  %rt24 = inttoptr i64 %rt23 to i32*
  store i32 6, i32* %rt24, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.32* %__ctaContext to %LLVMContext.32**
  %context.t0 = load %LLVMContext.32** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.32* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.32* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %uadd = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %r3, i32 %r2)
  %0 = extractvalue { i32, i1 } %uadd, 0
  %rt10 = extractvalue { i32, i1 } %uadd, 1
  %rt11 = icmp ult i32 %0, %r2
  %rt12 = or i1 %rt10, %rt11
  %r4 = zext i1 %rt12 to i32
  %rt13 = add i32 %0, %r2
  %r7 = add i32 %rt13, %r4
  %rt14 = icmp ult i32 %r7, %0
  %rt15 = icmp ult i32 %r7, %r2
  %rt16 = or i1 %rt14, %rt15
  %r6 = zext i1 %rt16 to i32
  %rt17 = add i32 %r7, %r2
  %r8 = add i32 %rt17, %r6
  %rt18 = inttoptr i64 %r1 to i32*
  store i32 %r8, i32* %rt18, align 4
  %rt24 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt24, align 4
  ret void

}
(0.417723) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.419212) LLVMDynamicTranslationCache.cpp:137:  inserting translation 1114112 with 64 bytes of local memory
(0.435159) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestAdd-Carry-u32
(0.435171) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(0.436638) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.436649) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = add i64 %r0, 4;
	%rt9 = inttoptr i64 %rt8 to i32*;
	%r3 = load i32* %rt9, align 4;
	%r5 = add i32 %r3, %r2;
	%rt10 = icmp ult i32 %r5, %r3;
	%rt11 = icmp ult i32 %r5, %r2;
	%rt12 = or i1 %rt10, %rt11;
	%r4 = select i1 %rt12, i32 1, i32 0;
	%rt13 = add i32 %r5, %r2;
	%r7 = add i32 %rt13, %r4;
	%rt14 = icmp ult i32 %r7, %r5;
	%rt15 = icmp ult i32 %r7, %r2;
	%rt16 = or i1 %rt14, %rt15;
	%r6 = select i1 %rt16, i32 1, i32 0;
	%rt17 = add i32 %r7, %r2;
	%r8 = add i32 %rt17, %r6;
	%rt18 = inttoptr i64 %r1 to i32*;
	store i32 %r8, i32* %rt18, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r9 = bitcast i32 0 to i32;
	%rt19 = zext i32 %r9 to i64;
	%rt20 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt21 = load i8** %rt20;
	%rt22 = ptrtoint i8* %rt21 to i64;
	%rt23 = add i64 %rt19, %rt22;
	%rt24 = inttoptr i64 %rt23 to i32*;
	store i32 6, i32* %rt24, align 4;
	br label %exit;
exit:
	ret void;

}

(0.437576) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.437588) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.437596) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.437783) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.34* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.34* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.34* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %r5 = add i32 %r3, %r2
  %rt10 = icmp ult i32 %r5, %r3
  %rt11 = icmp ult i32 %r5, %r2
  %rt12 = or i1 %rt10, %rt11
  %r4 = select i1 %rt12, i32 1, i32 0
  %rt13 = add i32 %r5, %r2
  %r7 = add i32 %rt13, %r4
  %rt14 = icmp ult i32 %r7, %r5
  %rt15 = icmp ult i32 %r7, %r2
  %rt16 = or i1 %rt14, %rt15
  %r6 = select i1 %rt16, i32 1, i32 0
  %rt17 = add i32 %r7, %r2
  %r8 = add i32 %rt17, %r6
  %rt18 = inttoptr i64 %r1 to i32*
  store i32 %r8, i32* %rt18, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r9 = bitcast i32 0 to i32
  %rt19 = zext i32 %r9 to i64
  %rt20 = getelementptr %LLVMContext.34* %__ctaContext, i32 0, i32 4
  %rt21 = load i8** %rt20
  %rt22 = ptrtoint i8* %rt21 to i64
  %rt23 = add i64 %rt19, %rt22
  %rt24 = inttoptr i64 %rt23 to i32*
  store i32 6, i32* %rt24, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.34* %__ctaContext to %LLVMContext.34**
  %context.t0 = load %LLVMContext.34** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.34* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.34* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %uadd = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %r3, i32 %r2)
  %0 = extractvalue { i32, i1 } %uadd, 0
  %rt10 = extractvalue { i32, i1 } %uadd, 1
  %rt11 = icmp ult i32 %0, %r2
  %rt12 = or i1 %rt10, %rt11
  %r4 = zext i1 %rt12 to i32
  %rt13 = add i32 %0, %r2
  %r7 = add i32 %rt13, %r4
  %rt14 = icmp ult i32 %r7, %0
  %rt15 = icmp ult i32 %r7, %r2
  %rt16 = or i1 %rt14, %rt15
  %r6 = zext i1 %rt16 to i32
  %rt17 = add i32 %r7, %r2
  %r8 = add i32 %rt17, %r6
  %rt18 = inttoptr i64 %r1 to i32*
  store i32 %r8, i32* %rt18, align 4
  %rt24 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt24, align 4
  ret void

}
(0.441620) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.443070) LLVMDynamicTranslationCache.cpp:137:  inserting translation 1179648 with 64 bytes of local memory
(0.459028) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMul-Lo-u16
(0.459039) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(0.460311) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.460322) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i16*;
	%r2 = load i16* %rt7, align 2;
	%rt8 = add i64 %r0, 2;
	%rt9 = inttoptr i64 %rt8 to i16*;
	%r3 = load i16* %rt9, align 2;
	%r4 = mul i16 %r3, %r2;
	%rt10 = inttoptr i64 %r1 to i16*;
	store i16 %r4, i16* %rt10, align 2;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt11 = zext i32 %r5 to i64;
	%rt12 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt13 = load i8** %rt12;
	%rt14 = ptrtoint i8* %rt13 to i64;
	%rt15 = add i64 %rt11, %rt14;
	%rt16 = inttoptr i64 %rt15 to i32*;
	store i32 6, i32* %rt16, align 4;
	br label %exit;
exit:
	ret void;

}

(0.461190) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.461201) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.461224) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.461412) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.36* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.36* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.36* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %r4 = mul i16 %r3, %r2
  %rt10 = inttoptr i64 %r1 to i16*
  store i16 %r4, i16* %rt10, align 2
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt11 = zext i32 %r5 to i64
  %rt12 = getelementptr %LLVMContext.36* %__ctaContext, i32 0, i32 4
  %rt13 = load i8** %rt12
  %rt14 = ptrtoint i8* %rt13 to i64
  %rt15 = add i64 %rt11, %rt14
  %rt16 = inttoptr i64 %rt15 to i32*
  store i32 6, i32* %rt16, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.36* %__ctaContext to %LLVMContext.36**
  %context.t0 = load %LLVMContext.36** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.36* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.36* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %r4 = mul i16 %r3, %r2
  %rt10 = inttoptr i64 %r1 to i16*
  store i16 %r4, i16* %rt10, align 2
  %rt16 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt16, align 4
  ret void

}
(0.464297) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.465336) LLVMDynamicTranslationCache.cpp:137:  inserting translation 1245184 with 40 bytes of local memory
(0.483011) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMul-Hi-u16
(0.483022) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(0.484312) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.484323) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i16*;
	%r2 = load i16* %rt7, align 2;
	%rt8 = add i64 %r0, 2;
	%rt9 = inttoptr i64 %rt8 to i16*;
	%r3 = load i16* %rt9, align 2;
	%rt10 = zext i16 %r3 to i32;
	%rt11 = zext i16 %r2 to i32;
	%rt12 = mul i32 %rt10, %rt11;
	%rt13 = lshr i32 %rt12, 16;
	%r4 = trunc i32 %rt13 to i16;
	%rt14 = inttoptr i64 %r1 to i16*;
	store i16 %r4, i16* %rt14, align 2;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt15 = zext i32 %r5 to i64;
	%rt16 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt17 = load i8** %rt16;
	%rt18 = ptrtoint i8* %rt17 to i64;
	%rt19 = add i64 %rt15, %rt18;
	%rt20 = inttoptr i64 %rt19 to i32*;
	store i32 6, i32* %rt20, align 4;
	br label %exit;
exit:
	ret void;

}

(0.485230) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.485242) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.485250) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.485435) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.38* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.38* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.38* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %rt10 = zext i16 %r3 to i32
  %rt11 = zext i16 %r2 to i32
  %rt12 = mul i32 %rt10, %rt11
  %rt13 = lshr i32 %rt12, 16
  %r4 = trunc i32 %rt13 to i16
  %rt14 = inttoptr i64 %r1 to i16*
  store i16 %r4, i16* %rt14, align 2
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt15 = zext i32 %r5 to i64
  %rt16 = getelementptr %LLVMContext.38* %__ctaContext, i32 0, i32 4
  %rt17 = load i8** %rt16
  %rt18 = ptrtoint i8* %rt17 to i64
  %rt19 = add i64 %rt15, %rt18
  %rt20 = inttoptr i64 %rt19 to i32*
  store i32 6, i32* %rt20, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.38* %__ctaContext to %LLVMContext.38**
  %context.t0 = load %LLVMContext.38** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.38* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.38* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %rt10 = zext i16 %r3 to i32
  %rt11 = zext i16 %r2 to i32
  %rt12 = mul i32 %rt10, %rt11
  %rt13 = lshr i32 %rt12, 16
  %r4 = trunc i32 %rt13 to i16
  %rt14 = inttoptr i64 %r1 to i16*
  store i16 %r4, i16* %rt14, align 2
  %rt20 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt20, align 4
  ret void

}
(0.488604) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.489696) LLVMDynamicTranslationCache.cpp:137:  inserting translation 1310720 with 40 bytes of local memory
(0.507460) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMul-Wide-u16
(0.507472) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(0.508745) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.508756) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i16*;
	%r2 = load i16* %rt7, align 2;
	%rt8 = add i64 %r0, 2;
	%rt9 = inttoptr i64 %rt8 to i16*;
	%r3 = load i16* %rt9, align 2;
	%rt10 = zext i16 %r3 to i32;
	%rt11 = zext i16 %r2 to i32;
	%r4 = mul i32 %rt10, %rt11;
	%rt12 = inttoptr i64 %r1 to i32*;
	store i32 %r4, i32* %rt12, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt13 = zext i32 %r5 to i64;
	%rt14 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt15 = load i8** %rt14;
	%rt16 = ptrtoint i8* %rt15 to i64;
	%rt17 = add i64 %rt13, %rt16;
	%rt18 = inttoptr i64 %rt17 to i32*;
	store i32 6, i32* %rt18, align 4;
	br label %exit;
exit:
	ret void;

}

(0.509624) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.509649) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.509659) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.509846) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.40* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.40* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.40* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %rt10 = zext i16 %r3 to i32
  %rt11 = zext i16 %r2 to i32
  %r4 = mul i32 %rt10, %rt11
  %rt12 = inttoptr i64 %r1 to i32*
  store i32 %r4, i32* %rt12, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt13 = zext i32 %r5 to i64
  %rt14 = getelementptr %LLVMContext.40* %__ctaContext, i32 0, i32 4
  %rt15 = load i8** %rt14
  %rt16 = ptrtoint i8* %rt15 to i64
  %rt17 = add i64 %rt13, %rt16
  %rt18 = inttoptr i64 %rt17 to i32*
  store i32 6, i32* %rt18, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.40* %__ctaContext to %LLVMContext.40**
  %context.t0 = load %LLVMContext.40** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.40* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.40* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %rt10 = zext i16 %r3 to i32
  %rt11 = zext i16 %r2 to i32
  %r4 = mul i32 %rt10, %rt11
  %rt12 = inttoptr i64 %r1 to i32*
  store i32 %r4, i32* %rt12, align 4
  %rt18 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt18, align 4
  ret void

}
(0.512811) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.513816) LLVMDynamicTranslationCache.cpp:137:  inserting translation 1376256 with 40 bytes of local memory
(0.531572) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMul-Lo-s16
(0.531584) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(0.532849) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.532860) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i16*;
	%r2 = load i16* %rt7, align 2;
	%rt8 = add i64 %r0, 2;
	%rt9 = inttoptr i64 %rt8 to i16*;
	%r3 = load i16* %rt9, align 2;
	%r4 = mul i16 %r3, %r2;
	%rt10 = inttoptr i64 %r1 to i16*;
	store i16 %r4, i16* %rt10, align 2;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt11 = zext i32 %r5 to i64;
	%rt12 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt13 = load i8** %rt12;
	%rt14 = ptrtoint i8* %rt13 to i64;
	%rt15 = add i64 %rt11, %rt14;
	%rt16 = inttoptr i64 %rt15 to i32*;
	store i32 6, i32* %rt16, align 4;
	br label %exit;
exit:
	ret void;

}

(0.533726) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.533738) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.533761) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.533949) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.42* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.42* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.42* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %r4 = mul i16 %r3, %r2
  %rt10 = inttoptr i64 %r1 to i16*
  store i16 %r4, i16* %rt10, align 2
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt11 = zext i32 %r5 to i64
  %rt12 = getelementptr %LLVMContext.42* %__ctaContext, i32 0, i32 4
  %rt13 = load i8** %rt12
  %rt14 = ptrtoint i8* %rt13 to i64
  %rt15 = add i64 %rt11, %rt14
  %rt16 = inttoptr i64 %rt15 to i32*
  store i32 6, i32* %rt16, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.42* %__ctaContext to %LLVMContext.42**
  %context.t0 = load %LLVMContext.42** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.42* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.42* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %r4 = mul i16 %r3, %r2
  %rt10 = inttoptr i64 %r1 to i16*
  store i16 %r4, i16* %rt10, align 2
  %rt16 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt16, align 4
  ret void

}
(0.536830) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.537812) LLVMDynamicTranslationCache.cpp:137:  inserting translation 1441792 with 40 bytes of local memory
(0.555594) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMul-Hi-s16
(0.555605) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(0.556942) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.556953) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i16*;
	%r2 = load i16* %rt7, align 2;
	%rt8 = add i64 %r0, 2;
	%rt9 = inttoptr i64 %rt8 to i16*;
	%r3 = load i16* %rt9, align 2;
	%rt10 = sext i16 %r3 to i32;
	%rt11 = sext i16 %r2 to i32;
	%rt12 = mul i32 %rt10, %rt11;
	%rt13 = ashr i32 %rt12, 16;
	%r4 = trunc i32 %rt13 to i16;
	%rt14 = inttoptr i64 %r1 to i16*;
	store i16 %r4, i16* %rt14, align 2;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt15 = zext i32 %r5 to i64;
	%rt16 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt17 = load i8** %rt16;
	%rt18 = ptrtoint i8* %rt17 to i64;
	%rt19 = add i64 %rt15, %rt18;
	%rt20 = inttoptr i64 %rt19 to i32*;
	store i32 6, i32* %rt20, align 4;
	br label %exit;
exit:
	ret void;

}

(0.557853) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.557864) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.557873) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.558060) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.44* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.44* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.44* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %rt10 = sext i16 %r3 to i32
  %rt11 = sext i16 %r2 to i32
  %rt12 = mul i32 %rt10, %rt11
  %rt13 = ashr i32 %rt12, 16
  %r4 = trunc i32 %rt13 to i16
  %rt14 = inttoptr i64 %r1 to i16*
  store i16 %r4, i16* %rt14, align 2
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt15 = zext i32 %r5 to i64
  %rt16 = getelementptr %LLVMContext.44* %__ctaContext, i32 0, i32 4
  %rt17 = load i8** %rt16
  %rt18 = ptrtoint i8* %rt17 to i64
  %rt19 = add i64 %rt15, %rt18
  %rt20 = inttoptr i64 %rt19 to i32*
  store i32 6, i32* %rt20, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.44* %__ctaContext to %LLVMContext.44**
  %context.t0 = load %LLVMContext.44** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.44* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.44* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %rt10 = sext i16 %r3 to i32
  %rt11 = sext i16 %r2 to i32
  %rt12 = mul i32 %rt10, %rt11
  %rt131 = lshr i32 %rt12, 16
  %r4 = trunc i32 %rt131 to i16
  %rt14 = inttoptr i64 %r1 to i16*
  store i16 %r4, i16* %rt14, align 2
  %rt20 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt20, align 4
  ret void

}
(0.561249) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.562352) LLVMDynamicTranslationCache.cpp:137:  inserting translation 1507328 with 40 bytes of local memory
(0.579279) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMul-Wide-s16
(0.579290) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(0.580566) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.580577) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i16*;
	%r2 = load i16* %rt7, align 2;
	%rt8 = add i64 %r0, 2;
	%rt9 = inttoptr i64 %rt8 to i16*;
	%r3 = load i16* %rt9, align 2;
	%rt10 = sext i16 %r3 to i32;
	%rt11 = sext i16 %r2 to i32;
	%r4 = mul i32 %rt10, %rt11;
	%rt12 = inttoptr i64 %r1 to i32*;
	store i32 %r4, i32* %rt12, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt13 = zext i32 %r5 to i64;
	%rt14 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt15 = load i8** %rt14;
	%rt16 = ptrtoint i8* %rt15 to i64;
	%rt17 = add i64 %rt13, %rt16;
	%rt18 = inttoptr i64 %rt17 to i32*;
	store i32 6, i32* %rt18, align 4;
	br label %exit;
exit:
	ret void;

}

(0.581461) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.581486) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.581496) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.581683) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.46* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.46* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.46* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %rt10 = sext i16 %r3 to i32
  %rt11 = sext i16 %r2 to i32
  %r4 = mul i32 %rt10, %rt11
  %rt12 = inttoptr i64 %r1 to i32*
  store i32 %r4, i32* %rt12, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt13 = zext i32 %r5 to i64
  %rt14 = getelementptr %LLVMContext.46* %__ctaContext, i32 0, i32 4
  %rt15 = load i8** %rt14
  %rt16 = ptrtoint i8* %rt15 to i64
  %rt17 = add i64 %rt13, %rt16
  %rt18 = inttoptr i64 %rt17 to i32*
  store i32 6, i32* %rt18, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.46* %__ctaContext to %LLVMContext.46**
  %context.t0 = load %LLVMContext.46** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.46* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.46* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %rt10 = sext i16 %r3 to i32
  %rt11 = sext i16 %r2 to i32
  %r4 = mul i32 %rt10, %rt11
  %rt12 = inttoptr i64 %r1 to i32*
  store i32 %r4, i32* %rt12, align 4
  %rt18 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt18, align 4
  ret void

}
(0.584686) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.585701) LLVMDynamicTranslationCache.cpp:137:  inserting translation 1572864 with 40 bytes of local memory
(0.603415) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMul-Lo-u32
(0.603426) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(0.604683) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.604695) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = add i64 %r0, 4;
	%rt9 = inttoptr i64 %rt8 to i32*;
	%r3 = load i32* %rt9, align 4;
	%r4 = mul i32 %r3, %r2;
	%rt10 = inttoptr i64 %r1 to i32*;
	store i32 %r4, i32* %rt10, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt11 = zext i32 %r5 to i64;
	%rt12 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt13 = load i8** %rt12;
	%rt14 = ptrtoint i8* %rt13 to i64;
	%rt15 = add i64 %rt11, %rt14;
	%rt16 = inttoptr i64 %rt15 to i32*;
	store i32 6, i32* %rt16, align 4;
	br label %exit;
exit:
	ret void;

}

(0.605571) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.605582) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.605606) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.605793) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.48* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.48* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.48* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %r4 = mul i32 %r3, %r2
  %rt10 = inttoptr i64 %r1 to i32*
  store i32 %r4, i32* %rt10, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt11 = zext i32 %r5 to i64
  %rt12 = getelementptr %LLVMContext.48* %__ctaContext, i32 0, i32 4
  %rt13 = load i8** %rt12
  %rt14 = ptrtoint i8* %rt13 to i64
  %rt15 = add i64 %rt11, %rt14
  %rt16 = inttoptr i64 %rt15 to i32*
  store i32 6, i32* %rt16, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.48* %__ctaContext to %LLVMContext.48**
  %context.t0 = load %LLVMContext.48** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.48* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.48* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %r4 = mul i32 %r3, %r2
  %rt10 = inttoptr i64 %r1 to i32*
  store i32 %r4, i32* %rt10, align 4
  %rt16 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt16, align 4
  ret void

}
(0.608687) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.609665) LLVMDynamicTranslationCache.cpp:137:  inserting translation 1638400 with 40 bytes of local memory
(0.627660) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMul-Hi-u32
(0.627672) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(0.628973) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.628984) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = add i64 %r0, 4;
	%rt9 = inttoptr i64 %rt8 to i32*;
	%r3 = load i32* %rt9, align 4;
	%rt10 = zext i32 %r3 to i64;
	%rt11 = zext i32 %r2 to i64;
	%rt12 = mul i64 %rt10, %rt11;
	%rt13 = lshr i64 %rt12, 32;
	%r4 = trunc i64 %rt13 to i32;
	%rt14 = inttoptr i64 %r1 to i32*;
	store i32 %r4, i32* %rt14, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt15 = zext i32 %r5 to i64;
	%rt16 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt17 = load i8** %rt16;
	%rt18 = ptrtoint i8* %rt17 to i64;
	%rt19 = add i64 %rt15, %rt18;
	%rt20 = inttoptr i64 %rt19 to i32*;
	store i32 6, i32* %rt20, align 4;
	br label %exit;
exit:
	ret void;

}

(0.629880) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.629892) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.629900) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.630087) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.50* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.50* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.50* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = zext i32 %r3 to i64
  %rt11 = zext i32 %r2 to i64
  %rt12 = mul i64 %rt10, %rt11
  %rt13 = lshr i64 %rt12, 32
  %r4 = trunc i64 %rt13 to i32
  %rt14 = inttoptr i64 %r1 to i32*
  store i32 %r4, i32* %rt14, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt15 = zext i32 %r5 to i64
  %rt16 = getelementptr %LLVMContext.50* %__ctaContext, i32 0, i32 4
  %rt17 = load i8** %rt16
  %rt18 = ptrtoint i8* %rt17 to i64
  %rt19 = add i64 %rt15, %rt18
  %rt20 = inttoptr i64 %rt19 to i32*
  store i32 6, i32* %rt20, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.50* %__ctaContext to %LLVMContext.50**
  %context.t0 = load %LLVMContext.50** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.50* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.50* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = zext i32 %r3 to i64
  %rt11 = zext i32 %r2 to i64
  %rt12 = mul i64 %rt10, %rt11
  %rt13 = lshr i64 %rt12, 32
  %r4 = trunc i64 %rt13 to i32
  %rt14 = inttoptr i64 %r1 to i32*
  store i32 %r4, i32* %rt14, align 4
  %rt20 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt20, align 4
  ret void

}
(0.633281) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.634434) LLVMDynamicTranslationCache.cpp:137:  inserting translation 1703936 with 40 bytes of local memory
(0.651361) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMul-Wide-u32
(0.651372) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(0.652649) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.652659) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = add i64 %r0, 4;
	%rt9 = inttoptr i64 %rt8 to i32*;
	%r3 = load i32* %rt9, align 4;
	%rt10 = zext i32 %r3 to i64;
	%rt11 = zext i32 %r2 to i64;
	%r4 = mul i64 %rt10, %rt11;
	%rt12 = inttoptr i64 %r1 to i64*;
	store i64 %r4, i64* %rt12, align 8;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt13 = zext i32 %r5 to i64;
	%rt14 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt15 = load i8** %rt14;
	%rt16 = ptrtoint i8* %rt15 to i64;
	%rt17 = add i64 %rt13, %rt16;
	%rt18 = inttoptr i64 %rt17 to i32*;
	store i32 6, i32* %rt18, align 4;
	br label %exit;
exit:
	ret void;

}

(0.653548) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.653574) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.653584) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.653771) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.52* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.52* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.52* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = zext i32 %r3 to i64
  %rt11 = zext i32 %r2 to i64
  %r4 = mul i64 %rt10, %rt11
  %rt12 = inttoptr i64 %r1 to i64*
  store i64 %r4, i64* %rt12, align 8
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt13 = zext i32 %r5 to i64
  %rt14 = getelementptr %LLVMContext.52* %__ctaContext, i32 0, i32 4
  %rt15 = load i8** %rt14
  %rt16 = ptrtoint i8* %rt15 to i64
  %rt17 = add i64 %rt13, %rt16
  %rt18 = inttoptr i64 %rt17 to i32*
  store i32 6, i32* %rt18, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.52* %__ctaContext to %LLVMContext.52**
  %context.t0 = load %LLVMContext.52** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.52* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.52* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = zext i32 %r3 to i64
  %rt11 = zext i32 %r2 to i64
  %r4 = mul i64 %rt10, %rt11
  %rt12 = inttoptr i64 %r1 to i64*
  store i64 %r4, i64* %rt12, align 8
  %rt18 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt18, align 4
  ret void

}
(0.656848) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.657876) LLVMDynamicTranslationCache.cpp:137:  inserting translation 1769472 with 40 bytes of local memory
(0.675660) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMul-Lo-s32
(0.675673) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(0.676981) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.676992) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = add i64 %r0, 4;
	%rt9 = inttoptr i64 %rt8 to i32*;
	%r3 = load i32* %rt9, align 4;
	%r4 = mul i32 %r3, %r2;
	%rt10 = inttoptr i64 %r1 to i32*;
	store i32 %r4, i32* %rt10, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt11 = zext i32 %r5 to i64;
	%rt12 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt13 = load i8** %rt12;
	%rt14 = ptrtoint i8* %rt13 to i64;
	%rt15 = add i64 %rt11, %rt14;
	%rt16 = inttoptr i64 %rt15 to i32*;
	store i32 6, i32* %rt16, align 4;
	br label %exit;
exit:
	ret void;

}

(0.677871) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.677882) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.677905) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.678092) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.54* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.54* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.54* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %r4 = mul i32 %r3, %r2
  %rt10 = inttoptr i64 %r1 to i32*
  store i32 %r4, i32* %rt10, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt11 = zext i32 %r5 to i64
  %rt12 = getelementptr %LLVMContext.54* %__ctaContext, i32 0, i32 4
  %rt13 = load i8** %rt12
  %rt14 = ptrtoint i8* %rt13 to i64
  %rt15 = add i64 %rt11, %rt14
  %rt16 = inttoptr i64 %rt15 to i32*
  store i32 6, i32* %rt16, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.54* %__ctaContext to %LLVMContext.54**
  %context.t0 = load %LLVMContext.54** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.54* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.54* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %r4 = mul i32 %r3, %r2
  %rt10 = inttoptr i64 %r1 to i32*
  store i32 %r4, i32* %rt10, align 4
  %rt16 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt16, align 4
  ret void

}
(0.680980) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.682009) LLVMDynamicTranslationCache.cpp:137:  inserting translation 1835008 with 40 bytes of local memory
(0.699790) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMul-Hi-s32
(0.699801) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(0.701108) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.701119) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = add i64 %r0, 4;
	%rt9 = inttoptr i64 %rt8 to i32*;
	%r3 = load i32* %rt9, align 4;
	%rt10 = sext i32 %r3 to i64;
	%rt11 = sext i32 %r2 to i64;
	%rt12 = mul i64 %rt10, %rt11;
	%rt13 = ashr i64 %rt12, 32;
	%r4 = trunc i64 %rt13 to i32;
	%rt14 = inttoptr i64 %r1 to i32*;
	store i32 %r4, i32* %rt14, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt15 = zext i32 %r5 to i64;
	%rt16 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt17 = load i8** %rt16;
	%rt18 = ptrtoint i8* %rt17 to i64;
	%rt19 = add i64 %rt15, %rt18;
	%rt20 = inttoptr i64 %rt19 to i32*;
	store i32 6, i32* %rt20, align 4;
	br label %exit;
exit:
	ret void;

}

(0.702029) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.702040) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.702049) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.702235) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.56* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.56* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.56* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = sext i32 %r3 to i64
  %rt11 = sext i32 %r2 to i64
  %rt12 = mul i64 %rt10, %rt11
  %rt13 = ashr i64 %rt12, 32
  %r4 = trunc i64 %rt13 to i32
  %rt14 = inttoptr i64 %r1 to i32*
  store i32 %r4, i32* %rt14, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt15 = zext i32 %r5 to i64
  %rt16 = getelementptr %LLVMContext.56* %__ctaContext, i32 0, i32 4
  %rt17 = load i8** %rt16
  %rt18 = ptrtoint i8* %rt17 to i64
  %rt19 = add i64 %rt15, %rt18
  %rt20 = inttoptr i64 %rt19 to i32*
  store i32 6, i32* %rt20, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.56* %__ctaContext to %LLVMContext.56**
  %context.t0 = load %LLVMContext.56** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.56* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.56* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = sext i32 %r3 to i64
  %rt11 = sext i32 %r2 to i64
  %rt12 = mul i64 %rt10, %rt11
  %rt131 = lshr i64 %rt12, 32
  %r4 = trunc i64 %rt131 to i32
  %rt14 = inttoptr i64 %r1 to i32*
  store i32 %r4, i32* %rt14, align 4
  %rt20 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt20, align 4
  ret void

}
(0.705433) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.706602) LLVMDynamicTranslationCache.cpp:137:  inserting translation 1900544 with 40 bytes of local memory
(0.723538) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMul-Wide-s32
(0.723550) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(0.724834) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.724845) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = add i64 %r0, 4;
	%rt9 = inttoptr i64 %rt8 to i32*;
	%r3 = load i32* %rt9, align 4;
	%rt10 = sext i32 %r3 to i64;
	%rt11 = sext i32 %r2 to i64;
	%r4 = mul i64 %rt10, %rt11;
	%rt12 = inttoptr i64 %r1 to i64*;
	store i64 %r4, i64* %rt12, align 8;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt13 = zext i32 %r5 to i64;
	%rt14 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt15 = load i8** %rt14;
	%rt16 = ptrtoint i8* %rt15 to i64;
	%rt17 = add i64 %rt13, %rt16;
	%rt18 = inttoptr i64 %rt17 to i32*;
	store i32 6, i32* %rt18, align 4;
	br label %exit;
exit:
	ret void;

}

(0.725736) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.725761) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.725770) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.725958) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.58* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.58* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.58* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = sext i32 %r3 to i64
  %rt11 = sext i32 %r2 to i64
  %r4 = mul i64 %rt10, %rt11
  %rt12 = inttoptr i64 %r1 to i64*
  store i64 %r4, i64* %rt12, align 8
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt13 = zext i32 %r5 to i64
  %rt14 = getelementptr %LLVMContext.58* %__ctaContext, i32 0, i32 4
  %rt15 = load i8** %rt14
  %rt16 = ptrtoint i8* %rt15 to i64
  %rt17 = add i64 %rt13, %rt16
  %rt18 = inttoptr i64 %rt17 to i32*
  store i32 6, i32* %rt18, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.58* %__ctaContext to %LLVMContext.58**
  %context.t0 = load %LLVMContext.58** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.58* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.58* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = sext i32 %r3 to i64
  %rt11 = sext i32 %r2 to i64
  %r4 = mul i64 %rt10, %rt11
  %rt12 = inttoptr i64 %r1 to i64*
  store i64 %r4, i64* %rt12, align 8
  %rt18 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt18, align 4
  ret void

}
(0.728982) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.730025) LLVMDynamicTranslationCache.cpp:137:  inserting translation 1966080 with 40 bytes of local memory
(0.747823) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMul-Lo-u64
(0.747835) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(0.749096) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.749107) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i64*;
	%r2 = load i64* %rt7, align 8;
	%rt8 = add i64 %r0, 8;
	%rt9 = inttoptr i64 %rt8 to i64*;
	%r3 = load i64* %rt9, align 8;
	%r4 = mul i64 %r3, %r2;
	%rt10 = inttoptr i64 %r1 to i64*;
	store i64 %r4, i64* %rt10, align 8;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt11 = zext i32 %r5 to i64;
	%rt12 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt13 = load i8** %rt12;
	%rt14 = ptrtoint i8* %rt13 to i64;
	%rt15 = add i64 %rt11, %rt14;
	%rt16 = inttoptr i64 %rt15 to i32*;
	store i32 6, i32* %rt16, align 4;
	br label %exit;
exit:
	ret void;

}

(0.749983) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.749995) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.750018) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.750206) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.60* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.60* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.60* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %r4 = mul i64 %r3, %r2
  %rt10 = inttoptr i64 %r1 to i64*
  store i64 %r4, i64* %rt10, align 8
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt11 = zext i32 %r5 to i64
  %rt12 = getelementptr %LLVMContext.60* %__ctaContext, i32 0, i32 4
  %rt13 = load i8** %rt12
  %rt14 = ptrtoint i8* %rt13 to i64
  %rt15 = add i64 %rt11, %rt14
  %rt16 = inttoptr i64 %rt15 to i32*
  store i32 6, i32* %rt16, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.60* %__ctaContext to %LLVMContext.60**
  %context.t0 = load %LLVMContext.60** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.60* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.60* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %r4 = mul i64 %r3, %r2
  %rt10 = inttoptr i64 %r1 to i64*
  store i64 %r4, i64* %rt10, align 8
  %rt16 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt16, align 4
  ret void

}
(0.753089) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.754092) LLVMDynamicTranslationCache.cpp:137:  inserting translation 2031616 with 40 bytes of local memory
(0.771773) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMul-Hi-u64
(0.771785) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(0.773048) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.773059) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i64*;
	%r2 = load i64* %rt7, align 8;
	%rt8 = add i64 %r0, 8;
	%rt9 = inttoptr i64 %rt8 to i64*;
	%r3 = load i64* %rt9, align 8;
	%r4 = call i64 @__ocelot_mul_hi_u64(i64 %r3, i64 %r2);
	%rt10 = inttoptr i64 %r1 to i64*;
	store i64 %r4, i64* %rt10, align 8;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt11 = zext i32 %r5 to i64;
	%rt12 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt13 = load i8** %rt12;
	%rt14 = ptrtoint i8* %rt13 to i64;
	%rt15 = add i64 %rt11, %rt14;
	%rt16 = inttoptr i64 %rt15 to i32*;
	store i32 6, i32* %rt16, align 4;
	br label %exit;
exit:
	ret void;

}

(0.773946) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.773971) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.773981) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.774168) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.62* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.62* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.62* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %r4 = call i64 @__ocelot_mul_hi_u64(i64 %r3, i64 %r2)
  %rt10 = inttoptr i64 %r1 to i64*
  store i64 %r4, i64* %rt10, align 8
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt11 = zext i32 %r5 to i64
  %rt12 = getelementptr %LLVMContext.62* %__ctaContext, i32 0, i32 4
  %rt13 = load i8** %rt12
  %rt14 = ptrtoint i8* %rt13 to i64
  %rt15 = add i64 %rt11, %rt14
  %rt16 = inttoptr i64 %rt15 to i32*
  store i32 6, i32* %rt16, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.62* %__ctaContext to %LLVMContext.62**
  %context.t0 = load %LLVMContext.62** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.62* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.62* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %r4 = tail call i64 @__ocelot_mul_hi_u64(i64 %r3, i64 %r2) nounwind
  %rt10 = inttoptr i64 %r1 to i64*
  store i64 %r4, i64* %rt10, align 8
  %rt16 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt16, align 4
  ret void

}
(0.777117) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.778397) LLVMDynamicTranslationCache.cpp:137:  inserting translation 2097152 with 40 bytes of local memory
(0.795367) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMul-Lo-s64
(0.795379) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(0.796674) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.796685) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i64*;
	%r2 = load i64* %rt7, align 8;
	%rt8 = add i64 %r0, 8;
	%rt9 = inttoptr i64 %rt8 to i64*;
	%r3 = load i64* %rt9, align 8;
	%r4 = mul i64 %r3, %r2;
	%rt10 = inttoptr i64 %r1 to i64*;
	store i64 %r4, i64* %rt10, align 8;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt11 = zext i32 %r5 to i64;
	%rt12 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt13 = load i8** %rt12;
	%rt14 = ptrtoint i8* %rt13 to i64;
	%rt15 = add i64 %rt11, %rt14;
	%rt16 = inttoptr i64 %rt15 to i32*;
	store i32 6, i32* %rt16, align 4;
	br label %exit;
exit:
	ret void;

}

(0.797558) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.797569) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.797592) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.797781) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.64* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.64* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.64* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %r4 = mul i64 %r3, %r2
  %rt10 = inttoptr i64 %r1 to i64*
  store i64 %r4, i64* %rt10, align 8
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt11 = zext i32 %r5 to i64
  %rt12 = getelementptr %LLVMContext.64* %__ctaContext, i32 0, i32 4
  %rt13 = load i8** %rt12
  %rt14 = ptrtoint i8* %rt13 to i64
  %rt15 = add i64 %rt11, %rt14
  %rt16 = inttoptr i64 %rt15 to i32*
  store i32 6, i32* %rt16, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.64* %__ctaContext to %LLVMContext.64**
  %context.t0 = load %LLVMContext.64** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.64* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.64* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %r4 = mul i64 %r3, %r2
  %rt10 = inttoptr i64 %r1 to i64*
  store i64 %r4, i64* %rt10, align 8
  %rt16 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt16, align 4
  ret void

}
(0.800658) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.801656) LLVMDynamicTranslationCache.cpp:137:  inserting translation 2162688 with 40 bytes of local memory
(0.819412) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMul-Hi-s64
(0.819424) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(0.820730) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.820741) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i64*;
	%r2 = load i64* %rt7, align 8;
	%rt8 = add i64 %r0, 8;
	%rt9 = inttoptr i64 %rt8 to i64*;
	%r3 = load i64* %rt9, align 8;
	%r4 = call i64 @__ocelot_mul_hi_s64(i64 %r3, i64 %r2);
	%rt10 = inttoptr i64 %r1 to i64*;
	store i64 %r4, i64* %rt10, align 8;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt11 = zext i32 %r5 to i64;
	%rt12 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt13 = load i8** %rt12;
	%rt14 = ptrtoint i8* %rt13 to i64;
	%rt15 = add i64 %rt11, %rt14;
	%rt16 = inttoptr i64 %rt15 to i32*;
	store i32 6, i32* %rt16, align 4;
	br label %exit;
exit:
	ret void;

}

(0.821621) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.821647) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.821656) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.821844) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.66* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.66* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.66* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %r4 = call i64 @__ocelot_mul_hi_s64(i64 %r3, i64 %r2)
  %rt10 = inttoptr i64 %r1 to i64*
  store i64 %r4, i64* %rt10, align 8
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt11 = zext i32 %r5 to i64
  %rt12 = getelementptr %LLVMContext.66* %__ctaContext, i32 0, i32 4
  %rt13 = load i8** %rt12
  %rt14 = ptrtoint i8* %rt13 to i64
  %rt15 = add i64 %rt11, %rt14
  %rt16 = inttoptr i64 %rt15 to i32*
  store i32 6, i32* %rt16, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.66* %__ctaContext to %LLVMContext.66**
  %context.t0 = load %LLVMContext.66** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.66* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.66* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %r4 = tail call i64 @__ocelot_mul_hi_s64(i64 %r3, i64 %r2) nounwind
  %rt10 = inttoptr i64 %r1 to i64*
  store i64 %r4, i64* %rt10, align 8
  %rt16 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt16, align 4
  ret void

}
(0.824791) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.826019) LLVMDynamicTranslationCache.cpp:137:  inserting translation 2228224 with 40 bytes of local memory
(0.843842) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMad-Lo-u16
(0.843854) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(0.845199) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.845213) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i16*;
	%r2 = load i16* %rt7, align 2;
	%rt8 = add i64 %r0, 2;
	%rt9 = inttoptr i64 %rt8 to i16*;
	%r3 = load i16* %rt9, align 2;
	%rt10 = add i64 %r0, 4;
	%rt11 = inttoptr i64 %rt10 to i16*;
	%r4 = load i16* %rt11, align 2;
	%rt12 = mul i16 %r2, %r3;
	%r5 = add i16 %r4, %rt12;
	%rt13 = inttoptr i64 %r1 to i16*;
	store i16 %r5, i16* %rt13, align 2;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r6 = bitcast i32 0 to i32;
	%rt14 = zext i32 %r6 to i64;
	%rt15 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt16 = load i8** %rt15;
	%rt17 = ptrtoint i8* %rt16 to i64;
	%rt18 = add i64 %rt14, %rt17;
	%rt19 = inttoptr i64 %rt18 to i32*;
	store i32 6, i32* %rt19, align 4;
	br label %exit;
exit:
	ret void;

}

(0.846165) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.846178) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.846186) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.846400) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.68* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.68* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.68* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %rt10 = add i64 %r0, 4
  %rt11 = inttoptr i64 %rt10 to i16*
  %r4 = load i16* %rt11, align 2
  %rt12 = mul i16 %r2, %r3
  %r5 = add i16 %r4, %rt12
  %rt13 = inttoptr i64 %r1 to i16*
  store i16 %r5, i16* %rt13, align 2
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r6 = bitcast i32 0 to i32
  %rt14 = zext i32 %r6 to i64
  %rt15 = getelementptr %LLVMContext.68* %__ctaContext, i32 0, i32 4
  %rt16 = load i8** %rt15
  %rt17 = ptrtoint i8* %rt16 to i64
  %rt18 = add i64 %rt14, %rt17
  %rt19 = inttoptr i64 %rt18 to i32*
  store i32 6, i32* %rt19, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.68* %__ctaContext to %LLVMContext.68**
  %context.t0 = load %LLVMContext.68** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.68* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.68* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %rt10 = add i64 %r0, 4
  %rt11 = inttoptr i64 %rt10 to i16*
  %r4 = load i16* %rt11, align 2
  %rt12 = mul i16 %r3, %r2
  %r5 = add i16 %r4, %rt12
  %rt13 = inttoptr i64 %r1 to i16*
  store i16 %r5, i16* %rt13, align 2
  %rt19 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt19, align 4
  ret void

}
(0.849534) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.850688) LLVMDynamicTranslationCache.cpp:137:  inserting translation 2293760 with 48 bytes of local memory
(0.867483) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMad-Hi-u16
(0.867496) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(0.868877) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.868888) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i16*;
	%r2 = load i16* %rt7, align 2;
	%rt8 = add i64 %r0, 2;
	%rt9 = inttoptr i64 %rt8 to i16*;
	%r3 = load i16* %rt9, align 2;
	%rt10 = add i64 %r0, 4;
	%rt11 = inttoptr i64 %rt10 to i16*;
	%r4 = load i16* %rt11, align 2;
	%rt12 = zext i16 %r2 to i32;
	%rt13 = zext i16 %r3 to i32;
	%rt14 = mul i32 %rt12, %rt13;
	%rt15 = lshr i32 %rt14, 16;
	%rt16 = trunc i32 %rt15 to i16;
	%r5 = add i16 %rt16, %r4;
	%rt17 = inttoptr i64 %r1 to i16*;
	store i16 %r5, i16* %rt17, align 2;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r6 = bitcast i32 0 to i32;
	%rt18 = zext i32 %r6 to i64;
	%rt19 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt20 = load i8** %rt19;
	%rt21 = ptrtoint i8* %rt20 to i64;
	%rt22 = add i64 %rt18, %rt21;
	%rt23 = inttoptr i64 %rt22 to i32*;
	store i32 6, i32* %rt23, align 4;
	br label %exit;
exit:
	ret void;

}

(0.869814) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.869826) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.869835) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.870023) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.70* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.70* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.70* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %rt10 = add i64 %r0, 4
  %rt11 = inttoptr i64 %rt10 to i16*
  %r4 = load i16* %rt11, align 2
  %rt12 = zext i16 %r2 to i32
  %rt13 = zext i16 %r3 to i32
  %rt14 = mul i32 %rt12, %rt13
  %rt15 = lshr i32 %rt14, 16
  %rt16 = trunc i32 %rt15 to i16
  %r5 = add i16 %rt16, %r4
  %rt17 = inttoptr i64 %r1 to i16*
  store i16 %r5, i16* %rt17, align 2
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r6 = bitcast i32 0 to i32
  %rt18 = zext i32 %r6 to i64
  %rt19 = getelementptr %LLVMContext.70* %__ctaContext, i32 0, i32 4
  %rt20 = load i8** %rt19
  %rt21 = ptrtoint i8* %rt20 to i64
  %rt22 = add i64 %rt18, %rt21
  %rt23 = inttoptr i64 %rt22 to i32*
  store i32 6, i32* %rt23, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.70* %__ctaContext to %LLVMContext.70**
  %context.t0 = load %LLVMContext.70** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.70* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.70* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %rt10 = add i64 %r0, 4
  %rt11 = inttoptr i64 %rt10 to i16*
  %r4 = load i16* %rt11, align 2
  %rt12 = zext i16 %r2 to i32
  %rt13 = zext i16 %r3 to i32
  %rt14 = mul i32 %rt13, %rt12
  %rt15 = lshr i32 %rt14, 16
  %rt16 = trunc i32 %rt15 to i16
  %r5 = add i16 %rt16, %r4
  %rt17 = inttoptr i64 %r1 to i16*
  store i16 %r5, i16* %rt17, align 2
  %rt23 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt23, align 4
  ret void

}
(0.873456) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.874726) LLVMDynamicTranslationCache.cpp:137:  inserting translation 2359296 with 48 bytes of local memory
(0.891446) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMad-Wide-u16
(0.891458) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(0.892814) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.892825) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i16*;
	%r2 = load i16* %rt7, align 2;
	%rt8 = add i64 %r0, 2;
	%rt9 = inttoptr i64 %rt8 to i16*;
	%r3 = load i16* %rt9, align 2;
	%rt10 = add i64 %r0, 4;
	%rt11 = inttoptr i64 %rt10 to i32*;
	%r4 = load i32* %rt11, align 4;
	%rt12 = zext i16 %r2 to i32;
	%rt13 = zext i16 %r3 to i32;
	%rt14 = mul i32 %rt12, %rt13;
	%r5 = add i32 %r4, %rt14;
	%rt15 = inttoptr i64 %r1 to i32*;
	store i32 %r5, i32* %rt15, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r6 = bitcast i32 0 to i32;
	%rt16 = zext i32 %r6 to i64;
	%rt17 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt18 = load i8** %rt17;
	%rt19 = ptrtoint i8* %rt18 to i64;
	%rt20 = add i64 %rt16, %rt19;
	%rt21 = inttoptr i64 %rt20 to i32*;
	store i32 6, i32* %rt21, align 4;
	br label %exit;
exit:
	ret void;

}

(0.893747) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.893759) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.893767) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.893954) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.72* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.72* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.72* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %rt10 = add i64 %r0, 4
  %rt11 = inttoptr i64 %rt10 to i32*
  %r4 = load i32* %rt11, align 4
  %rt12 = zext i16 %r2 to i32
  %rt13 = zext i16 %r3 to i32
  %rt14 = mul i32 %rt12, %rt13
  %r5 = add i32 %r4, %rt14
  %rt15 = inttoptr i64 %r1 to i32*
  store i32 %r5, i32* %rt15, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r6 = bitcast i32 0 to i32
  %rt16 = zext i32 %r6 to i64
  %rt17 = getelementptr %LLVMContext.72* %__ctaContext, i32 0, i32 4
  %rt18 = load i8** %rt17
  %rt19 = ptrtoint i8* %rt18 to i64
  %rt20 = add i64 %rt16, %rt19
  %rt21 = inttoptr i64 %rt20 to i32*
  store i32 6, i32* %rt21, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.72* %__ctaContext to %LLVMContext.72**
  %context.t0 = load %LLVMContext.72** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.72* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.72* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %rt10 = add i64 %r0, 4
  %rt11 = inttoptr i64 %rt10 to i32*
  %r4 = load i32* %rt11, align 4
  %rt12 = zext i16 %r2 to i32
  %rt13 = zext i16 %r3 to i32
  %rt14 = mul i32 %rt13, %rt12
  %r5 = add i32 %rt14, %r4
  %rt15 = inttoptr i64 %r1 to i32*
  store i32 %r5, i32* %rt15, align 4
  %rt21 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt21, align 4
  ret void

}
(0.897273) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.898391) LLVMDynamicTranslationCache.cpp:137:  inserting translation 2424832 with 48 bytes of local memory
(0.915049) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMad-Lo-s16
(0.915061) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(0.916433) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.916444) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i16*;
	%r2 = load i16* %rt7, align 2;
	%rt8 = add i64 %r0, 2;
	%rt9 = inttoptr i64 %rt8 to i16*;
	%r3 = load i16* %rt9, align 2;
	%rt10 = add i64 %r0, 4;
	%rt11 = inttoptr i64 %rt10 to i16*;
	%r4 = load i16* %rt11, align 2;
	%rt12 = mul i16 %r2, %r3;
	%r5 = add i16 %r4, %rt12;
	%rt13 = inttoptr i64 %r1 to i16*;
	store i16 %r5, i16* %rt13, align 2;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r6 = bitcast i32 0 to i32;
	%rt14 = zext i32 %r6 to i64;
	%rt15 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt16 = load i8** %rt15;
	%rt17 = ptrtoint i8* %rt16 to i64;
	%rt18 = add i64 %rt14, %rt17;
	%rt19 = inttoptr i64 %rt18 to i32*;
	store i32 6, i32* %rt19, align 4;
	br label %exit;
exit:
	ret void;

}

(0.917349) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.917360) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.917368) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.917555) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.74* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.74* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.74* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %rt10 = add i64 %r0, 4
  %rt11 = inttoptr i64 %rt10 to i16*
  %r4 = load i16* %rt11, align 2
  %rt12 = mul i16 %r2, %r3
  %r5 = add i16 %r4, %rt12
  %rt13 = inttoptr i64 %r1 to i16*
  store i16 %r5, i16* %rt13, align 2
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r6 = bitcast i32 0 to i32
  %rt14 = zext i32 %r6 to i64
  %rt15 = getelementptr %LLVMContext.74* %__ctaContext, i32 0, i32 4
  %rt16 = load i8** %rt15
  %rt17 = ptrtoint i8* %rt16 to i64
  %rt18 = add i64 %rt14, %rt17
  %rt19 = inttoptr i64 %rt18 to i32*
  store i32 6, i32* %rt19, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.74* %__ctaContext to %LLVMContext.74**
  %context.t0 = load %LLVMContext.74** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.74* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.74* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %rt10 = add i64 %r0, 4
  %rt11 = inttoptr i64 %rt10 to i16*
  %r4 = load i16* %rt11, align 2
  %rt12 = mul i16 %r3, %r2
  %r5 = add i16 %r4, %rt12
  %rt13 = inttoptr i64 %r1 to i16*
  store i16 %r5, i16* %rt13, align 2
  %rt19 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt19, align 4
  ret void

}
(0.920714) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.921777) LLVMDynamicTranslationCache.cpp:137:  inserting translation 2490368 with 48 bytes of local memory
(0.939458) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMad-Hi-s16
(0.939470) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(0.940869) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.940880) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i16*;
	%r2 = load i16* %rt7, align 2;
	%rt8 = add i64 %r0, 2;
	%rt9 = inttoptr i64 %rt8 to i16*;
	%r3 = load i16* %rt9, align 2;
	%rt10 = add i64 %r0, 4;
	%rt11 = inttoptr i64 %rt10 to i16*;
	%r4 = load i16* %rt11, align 2;
	%rt12 = sext i16 %r2 to i32;
	%rt13 = sext i16 %r3 to i32;
	%rt14 = mul i32 %rt12, %rt13;
	%rt15 = ashr i32 %rt14, 16;
	%rt16 = trunc i32 %rt15 to i16;
	%r5 = add i16 %rt16, %r4;
	%rt17 = inttoptr i64 %r1 to i16*;
	store i16 %r5, i16* %rt17, align 2;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r6 = bitcast i32 0 to i32;
	%rt18 = zext i32 %r6 to i64;
	%rt19 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt20 = load i8** %rt19;
	%rt21 = ptrtoint i8* %rt20 to i64;
	%rt22 = add i64 %rt18, %rt21;
	%rt23 = inttoptr i64 %rt22 to i32*;
	store i32 6, i32* %rt23, align 4;
	br label %exit;
exit:
	ret void;

}

(0.941798) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.941810) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.941818) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.942005) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.76* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.76* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.76* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %rt10 = add i64 %r0, 4
  %rt11 = inttoptr i64 %rt10 to i16*
  %r4 = load i16* %rt11, align 2
  %rt12 = sext i16 %r2 to i32
  %rt13 = sext i16 %r3 to i32
  %rt14 = mul i32 %rt12, %rt13
  %rt15 = ashr i32 %rt14, 16
  %rt16 = trunc i32 %rt15 to i16
  %r5 = add i16 %rt16, %r4
  %rt17 = inttoptr i64 %r1 to i16*
  store i16 %r5, i16* %rt17, align 2
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r6 = bitcast i32 0 to i32
  %rt18 = zext i32 %r6 to i64
  %rt19 = getelementptr %LLVMContext.76* %__ctaContext, i32 0, i32 4
  %rt20 = load i8** %rt19
  %rt21 = ptrtoint i8* %rt20 to i64
  %rt22 = add i64 %rt18, %rt21
  %rt23 = inttoptr i64 %rt22 to i32*
  store i32 6, i32* %rt23, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.76* %__ctaContext to %LLVMContext.76**
  %context.t0 = load %LLVMContext.76** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.76* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.76* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %rt10 = add i64 %r0, 4
  %rt11 = inttoptr i64 %rt10 to i16*
  %r4 = load i16* %rt11, align 2
  %rt12 = sext i16 %r2 to i32
  %rt13 = sext i16 %r3 to i32
  %rt14 = mul i32 %rt13, %rt12
  %rt151 = lshr i32 %rt14, 16
  %rt16 = trunc i32 %rt151 to i16
  %r5 = add i16 %rt16, %r4
  %rt17 = inttoptr i64 %r1 to i16*
  store i16 %r5, i16* %rt17, align 2
  %rt23 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt23, align 4
  ret void

}
(0.945413) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.946585) LLVMDynamicTranslationCache.cpp:137:  inserting translation 2555904 with 48 bytes of local memory
(0.963309) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMad-Wide-s16
(0.963321) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(0.964674) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.964685) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i16*;
	%r2 = load i16* %rt7, align 2;
	%rt8 = add i64 %r0, 2;
	%rt9 = inttoptr i64 %rt8 to i16*;
	%r3 = load i16* %rt9, align 2;
	%rt10 = add i64 %r0, 4;
	%rt11 = inttoptr i64 %rt10 to i32*;
	%r4 = load i32* %rt11, align 4;
	%rt12 = sext i16 %r2 to i32;
	%rt13 = sext i16 %r3 to i32;
	%rt14 = mul i32 %rt12, %rt13;
	%r5 = add i32 %r4, %rt14;
	%rt15 = inttoptr i64 %r1 to i32*;
	store i32 %r5, i32* %rt15, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r6 = bitcast i32 0 to i32;
	%rt16 = zext i32 %r6 to i64;
	%rt17 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt18 = load i8** %rt17;
	%rt19 = ptrtoint i8* %rt18 to i64;
	%rt20 = add i64 %rt16, %rt19;
	%rt21 = inttoptr i64 %rt20 to i32*;
	store i32 6, i32* %rt21, align 4;
	br label %exit;
exit:
	ret void;

}

(0.965630) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.965642) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.965651) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.965840) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.78* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.78* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.78* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %rt10 = add i64 %r0, 4
  %rt11 = inttoptr i64 %rt10 to i32*
  %r4 = load i32* %rt11, align 4
  %rt12 = sext i16 %r2 to i32
  %rt13 = sext i16 %r3 to i32
  %rt14 = mul i32 %rt12, %rt13
  %r5 = add i32 %r4, %rt14
  %rt15 = inttoptr i64 %r1 to i32*
  store i32 %r5, i32* %rt15, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r6 = bitcast i32 0 to i32
  %rt16 = zext i32 %r6 to i64
  %rt17 = getelementptr %LLVMContext.78* %__ctaContext, i32 0, i32 4
  %rt18 = load i8** %rt17
  %rt19 = ptrtoint i8* %rt18 to i64
  %rt20 = add i64 %rt16, %rt19
  %rt21 = inttoptr i64 %rt20 to i32*
  store i32 6, i32* %rt21, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.78* %__ctaContext to %LLVMContext.78**
  %context.t0 = load %LLVMContext.78** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.78* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.78* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %rt10 = add i64 %r0, 4
  %rt11 = inttoptr i64 %rt10 to i32*
  %r4 = load i32* %rt11, align 4
  %rt12 = sext i16 %r2 to i32
  %rt13 = sext i16 %r3 to i32
  %rt14 = mul i32 %rt13, %rt12
  %r5 = add i32 %rt14, %r4
  %rt15 = inttoptr i64 %r1 to i32*
  store i32 %r5, i32* %rt15, align 4
  %rt21 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt21, align 4
  ret void

}
(0.969158) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.970260) LLVMDynamicTranslationCache.cpp:137:  inserting translation 2621440 with 48 bytes of local memory
(0.987012) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMad-Lo-u32
(0.987024) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(0.988367) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.988378) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = add i64 %r0, 4;
	%rt9 = inttoptr i64 %rt8 to i32*;
	%r3 = load i32* %rt9, align 4;
	%rt10 = add i64 %r0, 8;
	%rt11 = inttoptr i64 %rt10 to i32*;
	%r4 = load i32* %rt11, align 4;
	%rt12 = mul i32 %r2, %r3;
	%r5 = add i32 %r4, %rt12;
	%rt13 = inttoptr i64 %r1 to i32*;
	store i32 %r5, i32* %rt13, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r6 = bitcast i32 0 to i32;
	%rt14 = zext i32 %r6 to i64;
	%rt15 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt16 = load i8** %rt15;
	%rt17 = ptrtoint i8* %rt16 to i64;
	%rt18 = add i64 %rt14, %rt17;
	%rt19 = inttoptr i64 %rt18 to i32*;
	store i32 6, i32* %rt19, align 4;
	br label %exit;
exit:
	ret void;

}

(0.989296) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.989307) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.989316) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.989503) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.80* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.80* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.80* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = add i64 %r0, 8
  %rt11 = inttoptr i64 %rt10 to i32*
  %r4 = load i32* %rt11, align 4
  %rt12 = mul i32 %r2, %r3
  %r5 = add i32 %r4, %rt12
  %rt13 = inttoptr i64 %r1 to i32*
  store i32 %r5, i32* %rt13, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r6 = bitcast i32 0 to i32
  %rt14 = zext i32 %r6 to i64
  %rt15 = getelementptr %LLVMContext.80* %__ctaContext, i32 0, i32 4
  %rt16 = load i8** %rt15
  %rt17 = ptrtoint i8* %rt16 to i64
  %rt18 = add i64 %rt14, %rt17
  %rt19 = inttoptr i64 %rt18 to i32*
  store i32 6, i32* %rt19, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.80* %__ctaContext to %LLVMContext.80**
  %context.t0 = load %LLVMContext.80** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.80* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.80* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = add i64 %r0, 8
  %rt11 = inttoptr i64 %rt10 to i32*
  %r4 = load i32* %rt11, align 4
  %rt12 = mul i32 %r3, %r2
  %r5 = add i32 %r4, %rt12
  %rt13 = inttoptr i64 %r1 to i32*
  store i32 %r5, i32* %rt13, align 4
  %rt19 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt19, align 4
  ret void

}
(0.992629) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.993784) LLVMDynamicTranslationCache.cpp:137:  inserting translation 2686976 with 48 bytes of local memory
(1.010652) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMad-Hi-u32
(1.010663) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(1.012060) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(1.012072) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = add i64 %r0, 4;
	%rt9 = inttoptr i64 %rt8 to i32*;
	%r3 = load i32* %rt9, align 4;
	%rt10 = add i64 %r0, 8;
	%rt11 = inttoptr i64 %rt10 to i32*;
	%r4 = load i32* %rt11, align 4;
	%rt12 = zext i32 %r2 to i64;
	%rt13 = zext i32 %r3 to i64;
	%rt14 = mul i64 %rt12, %rt13;
	%rt15 = lshr i64 %rt14, 32;
	%rt16 = trunc i64 %rt15 to i32;
	%r5 = add i32 %rt16, %r4;
	%rt17 = inttoptr i64 %r1 to i32*;
	store i32 %r5, i32* %rt17, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r6 = bitcast i32 0 to i32;
	%rt18 = zext i32 %r6 to i64;
	%rt19 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt20 = load i8** %rt19;
	%rt21 = ptrtoint i8* %rt20 to i64;
	%rt22 = add i64 %rt18, %rt21;
	%rt23 = inttoptr i64 %rt22 to i32*;
	store i32 6, i32* %rt23, align 4;
	br label %exit;
exit:
	ret void;

}

(1.013010) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(1.013022) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(1.013030) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(1.013218) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.82* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.82* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.82* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = add i64 %r0, 8
  %rt11 = inttoptr i64 %rt10 to i32*
  %r4 = load i32* %rt11, align 4
  %rt12 = zext i32 %r2 to i64
  %rt13 = zext i32 %r3 to i64
  %rt14 = mul i64 %rt12, %rt13
  %rt15 = lshr i64 %rt14, 32
  %rt16 = trunc i64 %rt15 to i32
  %r5 = add i32 %rt16, %r4
  %rt17 = inttoptr i64 %r1 to i32*
  store i32 %r5, i32* %rt17, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r6 = bitcast i32 0 to i32
  %rt18 = zext i32 %r6 to i64
  %rt19 = getelementptr %LLVMContext.82* %__ctaContext, i32 0, i32 4
  %rt20 = load i8** %rt19
  %rt21 = ptrtoint i8* %rt20 to i64
  %rt22 = add i64 %rt18, %rt21
  %rt23 = inttoptr i64 %rt22 to i32*
  store i32 6, i32* %rt23, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.82* %__ctaContext to %LLVMContext.82**
  %context.t0 = load %LLVMContext.82** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.82* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.82* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = add i64 %r0, 8
  %rt11 = inttoptr i64 %rt10 to i32*
  %r4 = load i32* %rt11, align 4
  %rt12 = zext i32 %r2 to i64
  %rt13 = zext i32 %r3 to i64
  %rt14 = mul i64 %rt13, %rt12
  %rt15 = lshr i64 %rt14, 32
  %rt16 = trunc i64 %rt15 to i32
  %r5 = add i32 %rt16, %r4
  %rt17 = inttoptr i64 %r1 to i32*
  store i32 %r5, i32* %rt17, align 4
  %rt23 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt23, align 4
  ret void

}
(1.016673) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(1.017868) LLVMDynamicTranslationCache.cpp:137:  inserting translation 2752512 with 48 bytes of local memory
(1.034655) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMad-Wide-u32
(1.034667) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(1.036017) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(1.036028) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = add i64 %r0, 4;
	%rt9 = inttoptr i64 %rt8 to i32*;
	%r3 = load i32* %rt9, align 4;
	%rt10 = add i64 %r0, 8;
	%rt11 = inttoptr i64 %rt10 to i64*;
	%r4 = load i64* %rt11, align 8;
	%rt12 = zext i32 %r2 to i64;
	%rt13 = zext i32 %r3 to i64;
	%rt14 = mul i64 %rt12, %rt13;
	%r5 = add i64 %r4, %rt14;
	%rt15 = inttoptr i64 %r1 to i64*;
	store i64 %r5, i64* %rt15, align 8;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r6 = bitcast i32 0 to i32;
	%rt16 = zext i32 %r6 to i64;
	%rt17 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt18 = load i8** %rt17;
	%rt19 = ptrtoint i8* %rt18 to i64;
	%rt20 = add i64 %rt16, %rt19;
	%rt21 = inttoptr i64 %rt20 to i32*;
	store i32 6, i32* %rt21, align 4;
	br label %exit;
exit:
	ret void;

}

(1.037016) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(1.037028) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(1.037036) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(1.037223) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.84* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.84* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.84* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = add i64 %r0, 8
  %rt11 = inttoptr i64 %rt10 to i64*
  %r4 = load i64* %rt11, align 8
  %rt12 = zext i32 %r2 to i64
  %rt13 = zext i32 %r3 to i64
  %rt14 = mul i64 %rt12, %rt13
  %r5 = add i64 %r4, %rt14
  %rt15 = inttoptr i64 %r1 to i64*
  store i64 %r5, i64* %rt15, align 8
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r6 = bitcast i32 0 to i32
  %rt16 = zext i32 %r6 to i64
  %rt17 = getelementptr %LLVMContext.84* %__ctaContext, i32 0, i32 4
  %rt18 = load i8** %rt17
  %rt19 = ptrtoint i8* %rt18 to i64
  %rt20 = add i64 %rt16, %rt19
  %rt21 = inttoptr i64 %rt20 to i32*
  store i32 6, i32* %rt21, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.84* %__ctaContext to %LLVMContext.84**
  %context.t0 = load %LLVMContext.84** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.84* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.84* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = add i64 %r0, 8
  %rt11 = inttoptr i64 %rt10 to i64*
  %r4 = load i64* %rt11, align 8
  %rt12 = zext i32 %r2 to i64
  %rt13 = zext i32 %r3 to i64
  %rt14 = mul i64 %rt13, %rt12
  %r5 = add i64 %rt14, %r4
  %rt15 = inttoptr i64 %r1 to i64*
  store i64 %r5, i64* %rt15, align 8
  %rt21 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt21, align 4
  ret void

}
(1.040512) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(1.041629) LLVMDynamicTranslationCache.cpp:137:  inserting translation 2818048 with 48 bytes of local memory
(1.058284) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMad-Lo-s32
(1.058296) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(1.059631) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(1.059642) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = add i64 %r0, 4;
	%rt9 = inttoptr i64 %rt8 to i32*;
	%r3 = load i32* %rt9, align 4;
	%rt10 = add i64 %r0, 8;
	%rt11 = inttoptr i64 %rt10 to i32*;
	%r4 = load i32* %rt11, align 4;
	%rt12 = mul i32 %r2, %r3;
	%r5 = add i32 %r4, %rt12;
	%rt13 = inttoptr i64 %r1 to i32*;
	store i32 %r5, i32* %rt13, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r6 = bitcast i32 0 to i32;
	%rt14 = zext i32 %r6 to i64;
	%rt15 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt16 = load i8** %rt15;
	%rt17 = ptrtoint i8* %rt16 to i64;
	%rt18 = add i64 %rt14, %rt17;
	%rt19 = inttoptr i64 %rt18 to i32*;
	store i32 6, i32* %rt19, align 4;
	br label %exit;
exit:
	ret void;

}

(1.060538) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(1.060549) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(1.060557) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(1.060745) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.86* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.86* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.86* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = add i64 %r0, 8
  %rt11 = inttoptr i64 %rt10 to i32*
  %r4 = load i32* %rt11, align 4
  %rt12 = mul i32 %r2, %r3
  %r5 = add i32 %r4, %rt12
  %rt13 = inttoptr i64 %r1 to i32*
  store i32 %r5, i32* %rt13, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r6 = bitcast i32 0 to i32
  %rt14 = zext i32 %r6 to i64
  %rt15 = getelementptr %LLVMContext.86* %__ctaContext, i32 0, i32 4
  %rt16 = load i8** %rt15
  %rt17 = ptrtoint i8* %rt16 to i64
  %rt18 = add i64 %rt14, %rt17
  %rt19 = inttoptr i64 %rt18 to i32*
  store i32 6, i32* %rt19, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.86* %__ctaContext to %LLVMContext.86**
  %context.t0 = load %LLVMContext.86** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.86* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.86* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = add i64 %r0, 8
  %rt11 = inttoptr i64 %rt10 to i32*
  %r4 = load i32* %rt11, align 4
  %rt12 = mul i32 %r3, %r2
  %r5 = add i32 %r4, %rt12
  %rt13 = inttoptr i64 %r1 to i32*
  store i32 %r5, i32* %rt13, align 4
  %rt19 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt19, align 4
  ret void

}
(1.063864) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(1.064905) LLVMDynamicTranslationCache.cpp:137:  inserting translation 2883584 with 48 bytes of local memory
(1.082777) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMad-Hi-s32
(1.082790) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(1.084189) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(1.084200) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = add i64 %r0, 4;
	%rt9 = inttoptr i64 %rt8 to i32*;
	%r3 = load i32* %rt9, align 4;
	%rt10 = add i64 %r0, 8;
	%rt11 = inttoptr i64 %rt10 to i32*;
	%r4 = load i32* %rt11, align 4;
	%rt12 = sext i32 %r2 to i64;
	%rt13 = sext i32 %r3 to i64;
	%rt14 = mul i64 %rt12, %rt13;
	%rt15 = ashr i64 %rt14, 32;
	%rt16 = trunc i64 %rt15 to i32;
	%r5 = add i32 %rt16, %r4;
	%rt17 = inttoptr i64 %r1 to i32*;
	store i32 %r5, i32* %rt17, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r6 = bitcast i32 0 to i32;
	%rt18 = zext i32 %r6 to i64;
	%rt19 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt20 = load i8** %rt19;
	%rt21 = ptrtoint i8* %rt20 to i64;
	%rt22 = add i64 %rt18, %rt21;
	%rt23 = inttoptr i64 %rt22 to i32*;
	store i32 6, i32* %rt23, align 4;
	br label %exit;
exit:
	ret void;

}

(1.085193) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(1.085208) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(1.085217) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(1.085407) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.88* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.88* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.88* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = add i64 %r0, 8
  %rt11 = inttoptr i64 %rt10 to i32*
  %r4 = load i32* %rt11, align 4
  %rt12 = sext i32 %r2 to i64
  %rt13 = sext i32 %r3 to i64
  %rt14 = mul i64 %rt12, %rt13
  %rt15 = ashr i64 %rt14, 32
  %rt16 = trunc i64 %rt15 to i32
  %r5 = add i32 %rt16, %r4
  %rt17 = inttoptr i64 %r1 to i32*
  store i32 %r5, i32* %rt17, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r6 = bitcast i32 0 to i32
  %rt18 = zext i32 %r6 to i64
  %rt19 = getelementptr %LLVMContext.88* %__ctaContext, i32 0, i32 4
  %rt20 = load i8** %rt19
  %rt21 = ptrtoint i8* %rt20 to i64
  %rt22 = add i64 %rt18, %rt21
  %rt23 = inttoptr i64 %rt22 to i32*
  store i32 6, i32* %rt23, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.88* %__ctaContext to %LLVMContext.88**
  %context.t0 = load %LLVMContext.88** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.88* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.88* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = add i64 %r0, 8
  %rt11 = inttoptr i64 %rt10 to i32*
  %r4 = load i32* %rt11, align 4
  %rt12 = sext i32 %r2 to i64
  %rt13 = sext i32 %r3 to i64
  %rt14 = mul i64 %rt13, %rt12
  %rt151 = lshr i64 %rt14, 32
  %rt16 = trunc i64 %rt151 to i32
  %r5 = add i32 %rt16, %r4
  %rt17 = inttoptr i64 %r1 to i32*
  store i32 %r5, i32* %rt17, align 4
  %rt23 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt23, align 4
  ret void

}
(1.089008) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(1.090313) LLVMDynamicTranslationCache.cpp:137:  inserting translation 2949120 with 48 bytes of local memory
(1.107093) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMad-Sat-Hi-s32
(1.107104) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(1.108579) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(1.108591) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = add i64 %r0, 4;
	%rt9 = inttoptr i64 %rt8 to i32*;
	%r3 = load i32* %rt9, align 4;
	%rt10 = add i64 %r0, 8;
	%rt11 = inttoptr i64 %rt10 to i32*;
	%r4 = load i32* %rt11, align 4;
	%rt12 = sext i32 %r2 to i64;
	%rt13 = sext i32 %r3 to i64;
	%rt14 = sext i32 %r4 to i64;
	%rt15 = mul i64 %rt12, %rt13;
	%rt16 = ashr i64 %rt15, 32;
	%rt17 = add i64 %rt16, %rt14;
	%rt18 = icmp slt i64 %rt17, -2147483648;
	%rt19 = select i1 %rt18, i64 -2147483648, i64 %rt17;
	%rt20 = icmp sgt i64 %rt19, 2147483647;
	%rt21 = select i1 %rt20, i64 2147483647, i64 %rt19;
	%r5 = trunc i64 %rt21 to i32;
	%rt22 = inttoptr i64 %r1 to i32*;
	store i32 %r5, i32* %rt22, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r6 = bitcast i32 0 to i32;
	%rt23 = zext i32 %r6 to i64;
	%rt24 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt25 = load i8** %rt24;
	%rt26 = ptrtoint i8* %rt25 to i64;
	%rt27 = add i64 %rt23, %rt26;
	%rt28 = inttoptr i64 %rt27 to i32*;
	store i32 6, i32* %rt28, align 4;
	br label %exit;
exit:
	ret void;

}

(1.109548) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(1.109559) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(1.109567) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(1.109753) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.90* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.90* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.90* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = add i64 %r0, 8
  %rt11 = inttoptr i64 %rt10 to i32*
  %r4 = load i32* %rt11, align 4
  %rt12 = sext i32 %r2 to i64
  %rt13 = sext i32 %r3 to i64
  %rt14 = sext i32 %r4 to i64
  %rt15 = mul i64 %rt12, %rt13
  %rt16 = ashr i64 %rt15, 32
  %rt17 = add i64 %rt16, %rt14
  %rt18 = icmp slt i64 %rt17, -2147483648
  %rt19 = select i1 %rt18, i64 -2147483648, i64 %rt17
  %rt20 = icmp sgt i64 %rt19, 2147483647
  %rt21 = select i1 %rt20, i64 2147483647, i64 %rt19
  %r5 = trunc i64 %rt21 to i32
  %rt22 = inttoptr i64 %r1 to i32*
  store i32 %r5, i32* %rt22, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r6 = bitcast i32 0 to i32
  %rt23 = zext i32 %r6 to i64
  %rt24 = getelementptr %LLVMContext.90* %__ctaContext, i32 0, i32 4
  %rt25 = load i8** %rt24
  %rt26 = ptrtoint i8* %rt25 to i64
  %rt27 = add i64 %rt23, %rt26
  %rt28 = inttoptr i64 %rt27 to i32*
  store i32 6, i32* %rt28, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.90* %__ctaContext to %LLVMContext.90**
  %context.t0 = load %LLVMContext.90** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.90* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.90* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = add i64 %r0, 8
  %rt11 = inttoptr i64 %rt10 to i32*
  %r4 = load i32* %rt11, align 4
  %rt12 = sext i32 %r2 to i64
  %rt13 = sext i32 %r3 to i64
  %rt14 = sext i32 %r4 to i64
  %rt15 = mul i64 %rt13, %rt12
  %rt16 = ashr i64 %rt15, 32
  %rt17 = add i64 %rt16, %rt14
  %rt18 = icmp slt i64 %rt17, -2147483648
  %rt19 = select i1 %rt18, i64 -2147483648, i64 %rt17
  %rt20 = icmp sgt i64 %rt19, 2147483647
  %0 = trunc i64 %rt19 to i32
  %r5 = select i1 %rt20, i32 2147483647, i32 %0
  %rt22 = inttoptr i64 %r1 to i32*
  store i32 %r5, i32* %rt22, align 4
  %rt28 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt28, align 4
  ret void

}
(1.113623) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(1.115013) LLVMDynamicTranslationCache.cpp:137:  inserting translation 3014656 with 48 bytes of local memory
(1.130968) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMad-Wide-s32
(1.130980) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(1.132370) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(1.132381) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = add i64 %r0, 4;
	%rt9 = inttoptr i64 %rt8 to i32*;
	%r3 = load i32* %rt9, align 4;
	%rt10 = add i64 %r0, 8;
	%rt11 = inttoptr i64 %rt10 to i64*;
	%r4 = load i64* %rt11, align 8;
	%rt12 = sext i32 %r2 to i64;
	%rt13 = sext i32 %r3 to i64;
	%rt14 = mul i64 %rt12, %rt13;
	%r5 = add i64 %r4, %rt14;
	%rt15 = inttoptr i64 %r1 to i64*;
	store i64 %r5, i64* %rt15, align 8;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r6 = bitcast i32 0 to i32;
	%rt16 = zext i32 %r6 to i64;
	%rt17 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt18 = load i8** %rt17;
	%rt19 = ptrtoint i8* %rt18 to i64;
	%rt20 = add i64 %rt16, %rt19;
	%rt21 = inttoptr i64 %rt20 to i32*;
	store i32 6, i32* %rt21, align 4;
	br label %exit;
exit:
	ret void;

}

(1.133327) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(1.133350) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(1.133358) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(1.133539) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.92* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.92* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.92* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = add i64 %r0, 8
  %rt11 = inttoptr i64 %rt10 to i64*
  %r4 = load i64* %rt11, align 8
  %rt12 = sext i32 %r2 to i64
  %rt13 = sext i32 %r3 to i64
  %rt14 = mul i64 %rt12, %rt13
  %r5 = add i64 %r4, %rt14
  %rt15 = inttoptr i64 %r1 to i64*
  store i64 %r5, i64* %rt15, align 8
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r6 = bitcast i32 0 to i32
  %rt16 = zext i32 %r6 to i64
  %rt17 = getelementptr %LLVMContext.92* %__ctaContext, i32 0, i32 4
  %rt18 = load i8** %rt17
  %rt19 = ptrtoint i8* %rt18 to i64
  %rt20 = add i64 %rt16, %rt19
  %rt21 = inttoptr i64 %rt20 to i32*
  store i32 6, i32* %rt21, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.92* %__ctaContext to %LLVMContext.92**
  %context.t0 = load %LLVMContext.92** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.92* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.92* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = add i64 %r0, 8
  %rt11 = inttoptr i64 %rt10 to i64*
  %r4 = load i64* %rt11, align 8
  %rt12 = sext i32 %r2 to i64
  %rt13 = sext i32 %r3 to i64
  %rt14 = mul i64 %rt13, %rt12
  %r5 = add i64 %rt14, %r4
  %rt15 = inttoptr i64 %r1 to i64*
  store i64 %r5, i64* %rt15, align 8
  %rt21 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt21, align 4
  ret void

}
(1.136853) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(1.138036) LLVMDynamicTranslationCache.cpp:137:  inserting translation 3080192 with 48 bytes of local memory
(1.154747) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMad-Lo-u64
(1.154758) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(1.156094) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(1.156105) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i64*;
	%r2 = load i64* %rt7, align 8;
	%rt8 = add i64 %r0, 8;
	%rt9 = inttoptr i64 %rt8 to i64*;
	%r3 = load i64* %rt9, align 8;
	%rt10 = add i64 %r0, 16;
	%rt11 = inttoptr i64 %rt10 to i64*;
	%r4 = load i64* %rt11, align 8;
	%rt12 = mul i64 %r2, %r3;
	%r5 = add i64 %r4, %rt12;
	%rt13 = inttoptr i64 %r1 to i64*;
	store i64 %r5, i64* %rt13, align 8;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r6 = bitcast i32 0 to i32;
	%rt14 = zext i32 %r6 to i64;
	%rt15 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt16 = load i8** %rt15;
	%rt17 = ptrtoint i8* %rt16 to i64;
	%rt18 = add i64 %rt14, %rt17;
	%rt19 = inttoptr i64 %rt18 to i32*;
	store i32 6, i32* %rt19, align 4;
	br label %exit;
exit:
	ret void;

}

(1.157094) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(1.157106) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(1.157114) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(1.157304) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.94* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.94* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.94* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %rt10 = add i64 %r0, 16
  %rt11 = inttoptr i64 %rt10 to i64*
  %r4 = load i64* %rt11, align 8
  %rt12 = mul i64 %r2, %r3
  %r5 = add i64 %r4, %rt12
  %rt13 = inttoptr i64 %r1 to i64*
  store i64 %r5, i64* %rt13, align 8
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r6 = bitcast i32 0 to i32
  %rt14 = zext i32 %r6 to i64
  %rt15 = getelementptr %LLVMContext.94* %__ctaContext, i32 0, i32 4
  %rt16 = load i8** %rt15
  %rt17 = ptrtoint i8* %rt16 to i64
  %rt18 = add i64 %rt14, %rt17
  %rt19 = inttoptr i64 %rt18 to i32*
  store i32 6, i32* %rt19, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.94* %__ctaContext to %LLVMContext.94**
  %context.t0 = load %LLVMContext.94** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.94* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.94* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %rt10 = add i64 %r0, 16
  %rt11 = inttoptr i64 %rt10 to i64*
  %r4 = load i64* %rt11, align 8
  %rt12 = mul i64 %r3, %r2
  %r5 = add i64 %r4, %rt12
  %rt13 = inttoptr i64 %r1 to i64*
  store i64 %r5, i64* %rt13, align 8
  %rt19 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt19, align 4
  ret void

}
(1.160427) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(1.161508) LLVMDynamicTranslationCache.cpp:137:  inserting translation 3145728 with 48 bytes of local memory
(1.178392) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMad-Hi-u64
(1.178404) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(1.179769) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(1.179780) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i64*;
	%r2 = load i64* %rt7, align 8;
	%rt8 = add i64 %r0, 8;
	%rt9 = inttoptr i64 %rt8 to i64*;
	%r3 = load i64* %rt9, align 8;
	%rt10 = add i64 %r0, 16;
	%rt11 = inttoptr i64 %rt10 to i64*;
	%r4 = load i64* %rt11, align 8;
	%rt12 = call i64 @__ocelot_mul_hi_u64(i64 %r2, i64 %r3);
	%r5 = add i64 %rt12, %r4;
	%rt13 = inttoptr i64 %r1 to i64*;
	store i64 %r5, i64* %rt13, align 8;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r6 = bitcast i32 0 to i32;
	%rt14 = zext i32 %r6 to i64;
	%rt15 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt16 = load i8** %rt15;
	%rt17 = ptrtoint i8* %rt16 to i64;
	%rt18 = add i64 %rt14, %rt17;
	%rt19 = inttoptr i64 %rt18 to i32*;
	store i32 6, i32* %rt19, align 4;
	br label %exit;
exit:
	ret void;

}

(1.180716) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(1.180727) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(1.180735) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(1.180922) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.96* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.96* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.96* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %rt10 = add i64 %r0, 16
  %rt11 = inttoptr i64 %rt10 to i64*
  %r4 = load i64* %rt11, align 8
  %rt12 = call i64 @__ocelot_mul_hi_u64(i64 %r2, i64 %r3)
  %r5 = add i64 %rt12, %r4
  %rt13 = inttoptr i64 %r1 to i64*
  store i64 %r5, i64* %rt13, align 8
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r6 = bitcast i32 0 to i32
  %rt14 = zext i32 %r6 to i64
  %rt15 = getelementptr %LLVMContext.96* %__ctaContext, i32 0, i32 4
  %rt16 = load i8** %rt15
  %rt17 = ptrtoint i8* %rt16 to i64
  %rt18 = add i64 %rt14, %rt17
  %rt19 = inttoptr i64 %rt18 to i32*
  store i32 6, i32* %rt19, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.96* %__ctaContext to %LLVMContext.96**
  %context.t0 = load %LLVMContext.96** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.96* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.96* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %rt10 = add i64 %r0, 16
  %rt11 = inttoptr i64 %rt10 to i64*
  %r4 = load i64* %rt11, align 8
  %rt12 = tail call i64 @__ocelot_mul_hi_u64(i64 %r2, i64 %r3) nounwind
  %r5 = add i64 %rt12, %r4
  %rt13 = inttoptr i64 %r1 to i64*
  store i64 %r5, i64* %rt13, align 8
  %rt19 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt19, align 4
  ret void

}
(1.184129) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(1.185489) LLVMDynamicTranslationCache.cpp:137:  inserting translation 3211264 with 48 bytes of local memory
(1.202315) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMad-Lo-s64
(1.202327) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(1.203710) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(1.203721) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i64*;
	%r2 = load i64* %rt7, align 8;
	%rt8 = add i64 %r0, 8;
	%rt9 = inttoptr i64 %rt8 to i64*;
	%r3 = load i64* %rt9, align 8;
	%rt10 = add i64 %r0, 16;
	%rt11 = inttoptr i64 %rt10 to i64*;
	%r4 = load i64* %rt11, align 8;
	%rt12 = mul i64 %r2, %r3;
	%r5 = add i64 %r4, %rt12;
	%rt13 = inttoptr i64 %r1 to i64*;
	store i64 %r5, i64* %rt13, align 8;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r6 = bitcast i32 0 to i32;
	%rt14 = zext i32 %r6 to i64;
	%rt15 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt16 = load i8** %rt15;
	%rt17 = ptrtoint i8* %rt16 to i64;
	%rt18 = add i64 %rt14, %rt17;
	%rt19 = inttoptr i64 %rt18 to i32*;
	store i32 6, i32* %rt19, align 4;
	br label %exit;
exit:
	ret void;

}

(1.204640) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(1.204651) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(1.204659) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(1.204846) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.98* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.98* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.98* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %rt10 = add i64 %r0, 16
  %rt11 = inttoptr i64 %rt10 to i64*
  %r4 = load i64* %rt11, align 8
  %rt12 = mul i64 %r2, %r3
  %r5 = add i64 %r4, %rt12
  %rt13 = inttoptr i64 %r1 to i64*
  store i64 %r5, i64* %rt13, align 8
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r6 = bitcast i32 0 to i32
  %rt14 = zext i32 %r6 to i64
  %rt15 = getelementptr %LLVMContext.98* %__ctaContext, i32 0, i32 4
  %rt16 = load i8** %rt15
  %rt17 = ptrtoint i8* %rt16 to i64
  %rt18 = add i64 %rt14, %rt17
  %rt19 = inttoptr i64 %rt18 to i32*
  store i32 6, i32* %rt19, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.98* %__ctaContext to %LLVMContext.98**
  %context.t0 = load %LLVMContext.98** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.98* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.98* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %rt10 = add i64 %r0, 16
  %rt11 = inttoptr i64 %rt10 to i64*
  %r4 = load i64* %rt11, align 8
  %rt12 = mul i64 %r3, %r2
  %r5 = add i64 %r4, %rt12
  %rt13 = inttoptr i64 %r1 to i64*
  store i64 %r5, i64* %rt13, align 8
  %rt19 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt19, align 4
  ret void

}
(1.208013) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(1.209105) LLVMDynamicTranslationCache.cpp:137:  inserting translation 3276800 with 48 bytes of local memory
(1.226650) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMad-Hi-s64
(1.226662) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(1.227999) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(1.228010) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i64*;
	%r2 = load i64* %rt7, align 8;
	%rt8 = add i64 %r0, 8;
	%rt9 = inttoptr i64 %rt8 to i64*;
	%r3 = load i64* %rt9, align 8;
	%rt10 = add i64 %r0, 16;
	%rt11 = inttoptr i64 %rt10 to i64*;
	%r4 = load i64* %rt11, align 8;
	%rt12 = call i64 @__ocelot_mul_hi_s64(i64 %r2, i64 %r3);
	%r5 = add i64 %rt12, %r4;
	%rt13 = inttoptr i64 %r1 to i64*;
	store i64 %r5, i64* %rt13, align 8;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r6 = bitcast i32 0 to i32;
	%rt14 = zext i32 %r6 to i64;
	%rt15 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt16 = load i8** %rt15;
	%rt17 = ptrtoint i8* %rt16 to i64;
	%rt18 = add i64 %rt14, %rt17;
	%rt19 = inttoptr i64 %rt18 to i32*;
	store i32 6, i32* %rt19, align 4;
	br label %exit;
exit:
	ret void;

}

(1.228919) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(1.228930) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(1.228939) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(1.229127) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.100* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.100* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.100* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %rt10 = add i64 %r0, 16
  %rt11 = inttoptr i64 %rt10 to i64*
  %r4 = load i64* %rt11, align 8
  %rt12 = call i64 @__ocelot_mul_hi_s64(i64 %r2, i64 %r3)
  %r5 = add i64 %rt12, %r4
  %rt13 = inttoptr i64 %r1 to i64*
  store i64 %r5, i64* %rt13, align 8
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r6 = bitcast i32 0 to i32
  %rt14 = zext i32 %r6 to i64
  %rt15 = getelementptr %LLVMContext.100* %__ctaContext, i32 0, i32 4
  %rt16 = load i8** %rt15
  %rt17 = ptrtoint i8* %rt16 to i64
  %rt18 = add i64 %rt14, %rt17
  %rt19 = inttoptr i64 %rt18 to i32*
  store i32 6, i32* %rt19, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.100* %__ctaContext to %LLVMContext.100**
  %context.t0 = load %LLVMContext.100** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.100* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.100* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %rt10 = add i64 %r0, 16
  %rt11 = inttoptr i64 %rt10 to i64*
  %r4 = load i64* %rt11, align 8
  %rt12 = tail call i64 @__ocelot_mul_hi_s64(i64 %r2, i64 %r3) nounwind
  %r5 = add i64 %rt12, %r4
  %rt13 = inttoptr i64 %r1 to i64*
  store i64 %r5, i64* %rt13, align 8
  %rt19 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt19, align 4
  ret void

}
(1.232292) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(1.233581) LLVMDynamicTranslationCache.cpp:137:  inserting translation 3342336 with 48 bytes of local memory
(1.250373) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestSad-u16
(1.250385) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(1.251760) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(1.251770) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i16*;
	%r2 = load i16* %rt7, align 2;
	%rt8 = add i64 %r0, 2;
	%rt9 = inttoptr i64 %rt8 to i16*;
	%r3 = load i16* %rt9, align 2;
	%rt10 = add i64 %r0, 4;
	%rt11 = inttoptr i64 %rt10 to i16*;
	%r4 = load i16* %rt11, align 2;
	%rt12 = icmp ult i16 %r2, %r3;
	%rt13 = sub i16 %r3, %r2;
	%rt14 = sub i16 %r2, %r3;
	%rt15 = select i1 %rt12, i16 %rt13, i16 %rt14;
	%r5 = add i16 %r4, %rt15;
	%rt16 = inttoptr i64 %r1 to i16*;
	store i16 %r5, i16* %rt16, align 2;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r6 = bitcast i32 0 to i32;
	%rt17 = zext i32 %r6 to i64;
	%rt18 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt19 = load i8** %rt18;
	%rt20 = ptrtoint i8* %rt19 to i64;
	%rt21 = add i64 %rt17, %rt20;
	%rt22 = inttoptr i64 %rt21 to i32*;
	store i32 6, i32* %rt22, align 4;
	br label %exit;
exit:
	ret void;

}

(1.252695) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(1.252707) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(1.252715) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(1.252901) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.102* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.102* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.102* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %rt10 = add i64 %r0, 4
  %rt11 = inttoptr i64 %rt10 to i16*
  %r4 = load i16* %rt11, align 2
  %rt12 = icmp ult i16 %r2, %r3
  %rt13 = sub i16 %r3, %r2
  %rt14 = sub i16 %r2, %r3
  %rt15 = select i1 %rt12, i16 %rt13, i16 %rt14
  %r5 = add i16 %r4, %rt15
  %rt16 = inttoptr i64 %r1 to i16*
  store i16 %r5, i16* %rt16, align 2
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r6 = bitcast i32 0 to i32
  %rt17 = zext i32 %r6 to i64
  %rt18 = getelementptr %LLVMContext.102* %__ctaContext, i32 0, i32 4
  %rt19 = load i8** %rt18
  %rt20 = ptrtoint i8* %rt19 to i64
  %rt21 = add i64 %rt17, %rt20
  %rt22 = inttoptr i64 %rt21 to i32*
  store i32 6, i32* %rt22, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.102* %__ctaContext to %LLVMContext.102**
  %context.t0 = load %LLVMContext.102** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.102* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.102* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %rt10 = add i64 %r0, 4
  %rt11 = inttoptr i64 %rt10 to i16*
  %r4 = load i16* %rt11, align 2
  %rt12 = icmp ult i16 %r2, %r3
  %rt13 = sub i16 %r3, %r2
  %rt14 = sub i16 %r2, %r3
  %rt15 = select i1 %rt12, i16 %rt13, i16 %rt14
  %r5 = add i16 %rt15, %r4
  %rt16 = inttoptr i64 %r1 to i16*
  store i16 %r5, i16* %rt16, align 2
  %rt22 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt22, align 4
  ret void

}
(1.256284) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(1.257559) LLVMDynamicTranslationCache.cpp:137:  inserting translation 3407872 with 48 bytes of local memory
(1.274146) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestSad-s16
(1.274157) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(1.275511) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(1.275521) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i16*;
	%r2 = load i16* %rt7, align 2;
	%rt8 = add i64 %r0, 2;
	%rt9 = inttoptr i64 %rt8 to i16*;
	%r3 = load i16* %rt9, align 2;
	%rt10 = add i64 %r0, 4;
	%rt11 = inttoptr i64 %rt10 to i16*;
	%r4 = load i16* %rt11, align 2;
	%rt12 = icmp slt i16 %r2, %r3;
	%rt13 = sub i16 %r3, %r2;
	%rt14 = sub i16 %r2, %r3;
	%rt15 = select i1 %rt12, i16 %rt13, i16 %rt14;
	%r5 = add i16 %r4, %rt15;
	%rt16 = inttoptr i64 %r1 to i16*;
	store i16 %r5, i16* %rt16, align 2;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r6 = bitcast i32 0 to i32;
	%rt17 = zext i32 %r6 to i64;
	%rt18 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt19 = load i8** %rt18;
	%rt20 = ptrtoint i8* %rt19 to i64;
	%rt21 = add i64 %rt17, %rt20;
	%rt22 = inttoptr i64 %rt21 to i32*;
	store i32 6, i32* %rt22, align 4;
	br label %exit;
exit:
	ret void;

}

(1.276465) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(1.276476) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(1.276484) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(1.276673) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.104* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.104* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.104* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %rt10 = add i64 %r0, 4
  %rt11 = inttoptr i64 %rt10 to i16*
  %r4 = load i16* %rt11, align 2
  %rt12 = icmp slt i16 %r2, %r3
  %rt13 = sub i16 %r3, %r2
  %rt14 = sub i16 %r2, %r3
  %rt15 = select i1 %rt12, i16 %rt13, i16 %rt14
  %r5 = add i16 %r4, %rt15
  %rt16 = inttoptr i64 %r1 to i16*
  store i16 %r5, i16* %rt16, align 2
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r6 = bitcast i32 0 to i32
  %rt17 = zext i32 %r6 to i64
  %rt18 = getelementptr %LLVMContext.104* %__ctaContext, i32 0, i32 4
  %rt19 = load i8** %rt18
  %rt20 = ptrtoint i8* %rt19 to i64
  %rt21 = add i64 %rt17, %rt20
  %rt22 = inttoptr i64 %rt21 to i32*
  store i32 6, i32* %rt22, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.104* %__ctaContext to %LLVMContext.104**
  %context.t0 = load %LLVMContext.104** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.104* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.104* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %rt10 = add i64 %r0, 4
  %rt11 = inttoptr i64 %rt10 to i16*
  %r4 = load i16* %rt11, align 2
  %rt12 = icmp slt i16 %r2, %r3
  %rt13 = sub i16 %r3, %r2
  %rt14 = sub i16 %r2, %r3
  %rt15 = select i1 %rt12, i16 %rt13, i16 %rt14
  %r5 = add i16 %rt15, %r4
  %rt16 = inttoptr i64 %r1 to i16*
  store i16 %r5, i16* %rt16, align 2
  %rt22 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt22, align 4
  ret void

}
(1.280015) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(1.281258) LLVMDynamicTranslationCache.cpp:137:  inserting translation 3473408 with 48 bytes of local memory
(1.297828) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestSad-u32
(1.297840) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(1.299201) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(1.299212) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = add i64 %r0, 4;
	%rt9 = inttoptr i64 %rt8 to i32*;
	%r3 = load i32* %rt9, align 4;
	%rt10 = add i64 %r0, 8;
	%rt11 = inttoptr i64 %rt10 to i32*;
	%r4 = load i32* %rt11, align 4;
	%rt12 = icmp ult i32 %r2, %r3;
	%rt13 = sub i32 %r3, %r2;
	%rt14 = sub i32 %r2, %r3;
	%rt15 = select i1 %rt12, i32 %rt13, i32 %rt14;
	%r5 = add i32 %r4, %rt15;
	%rt16 = inttoptr i64 %r1 to i32*;
	store i32 %r5, i32* %rt16, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r6 = bitcast i32 0 to i32;
	%rt17 = zext i32 %r6 to i64;
	%rt18 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt19 = load i8** %rt18;
	%rt20 = ptrtoint i8* %rt19 to i64;
	%rt21 = add i64 %rt17, %rt20;
	%rt22 = inttoptr i64 %rt21 to i32*;
	store i32 6, i32* %rt22, align 4;
	br label %exit;
exit:
	ret void;

}

(1.300129) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(1.300140) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(1.300148) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(1.300334) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.106* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.106* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.106* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = add i64 %r0, 8
  %rt11 = inttoptr i64 %rt10 to i32*
  %r4 = load i32* %rt11, align 4
  %rt12 = icmp ult i32 %r2, %r3
  %rt13 = sub i32 %r3, %r2
  %rt14 = sub i32 %r2, %r3
  %rt15 = select i1 %rt12, i32 %rt13, i32 %rt14
  %r5 = add i32 %r4, %rt15
  %rt16 = inttoptr i64 %r1 to i32*
  store i32 %r5, i32* %rt16, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r6 = bitcast i32 0 to i32
  %rt17 = zext i32 %r6 to i64
  %rt18 = getelementptr %LLVMContext.106* %__ctaContext, i32 0, i32 4
  %rt19 = load i8** %rt18
  %rt20 = ptrtoint i8* %rt19 to i64
  %rt21 = add i64 %rt17, %rt20
  %rt22 = inttoptr i64 %rt21 to i32*
  store i32 6, i32* %rt22, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.106* %__ctaContext to %LLVMContext.106**
  %context.t0 = load %LLVMContext.106** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.106* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.106* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = add i64 %r0, 8
  %rt11 = inttoptr i64 %rt10 to i32*
  %r4 = load i32* %rt11, align 4
  %rt12 = icmp ult i32 %r2, %r3
  %rt13 = sub i32 %r3, %r2
  %rt14 = sub i32 %r2, %r3
  %rt15 = select i1 %rt12, i32 %rt13, i32 %rt14
  %r5 = add i32 %rt15, %r4
  %rt16 = inttoptr i64 %r1 to i32*
  store i32 %r5, i32* %rt16, align 4
  %rt22 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt22, align 4
  ret void

}
(1.303634) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(1.304805) LLVMDynamicTranslationCache.cpp:137:  inserting translation 3538944 with 48 bytes of local memory
(1.321432) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestSad-s32
(1.321444) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(1.322807) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(1.322818) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = add i64 %r0, 4;
	%rt9 = inttoptr i64 %rt8 to i32*;
	%r3 = load i32* %rt9, align 4;
	%rt10 = add i64 %r0, 8;
	%rt11 = inttoptr i64 %rt10 to i32*;
	%r4 = load i32* %rt11, align 4;
	%rt12 = icmp slt i32 %r2, %r3;
	%rt13 = sub i32 %r3, %r2;
	%rt14 = sub i32 %r2, %r3;
	%rt15 = select i1 %rt12, i32 %rt13, i32 %rt14;
	%r5 = add i32 %r4, %rt15;
	%rt16 = inttoptr i64 %r1 to i32*;
	store i32 %r5, i32* %rt16, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r6 = bitcast i32 0 to i32;
	%rt17 = zext i32 %r6 to i64;
	%rt18 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt19 = load i8** %rt18;
	%rt20 = ptrtoint i8* %rt19 to i64;
	%rt21 = add i64 %rt17, %rt20;
	%rt22 = inttoptr i64 %rt21 to i32*;
	store i32 6, i32* %rt22, align 4;
	br label %exit;
exit:
	ret void;

}

(1.323736) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(1.323747) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(1.323756) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(1.323943) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.108* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.108* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.108* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = add i64 %r0, 8
  %rt11 = inttoptr i64 %rt10 to i32*
  %r4 = load i32* %rt11, align 4
  %rt12 = icmp slt i32 %r2, %r3
  %rt13 = sub i32 %r3, %r2
  %rt14 = sub i32 %r2, %r3
  %rt15 = select i1 %rt12, i32 %rt13, i32 %rt14
  %r5 = add i32 %r4, %rt15
  %rt16 = inttoptr i64 %r1 to i32*
  store i32 %r5, i32* %rt16, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r6 = bitcast i32 0 to i32
  %rt17 = zext i32 %r6 to i64
  %rt18 = getelementptr %LLVMContext.108* %__ctaContext, i32 0, i32 4
  %rt19 = load i8** %rt18
  %rt20 = ptrtoint i8* %rt19 to i64
  %rt21 = add i64 %rt17, %rt20
  %rt22 = inttoptr i64 %rt21 to i32*
  store i32 6, i32* %rt22, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.108* %__ctaContext to %LLVMContext.108**
  %context.t0 = load %LLVMContext.108** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.108* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.108* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = add i64 %r0, 8
  %rt11 = inttoptr i64 %rt10 to i32*
  %r4 = load i32* %rt11, align 4
  %rt12 = icmp slt i32 %r2, %r3
  %rt13 = sub i32 %r3, %r2
  %rt14 = sub i32 %r2, %r3
  %rt15 = select i1 %rt12, i32 %rt13, i32 %rt14
  %r5 = add i32 %rt15, %r4
  %rt16 = inttoptr i64 %r1 to i32*
  store i32 %r5, i32* %rt16, align 4
  %rt22 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt22, align 4
  ret void

}
(1.327307) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(1.328495) LLVMDynamicTranslationCache.cpp:137:  inserting translation 3604480 with 48 bytes of local memory
(1.345091) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestSad-u64
(1.345103) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(1.346484) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(1.346494) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i64*;
	%r2 = load i64* %rt7, align 8;
	%rt8 = add i64 %r0, 8;
	%rt9 = inttoptr i64 %rt8 to i64*;
	%r3 = load i64* %rt9, align 8;
	%rt10 = add i64 %r0, 16;
	%rt11 = inttoptr i64 %rt10 to i64*;
	%r4 = load i64* %rt11, align 8;
	%rt12 = icmp ult i64 %r2, %r3;
	%rt13 = sub i64 %r3, %r2;
	%rt14 = sub i64 %r2, %r3;
	%rt15 = select i1 %rt12, i64 %rt13, i64 %rt14;
	%r5 = add i64 %r4, %rt15;
	%rt16 = inttoptr i64 %r1 to i64*;
	store i64 %r5, i64* %rt16, align 8;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r6 = bitcast i32 0 to i32;
	%rt17 = zext i32 %r6 to i64;
	%rt18 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt19 = load i8** %rt18;
	%rt20 = ptrtoint i8* %rt19 to i64;
	%rt21 = add i64 %rt17, %rt20;
	%rt22 = inttoptr i64 %rt21 to i32*;
	store i32 6, i32* %rt22, align 4;
	br label %exit;
exit:
	ret void;

}

(1.347412) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(1.347424) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(1.347432) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(1.347619) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.110* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.110* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.110* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %rt10 = add i64 %r0, 16
  %rt11 = inttoptr i64 %rt10 to i64*
  %r4 = load i64* %rt11, align 8
  %rt12 = icmp ult i64 %r2, %r3
  %rt13 = sub i64 %r3, %r2
  %rt14 = sub i64 %r2, %r3
  %rt15 = select i1 %rt12, i64 %rt13, i64 %rt14
  %r5 = add i64 %r4, %rt15
  %rt16 = inttoptr i64 %r1 to i64*
  store i64 %r5, i64* %rt16, align 8
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r6 = bitcast i32 0 to i32
  %rt17 = zext i32 %r6 to i64
  %rt18 = getelementptr %LLVMContext.110* %__ctaContext, i32 0, i32 4
  %rt19 = load i8** %rt18
  %rt20 = ptrtoint i8* %rt19 to i64
  %rt21 = add i64 %rt17, %rt20
  %rt22 = inttoptr i64 %rt21 to i32*
  store i32 6, i32* %rt22, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.110* %__ctaContext to %LLVMContext.110**
  %context.t0 = load %LLVMContext.110** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.110* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.110* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %rt10 = add i64 %r0, 16
  %rt11 = inttoptr i64 %rt10 to i64*
  %r4 = load i64* %rt11, align 8
  %rt12 = icmp ult i64 %r2, %r3
  %rt13 = sub i64 %r3, %r2
  %rt14 = sub i64 %r2, %r3
  %rt15 = select i1 %rt12, i64 %rt13, i64 %rt14
  %r5 = add i64 %rt15, %r4
  %rt16 = inttoptr i64 %r1 to i64*
  store i64 %r5, i64* %rt16, align 8
  %rt22 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt22, align 4
  ret void

}
(1.350947) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(1.352107) LLVMDynamicTranslationCache.cpp:137:  inserting translation 3670016 with 48 bytes of local memory
(1.369422) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestSad-s64
(1.369434) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(1.370785) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(1.370796) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i64*;
	%r2 = load i64* %rt7, align 8;
	%rt8 = add i64 %r0, 8;
	%rt9 = inttoptr i64 %rt8 to i64*;
	%r3 = load i64* %rt9, align 8;
	%rt10 = add i64 %r0, 16;
	%rt11 = inttoptr i64 %rt10 to i64*;
	%r4 = load i64* %rt11, align 8;
	%rt12 = icmp slt i64 %r2, %r3;
	%rt13 = sub i64 %r3, %r2;
	%rt14 = sub i64 %r2, %r3;
	%rt15 = select i1 %rt12, i64 %rt13, i64 %rt14;
	%r5 = add i64 %r4, %rt15;
	%rt16 = inttoptr i64 %r1 to i64*;
	store i64 %r5, i64* %rt16, align 8;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r6 = bitcast i32 0 to i32;
	%rt17 = zext i32 %r6 to i64;
	%rt18 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt19 = load i8** %rt18;
	%rt20 = ptrtoint i8* %rt19 to i64;
	%rt21 = add i64 %rt17, %rt20;
	%rt22 = inttoptr i64 %rt21 to i32*;
	store i32 6, i32* %rt22, align 4;
	br label %exit;
exit:
	ret void;

}

(1.371744) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(1.371755) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(1.371764) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(1.371951) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.112* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.112* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.112* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %rt10 = add i64 %r0, 16
  %rt11 = inttoptr i64 %rt10 to i64*
  %r4 = load i64* %rt11, align 8
  %rt12 = icmp slt i64 %r2, %r3
  %rt13 = sub i64 %r3, %r2
  %rt14 = sub i64 %r2, %r3
  %rt15 = select i1 %rt12, i64 %rt13, i64 %rt14
  %r5 = add i64 %r4, %rt15
  %rt16 = inttoptr i64 %r1 to i64*
  store i64 %r5, i64* %rt16, align 8
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r6 = bitcast i32 0 to i32
  %rt17 = zext i32 %r6 to i64
  %rt18 = getelementptr %LLVMContext.112* %__ctaContext, i32 0, i32 4
  %rt19 = load i8** %rt18
  %rt20 = ptrtoint i8* %rt19 to i64
  %rt21 = add i64 %rt17, %rt20
  %rt22 = inttoptr i64 %rt21 to i32*
  store i32 6, i32* %rt22, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.112* %__ctaContext to %LLVMContext.112**
  %context.t0 = load %LLVMContext.112** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.112* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.112* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %rt10 = add i64 %r0, 16
  %rt11 = inttoptr i64 %rt10 to i64*
  %r4 = load i64* %rt11, align 8
  %rt12 = icmp slt i64 %r2, %r3
  %rt13 = sub i64 %r3, %r2
  %rt14 = sub i64 %r2, %r3
  %rt15 = select i1 %rt12, i64 %rt13, i64 %rt14
  %r5 = add i64 %rt15, %r4
  %rt16 = inttoptr i64 %r1 to i64*
  store i64 %r5, i64* %rt16, align 8
  %rt22 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt22, align 4
  ret void

}
(1.375274) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(1.376458) LLVMDynamicTranslationCache.cpp:137:  inserting translation 3735552 with 48 bytes of local memory
(1.393849) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestDiv-u16
(1.393860) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(1.395120) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(1.395130) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i16*;
	%r2 = load i16* %rt7, align 2;
	%rt8 = add i64 %r0, 2;
	%rt9 = inttoptr i64 %rt8 to i16*;
	%r3 = load i16* %rt9, align 2;
	%r4 = udiv i16 %r2, %r3;
	%rt10 = inttoptr i64 %r1 to i16*;
	store i16 %r4, i16* %rt10, align 2;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt11 = zext i32 %r5 to i64;
	%rt12 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt13 = load i8** %rt12;
	%rt14 = ptrtoint i8* %rt13 to i64;
	%rt15 = add i64 %rt11, %rt14;
	%rt16 = inttoptr i64 %rt15 to i32*;
	store i32 6, i32* %rt16, align 4;
	br label %exit;
exit:
	ret void;

}

(1.396007) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(1.396018) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(1.396041) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(1.396250) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.114* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.114* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.114* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %r4 = udiv i16 %r2, %r3
  %rt10 = inttoptr i64 %r1 to i16*
  store i16 %r4, i16* %rt10, align 2
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt11 = zext i32 %r5 to i64
  %rt12 = getelementptr %LLVMContext.114* %__ctaContext, i32 0, i32 4
  %rt13 = load i8** %rt12
  %rt14 = ptrtoint i8* %rt13 to i64
  %rt15 = add i64 %rt11, %rt14
  %rt16 = inttoptr i64 %rt15 to i32*
  store i32 6, i32* %rt16, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.114* %__ctaContext to %LLVMContext.114**
  %context.t0 = load %LLVMContext.114** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.114* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.114* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %r4 = udiv i16 %r2, %r3
  %rt10 = inttoptr i64 %r1 to i16*
  store i16 %r4, i16* %rt10, align 2
  %rt16 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt16, align 4
  ret void

}
(1.399118) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(1.400182) LLVMDynamicTranslationCache.cpp:137:  inserting translation 3801088 with 40 bytes of local memory
(1.417799) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestDiv-s16
(1.417811) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(1.419070) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(1.419081) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i16*;
	%r2 = load i16* %rt7, align 2;
	%rt8 = add i64 %r0, 2;
	%rt9 = inttoptr i64 %rt8 to i16*;
	%r3 = load i16* %rt9, align 2;
	%r4 = sdiv i16 %r2, %r3;
	%rt10 = inttoptr i64 %r1 to i16*;
	store i16 %r4, i16* %rt10, align 2;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt11 = zext i32 %r5 to i64;
	%rt12 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt13 = load i8** %rt12;
	%rt14 = ptrtoint i8* %rt13 to i64;
	%rt15 = add i64 %rt11, %rt14;
	%rt16 = inttoptr i64 %rt15 to i32*;
	store i32 6, i32* %rt16, align 4;
	br label %exit;
exit:
	ret void;

}

(1.419953) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(1.419964) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(1.419988) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(1.420176) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.116* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.116* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.116* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %r4 = sdiv i16 %r2, %r3
  %rt10 = inttoptr i64 %r1 to i16*
  store i16 %r4, i16* %rt10, align 2
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt11 = zext i32 %r5 to i64
  %rt12 = getelementptr %LLVMContext.116* %__ctaContext, i32 0, i32 4
  %rt13 = load i8** %rt12
  %rt14 = ptrtoint i8* %rt13 to i64
  %rt15 = add i64 %rt11, %rt14
  %rt16 = inttoptr i64 %rt15 to i32*
  store i32 6, i32* %rt16, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.116* %__ctaContext to %LLVMContext.116**
  %context.t0 = load %LLVMContext.116** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.116* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.116* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %r4 = sdiv i16 %r2, %r3
  %rt10 = inttoptr i64 %r1 to i16*
  store i16 %r4, i16* %rt10, align 2
  %rt16 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt16, align 4
  ret void

}
(1.423073) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(1.424074) LLVMDynamicTranslationCache.cpp:137:  inserting translation 3866624 with 40 bytes of local memory
(1.441731) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestDiv-u32
(1.441743) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(1.443003) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(1.443014) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = add i64 %r0, 4;
	%rt9 = inttoptr i64 %rt8 to i32*;
	%r3 = load i32* %rt9, align 4;
	%r4 = udiv i32 %r2, %r3;
	%rt10 = inttoptr i64 %r1 to i32*;
	store i32 %r4, i32* %rt10, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt11 = zext i32 %r5 to i64;
	%rt12 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt13 = load i8** %rt12;
	%rt14 = ptrtoint i8* %rt13 to i64;
	%rt15 = add i64 %rt11, %rt14;
	%rt16 = inttoptr i64 %rt15 to i32*;
	store i32 6, i32* %rt16, align 4;
	br label %exit;
exit:
	ret void;

}

(1.443889) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(1.443900) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(1.443922) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(1.444139) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.118* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.118* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.118* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %r4 = udiv i32 %r2, %r3
  %rt10 = inttoptr i64 %r1 to i32*
  store i32 %r4, i32* %rt10, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt11 = zext i32 %r5 to i64
  %rt12 = getelementptr %LLVMContext.118* %__ctaContext, i32 0, i32 4
  %rt13 = load i8** %rt12
  %rt14 = ptrtoint i8* %rt13 to i64
  %rt15 = add i64 %rt11, %rt14
  %rt16 = inttoptr i64 %rt15 to i32*
  store i32 6, i32* %rt16, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.118* %__ctaContext to %LLVMContext.118**
  %context.t0 = load %LLVMContext.118** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.118* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.118* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %r4 = udiv i32 %r2, %r3
  %rt10 = inttoptr i64 %r1 to i32*
  store i32 %r4, i32* %rt10, align 4
  %rt16 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt16, align 4
  ret void

}
(1.447106) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(1.448192) LLVMDynamicTranslationCache.cpp:137:  inserting translation 3932160 with 40 bytes of local memory
(1.465913) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestDiv-s32
(1.465925) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(1.467232) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(1.467242) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = add i64 %r0, 4;
	%rt9 = inttoptr i64 %rt8 to i32*;
	%r3 = load i32* %rt9, align 4;
	%r4 = sdiv i32 %r2, %r3;
	%rt10 = inttoptr i64 %r1 to i32*;
	store i32 %r4, i32* %rt10, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt11 = zext i32 %r5 to i64;
	%rt12 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt13 = load i8** %rt12;
	%rt14 = ptrtoint i8* %rt13 to i64;
	%rt15 = add i64 %rt11, %rt14;
	%rt16 = inttoptr i64 %rt15 to i32*;
	store i32 6, i32* %rt16, align 4;
	br label %exit;
exit:
	ret void;

}

(1.468126) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(1.468137) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(1.468160) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(1.468347) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.120* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.120* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.120* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %r4 = sdiv i32 %r2, %r3
  %rt10 = inttoptr i64 %r1 to i32*
  store i32 %r4, i32* %rt10, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt11 = zext i32 %r5 to i64
  %rt12 = getelementptr %LLVMContext.120* %__ctaContext, i32 0, i32 4
  %rt13 = load i8** %rt12
  %rt14 = ptrtoint i8* %rt13 to i64
  %rt15 = add i64 %rt11, %rt14
  %rt16 = inttoptr i64 %rt15 to i32*
  store i32 6, i32* %rt16, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.120* %__ctaContext to %LLVMContext.120**
  %context.t0 = load %LLVMContext.120** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.120* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.120* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %r4 = sdiv i32 %r2, %r3
  %rt10 = inttoptr i64 %r1 to i32*
  store i32 %r4, i32* %rt10, align 4
  %rt16 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt16, align 4
  ret void

}
(1.471232) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(1.472275) LLVMDynamicTranslationCache.cpp:137:  inserting translation 3997696 with 40 bytes of local memory
(1.489947) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestDiv-u64
(1.489958) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(1.491221) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(1.491232) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i64*;
	%r2 = load i64* %rt7, align 8;
	%rt8 = add i64 %r0, 8;
	%rt9 = inttoptr i64 %rt8 to i64*;
	%r3 = load i64* %rt9, align 8;
	%r4 = udiv i64 %r2, %r3;
	%rt10 = inttoptr i64 %r1 to i64*;
	store i64 %r4, i64* %rt10, align 8;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt11 = zext i32 %r5 to i64;
	%rt12 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt13 = load i8** %rt12;
	%rt14 = ptrtoint i8* %rt13 to i64;
	%rt15 = add i64 %rt11, %rt14;
	%rt16 = inttoptr i64 %rt15 to i32*;
	store i32 6, i32* %rt16, align 4;
	br label %exit;
exit:
	ret void;

}

(1.492104) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(1.492115) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(1.492138) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(1.492326) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.122* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.122* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.122* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %r4 = udiv i64 %r2, %r3
  %rt10 = inttoptr i64 %r1 to i64*
  store i64 %r4, i64* %rt10, align 8
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt11 = zext i32 %r5 to i64
  %rt12 = getelementptr %LLVMContext.122* %__ctaContext, i32 0, i32 4
  %rt13 = load i8** %rt12
  %rt14 = ptrtoint i8* %rt13 to i64
  %rt15 = add i64 %rt11, %rt14
  %rt16 = inttoptr i64 %rt15 to i32*
  store i32 6, i32* %rt16, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.122* %__ctaContext to %LLVMContext.122**
  %context.t0 = load %LLVMContext.122** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.122* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.122* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %r4 = udiv i64 %r2, %r3
  %rt10 = inttoptr i64 %r1 to i64*
  store i64 %r4, i64* %rt10, align 8
  %rt16 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt16, align 4
  ret void

}
(1.495191) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(1.496209) LLVMDynamicTranslationCache.cpp:137:  inserting translation 4063232 with 40 bytes of local memory
(1.513867) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestDiv-s64
(1.513879) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(1.515141) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(1.515152) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i64*;
	%r2 = load i64* %rt7, align 8;
	%rt8 = add i64 %r0, 8;
	%rt9 = inttoptr i64 %rt8 to i64*;
	%r3 = load i64* %rt9, align 8;
	%r4 = sdiv i64 %r2, %r3;
	%rt10 = inttoptr i64 %r1 to i64*;
	store i64 %r4, i64* %rt10, align 8;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt11 = zext i32 %r5 to i64;
	%rt12 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt13 = load i8** %rt12;
	%rt14 = ptrtoint i8* %rt13 to i64;
	%rt15 = add i64 %rt11, %rt14;
	%rt16 = inttoptr i64 %rt15 to i32*;
	store i32 6, i32* %rt16, align 4;
	br label %exit;
exit:
	ret void;

}

(1.516028) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(1.516039) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(1.516062) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(1.516283) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.124* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.124* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.124* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %r4 = sdiv i64 %r2, %r3
  %rt10 = inttoptr i64 %r1 to i64*
  store i64 %r4, i64* %rt10, align 8
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt11 = zext i32 %r5 to i64
  %rt12 = getelementptr %LLVMContext.124* %__ctaContext, i32 0, i32 4
  %rt13 = load i8** %rt12
  %rt14 = ptrtoint i8* %rt13 to i64
  %rt15 = add i64 %rt11, %rt14
  %rt16 = inttoptr i64 %rt15 to i32*
  store i32 6, i32* %rt16, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.124* %__ctaContext to %LLVMContext.124**
  %context.t0 = load %LLVMContext.124** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.124* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.124* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %r4 = sdiv i64 %r2, %r3
  %rt10 = inttoptr i64 %r1 to i64*
  store i64 %r4, i64* %rt10, align 8
  %rt16 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt16, align 4
  ret void

}
(1.519167) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(1.520194) LLVMDynamicTranslationCache.cpp:137:  inserting translation 4128768 with 40 bytes of local memory
(1.537807) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestRem-u16
(1.537819) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(1.539084) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(1.539094) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i16*;
	%r2 = load i16* %rt7, align 2;
	%rt8 = add i64 %r0, 2;
	%rt9 = inttoptr i64 %rt8 to i16*;
	%r3 = load i16* %rt9, align 2;
	%r4 = urem i16 %r2, %r3;
	%rt10 = inttoptr i64 %r1 to i16*;
	store i16 %r4, i16* %rt10, align 2;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt11 = zext i32 %r5 to i64;
	%rt12 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt13 = load i8** %rt12;
	%rt14 = ptrtoint i8* %rt13 to i64;
	%rt15 = add i64 %rt11, %rt14;
	%rt16 = inttoptr i64 %rt15 to i32*;
	store i32 6, i32* %rt16, align 4;
	br label %exit;
exit:
	ret void;

}

(1.539968) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(1.539979) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(1.540002) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(1.540190) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.126* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.126* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.126* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %r4 = urem i16 %r2, %r3
  %rt10 = inttoptr i64 %r1 to i16*
  store i16 %r4, i16* %rt10, align 2
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt11 = zext i32 %r5 to i64
  %rt12 = getelementptr %LLVMContext.126* %__ctaContext, i32 0, i32 4
  %rt13 = load i8** %rt12
  %rt14 = ptrtoint i8* %rt13 to i64
  %rt15 = add i64 %rt11, %rt14
  %rt16 = inttoptr i64 %rt15 to i32*
  store i32 6, i32* %rt16, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.126* %__ctaContext to %LLVMContext.126**
  %context.t0 = load %LLVMContext.126** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.126* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.126* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %r4 = urem i16 %r2, %r3
  %rt10 = inttoptr i64 %r1 to i16*
  store i16 %r4, i16* %rt10, align 2
  %rt16 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt16, align 4
  ret void

}
(1.543039) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(1.544056) LLVMDynamicTranslationCache.cpp:137:  inserting translation 4194304 with 40 bytes of local memory
(1.561697) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestRem-s16
(1.561709) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(1.562994) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(1.563005) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i16*;
	%r2 = load i16* %rt7, align 2;
	%rt8 = add i64 %r0, 2;
	%rt9 = inttoptr i64 %rt8 to i16*;
	%r3 = load i16* %rt9, align 2;
	%r4 = srem i16 %r2, %r3;
	%rt10 = inttoptr i64 %r1 to i16*;
	store i16 %r4, i16* %rt10, align 2;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt11 = zext i32 %r5 to i64;
	%rt12 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt13 = load i8** %rt12;
	%rt14 = ptrtoint i8* %rt13 to i64;
	%rt15 = add i64 %rt11, %rt14;
	%rt16 = inttoptr i64 %rt15 to i32*;
	store i32 6, i32* %rt16, align 4;
	br label %exit;
exit:
	ret void;

}

(1.563881) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(1.563892) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(1.563914) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(1.564103) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.128* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.128* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.128* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %r4 = srem i16 %r2, %r3
  %rt10 = inttoptr i64 %r1 to i16*
  store i16 %r4, i16* %rt10, align 2
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt11 = zext i32 %r5 to i64
  %rt12 = getelementptr %LLVMContext.128* %__ctaContext, i32 0, i32 4
  %rt13 = load i8** %rt12
  %rt14 = ptrtoint i8* %rt13 to i64
  %rt15 = add i64 %rt11, %rt14
  %rt16 = inttoptr i64 %rt15 to i32*
  store i32 6, i32* %rt16, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.128* %__ctaContext to %LLVMContext.128**
  %context.t0 = load %LLVMContext.128** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.128* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.128* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %r4 = srem i16 %r2, %r3
  %rt10 = inttoptr i64 %r1 to i16*
  store i16 %r4, i16* %rt10, align 2
  %rt16 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt16, align 4
  ret void

}
(1.567018) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(1.568019) LLVMDynamicTranslationCache.cpp:137:  inserting translation 4259840 with 40 bytes of local memory
(1.585656) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestRem-u32
(1.585668) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(1.586959) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(1.586970) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = add i64 %r0, 4;
	%rt9 = inttoptr i64 %rt8 to i32*;
	%r3 = load i32* %rt9, align 4;
	%r4 = urem i32 %r2, %r3;
	%rt10 = inttoptr i64 %r1 to i32*;
	store i32 %r4, i32* %rt10, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt11 = zext i32 %r5 to i64;
	%rt12 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt13 = load i8** %rt12;
	%rt14 = ptrtoint i8* %rt13 to i64;
	%rt15 = add i64 %rt11, %rt14;
	%rt16 = inttoptr i64 %rt15 to i32*;
	store i32 6, i32* %rt16, align 4;
	br label %exit;
exit:
	ret void;

}

(1.587839) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(1.587850) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(1.587874) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(1.588062) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.130* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.130* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.130* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %r4 = urem i32 %r2, %r3
  %rt10 = inttoptr i64 %r1 to i32*
  store i32 %r4, i32* %rt10, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt11 = zext i32 %r5 to i64
  %rt12 = getelementptr %LLVMContext.130* %__ctaContext, i32 0, i32 4
  %rt13 = load i8** %rt12
  %rt14 = ptrtoint i8* %rt13 to i64
  %rt15 = add i64 %rt11, %rt14
  %rt16 = inttoptr i64 %rt15 to i32*
  store i32 6, i32* %rt16, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.130* %__ctaContext to %LLVMContext.130**
  %context.t0 = load %LLVMContext.130** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.130* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.130* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %r4 = urem i32 %r2, %r3
  %rt10 = inttoptr i64 %r1 to i32*
  store i32 %r4, i32* %rt10, align 4
  %rt16 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt16, align 4
  ret void

}
(1.590952) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(1.591966) LLVMDynamicTranslationCache.cpp:137:  inserting translation 4325376 with 40 bytes of local memory
(1.609542) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestRem-s32
(1.609553) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(1.610819) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(1.610830) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = add i64 %r0, 4;
	%rt9 = inttoptr i64 %rt8 to i32*;
	%r3 = load i32* %rt9, align 4;
	%r4 = srem i32 %r2, %r3;
	%rt10 = inttoptr i64 %r1 to i32*;
	store i32 %r4, i32* %rt10, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt11 = zext i32 %r5 to i64;
	%rt12 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt13 = load i8** %rt12;
	%rt14 = ptrtoint i8* %rt13 to i64;
	%rt15 = add i64 %rt11, %rt14;
	%rt16 = inttoptr i64 %rt15 to i32*;
	store i32 6, i32* %rt16, align 4;
	br label %exit;
exit:
	ret void;

}

(1.611706) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(1.611717) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(1.611740) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(1.611928) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.132* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.132* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.132* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %r4 = srem i32 %r2, %r3
  %rt10 = inttoptr i64 %r1 to i32*
  store i32 %r4, i32* %rt10, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt11 = zext i32 %r5 to i64
  %rt12 = getelementptr %LLVMContext.132* %__ctaContext, i32 0, i32 4
  %rt13 = load i8** %rt12
  %rt14 = ptrtoint i8* %rt13 to i64
  %rt15 = add i64 %rt11, %rt14
  %rt16 = inttoptr i64 %rt15 to i32*
  store i32 6, i32* %rt16, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.132* %__ctaContext to %LLVMContext.132**
  %context.t0 = load %LLVMContext.132** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.132* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.132* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %r4 = srem i32 %r2, %r3
  %rt10 = inttoptr i64 %r1 to i32*
  store i32 %r4, i32* %rt10, align 4
  %rt16 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt16, align 4
  ret void

}
(1.614781) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(1.615769) LLVMDynamicTranslationCache.cpp:137:  inserting translation 4390912 with 40 bytes of local memory
(1.633394) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestRem-u64
(1.633405) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(1.634652) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(1.634662) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i64*;
	%r2 = load i64* %rt7, align 8;
	%rt8 = add i64 %r0, 8;
	%rt9 = inttoptr i64 %rt8 to i64*;
	%r3 = load i64* %rt9, align 8;
	%r4 = urem i64 %r2, %r3;
	%rt10 = inttoptr i64 %r1 to i64*;
	store i64 %r4, i64* %rt10, align 8;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt11 = zext i32 %r5 to i64;
	%rt12 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt13 = load i8** %rt12;
	%rt14 = ptrtoint i8* %rt13 to i64;
	%rt15 = add i64 %rt11, %rt14;
	%rt16 = inttoptr i64 %rt15 to i32*;
	store i32 6, i32* %rt16, align 4;
	br label %exit;
exit:
	ret void;

}

(1.635533) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(1.635544) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(1.635567) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(1.635756) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.134* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.134* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.134* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %r4 = urem i64 %r2, %r3
  %rt10 = inttoptr i64 %r1 to i64*
  store i64 %r4, i64* %rt10, align 8
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt11 = zext i32 %r5 to i64
  %rt12 = getelementptr %LLVMContext.134* %__ctaContext, i32 0, i32 4
  %rt13 = load i8** %rt12
  %rt14 = ptrtoint i8* %rt13 to i64
  %rt15 = add i64 %rt11, %rt14
  %rt16 = inttoptr i64 %rt15 to i32*
  store i32 6, i32* %rt16, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.134* %__ctaContext to %LLVMContext.134**
  %context.t0 = load %LLVMContext.134** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.134* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.134* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %r4 = urem i64 %r2, %r3
  %rt10 = inttoptr i64 %r1 to i64*
  store i64 %r4, i64* %rt10, align 8
  %rt16 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt16, align 4
  ret void

}
(1.638633) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(1.639632) LLVMDynamicTranslationCache.cpp:137:  inserting translation 4456448 with 40 bytes of local memory
(1.657337) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestRem-s64
(1.657348) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(1.658610) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(1.658621) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i64*;
	%r2 = load i64* %rt7, align 8;
	%rt8 = add i64 %r0, 8;
	%rt9 = inttoptr i64 %rt8 to i64*;
	%r3 = load i64* %rt9, align 8;
	%r4 = srem i64 %r2, %r3;
	%rt10 = inttoptr i64 %r1 to i64*;
	store i64 %r4, i64* %rt10, align 8;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt11 = zext i32 %r5 to i64;
	%rt12 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt13 = load i8** %rt12;
	%rt14 = ptrtoint i8* %rt13 to i64;
	%rt15 = add i64 %rt11, %rt14;
	%rt16 = inttoptr i64 %rt15 to i32*;
	store i32 6, i32* %rt16, align 4;
	br label %exit;
exit:
	ret void;

}

(1.659490) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(1.659501) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(1.659524) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(1.659712) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.136* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.136* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.136* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %r4 = srem i64 %r2, %r3
  %rt10 = inttoptr i64 %r1 to i64*
  store i64 %r4, i64* %rt10, align 8
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt11 = zext i32 %r5 to i64
  %rt12 = getelementptr %LLVMContext.136* %__ctaContext, i32 0, i32 4
  %rt13 = load i8** %rt12
  %rt14 = ptrtoint i8* %rt13 to i64
  %rt15 = add i64 %rt11, %rt14
  %rt16 = inttoptr i64 %rt15 to i32*
  store i32 6, i32* %rt16, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.136* %__ctaContext to %LLVMContext.136**
  %context.t0 = load %LLVMContext.136** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.136* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.136* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %r4 = srem i64 %r2, %r3
  %rt10 = inttoptr i64 %r1 to i64*
  store i64 %r4, i64* %rt10, align 8
  %rt16 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt16, align 4
  ret void

}
(1.662570) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(1.663560) LLVMDynamicTranslationCache.cpp:137:  inserting translation 4521984 with 40 bytes of local memory
(1.681357) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestAbs-s16
(1.681368) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(1.682605) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(1.682616) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i16*;
	%r2 = load i16* %rt7, align 2;
	%rt8 = icmp slt i16 %r2, 0;
	%rt9 = sub i16 0, %r2;
	%r3 = select i1 %rt8, i16 %rt9, i16 %r2;
	%rt10 = inttoptr i64 %r1 to i16*;
	store i16 %r3, i16* %rt10, align 2;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r4 = bitcast i32 0 to i32;
	%rt11 = zext i32 %r4 to i64;
	%rt12 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt13 = load i8** %rt12;
	%rt14 = ptrtoint i8* %rt13 to i64;
	%rt15 = add i64 %rt11, %rt14;
	%rt16 = inttoptr i64 %rt15 to i32*;
	store i32 6, i32* %rt16, align 4;
	br label %exit;
exit:
	ret void;

}

(1.683481) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(1.683492) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(1.683516) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(1.683703) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.138* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.138* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.138* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = icmp slt i16 %r2, 0
  %rt9 = sub i16 0, %r2
  %r3 = select i1 %rt8, i16 %rt9, i16 %r2
  %rt10 = inttoptr i64 %r1 to i16*
  store i16 %r3, i16* %rt10, align 2
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r4 = bitcast i32 0 to i32
  %rt11 = zext i32 %r4 to i64
  %rt12 = getelementptr %LLVMContext.138* %__ctaContext, i32 0, i32 4
  %rt13 = load i8** %rt12
  %rt14 = ptrtoint i8* %rt13 to i64
  %rt15 = add i64 %rt11, %rt14
  %rt16 = inttoptr i64 %rt15 to i32*
  store i32 6, i32* %rt16, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.138* %__ctaContext to %LLVMContext.138**
  %context.t0 = load %LLVMContext.138** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.138* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.138* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = icmp slt i16 %r2, 0
  %rt9 = sub i16 0, %r2
  %r3 = select i1 %rt8, i16 %rt9, i16 %r2
  %rt10 = inttoptr i64 %r1 to i16*
  store i16 %r3, i16* %rt10, align 2
  %rt16 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt16, align 4
  ret void

}
(1.686588) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(1.687747) LLVMDynamicTranslationCache.cpp:137:  inserting translation 4587520 with 32 bytes of local memory
(1.705545) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestAbs-s32
(1.705556) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(1.706810) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(1.706820) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = icmp slt i32 %r2, 0;
	%rt9 = sub i32 0, %r2;
	%r3 = select i1 %rt8, i32 %rt9, i32 %r2;
	%rt10 = inttoptr i64 %r1 to i32*;
	store i32 %r3, i32* %rt10, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r4 = bitcast i32 0 to i32;
	%rt11 = zext i32 %r4 to i64;
	%rt12 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt13 = load i8** %rt12;
	%rt14 = ptrtoint i8* %rt13 to i64;
	%rt15 = add i64 %rt11, %rt14;
	%rt16 = inttoptr i64 %rt15 to i32*;
	store i32 6, i32* %rt16, align 4;
	br label %exit;
exit:
	ret void;

}

(1.707691) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(1.707702) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(1.707725) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(1.707913) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.140* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.140* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.140* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = icmp slt i32 %r2, 0
  %rt9 = sub i32 0, %r2
  %r3 = select i1 %rt8, i32 %rt9, i32 %r2
  %rt10 = inttoptr i64 %r1 to i32*
  store i32 %r3, i32* %rt10, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r4 = bitcast i32 0 to i32
  %rt11 = zext i32 %r4 to i64
  %rt12 = getelementptr %LLVMContext.140* %__ctaContext, i32 0, i32 4
  %rt13 = load i8** %rt12
  %rt14 = ptrtoint i8* %rt13 to i64
  %rt15 = add i64 %rt11, %rt14
  %rt16 = inttoptr i64 %rt15 to i32*
  store i32 6, i32* %rt16, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.140* %__ctaContext to %LLVMContext.140**
  %context.t0 = load %LLVMContext.140** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.140* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.140* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = icmp slt i32 %r2, 0
  %rt9 = sub i32 0, %r2
  %r3 = select i1 %rt8, i32 %rt9, i32 %r2
  %rt10 = inttoptr i64 %r1 to i32*
  store i32 %r3, i32* %rt10, align 4
  %rt16 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt16, align 4
  ret void

}
(1.710777) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(1.711834) LLVMDynamicTranslationCache.cpp:137:  inserting translation 4653056 with 32 bytes of local memory
(1.729744) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestAbs-s64
(1.729755) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(1.731009) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(1.731020) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i64*;
	%r2 = load i64* %rt7, align 8;
	%rt8 = icmp slt i64 %r2, 0;
	%rt9 = sub i64 0, %r2;
	%r3 = select i1 %rt8, i64 %rt9, i64 %r2;
	%rt10 = inttoptr i64 %r1 to i64*;
	store i64 %r3, i64* %rt10, align 8;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r4 = bitcast i32 0 to i32;
	%rt11 = zext i32 %r4 to i64;
	%rt12 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt13 = load i8** %rt12;
	%rt14 = ptrtoint i8* %rt13 to i64;
	%rt15 = add i64 %rt11, %rt14;
	%rt16 = inttoptr i64 %rt15 to i32*;
	store i32 6, i32* %rt16, align 4;
	br label %exit;
exit:
	ret void;

}

(1.731905) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(1.731916) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(1.731939) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(1.732127) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.142* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.142* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.142* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = icmp slt i64 %r2, 0
  %rt9 = sub i64 0, %r2
  %r3 = select i1 %rt8, i64 %rt9, i64 %r2
  %rt10 = inttoptr i64 %r1 to i64*
  store i64 %r3, i64* %rt10, align 8
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r4 = bitcast i32 0 to i32
  %rt11 = zext i32 %r4 to i64
  %rt12 = getelementptr %LLVMContext.142* %__ctaContext, i32 0, i32 4
  %rt13 = load i8** %rt12
  %rt14 = ptrtoint i8* %rt13 to i64
  %rt15 = add i64 %rt11, %rt14
  %rt16 = inttoptr i64 %rt15 to i32*
  store i32 6, i32* %rt16, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.142* %__ctaContext to %LLVMContext.142**
  %context.t0 = load %LLVMContext.142** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.142* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.142* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = icmp slt i64 %r2, 0
  %rt9 = sub i64 0, %r2
  %r3 = select i1 %rt8, i64 %rt9, i64 %r2
  %rt10 = inttoptr i64 %r1 to i64*
  store i64 %r3, i64* %rt10, align 8
  %rt16 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt16, align 4
  ret void

}
(1.734982) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(1.736040) LLVMDynamicTranslationCache.cpp:137:  inserting translation 4718592 with 32 bytes of local memory
(1.754109) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestNeg-s16
(1.754120) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(1.755322) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(1.755332) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i16*;
	%r2 = load i16* %rt7, align 2;
	%r3 = sub i16 0, %r2;
	%rt8 = inttoptr i64 %r1 to i16*;
	store i16 %r3, i16* %rt8, align 2;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r4 = bitcast i32 0 to i32;
	%rt9 = zext i32 %r4 to i64;
	%rt10 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt11 = load i8** %rt10;
	%rt12 = ptrtoint i8* %rt11 to i64;
	%rt13 = add i64 %rt9, %rt12;
	%rt14 = inttoptr i64 %rt13 to i32*;
	store i32 6, i32* %rt14, align 4;
	br label %exit;
exit:
	ret void;

}

(1.756242) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(1.756254) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(1.756262) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(1.756464) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.144* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.144* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.144* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %r3 = sub i16 0, %r2
  %rt8 = inttoptr i64 %r1 to i16*
  store i16 %r3, i16* %rt8, align 2
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r4 = bitcast i32 0 to i32
  %rt9 = zext i32 %r4 to i64
  %rt10 = getelementptr %LLVMContext.144* %__ctaContext, i32 0, i32 4
  %rt11 = load i8** %rt10
  %rt12 = ptrtoint i8* %rt11 to i64
  %rt13 = add i64 %rt9, %rt12
  %rt14 = inttoptr i64 %rt13 to i32*
  store i32 6, i32* %rt14, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.144* %__ctaContext to %LLVMContext.144**
  %context.t0 = load %LLVMContext.144** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.144* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.144* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %r3 = sub i16 0, %r2
  %rt8 = inttoptr i64 %r1 to i16*
  store i16 %r3, i16* %rt8, align 2
  %rt14 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt14, align 4
  ret void

}
(1.759161) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(1.760127) LLVMDynamicTranslationCache.cpp:137:  inserting translation 4784128 with 32 bytes of local memory
(1.778125) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestNeg-s32
(1.778137) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(1.779332) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(1.779342) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%r3 = sub i32 0, %r2;
	%rt8 = inttoptr i64 %r1 to i32*;
	store i32 %r3, i32* %rt8, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r4 = bitcast i32 0 to i32;
	%rt9 = zext i32 %r4 to i64;
	%rt10 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt11 = load i8** %rt10;
	%rt12 = ptrtoint i8* %rt11 to i64;
	%rt13 = add i64 %rt9, %rt12;
	%rt14 = inttoptr i64 %rt13 to i32*;
	store i32 6, i32* %rt14, align 4;
	br label %exit;
exit:
	ret void;

}

(1.780213) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(1.780225) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(1.780233) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(1.780434) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.146* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.146* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.146* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %r3 = sub i32 0, %r2
  %rt8 = inttoptr i64 %r1 to i32*
  store i32 %r3, i32* %rt8, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r4 = bitcast i32 0 to i32
  %rt9 = zext i32 %r4 to i64
  %rt10 = getelementptr %LLVMContext.146* %__ctaContext, i32 0, i32 4
  %rt11 = load i8** %rt10
  %rt12 = ptrtoint i8* %rt11 to i64
  %rt13 = add i64 %rt9, %rt12
  %rt14 = inttoptr i64 %rt13 to i32*
  store i32 6, i32* %rt14, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.146* %__ctaContext to %LLVMContext.146**
  %context.t0 = load %LLVMContext.146** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.146* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.146* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %r3 = sub i32 0, %r2
  %rt8 = inttoptr i64 %r1 to i32*
  store i32 %r3, i32* %rt8, align 4
  %rt14 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt14, align 4
  ret void

}
(1.783173) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(1.784166) LLVMDynamicTranslationCache.cpp:137:  inserting translation 4849664 with 32 bytes of local memory
(1.802050) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestNeg-s64
(1.802062) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(1.803264) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(1.803276) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i64*;
	%r2 = load i64* %rt7, align 8;
	%r3 = sub i64 0, %r2;
	%rt8 = inttoptr i64 %r1 to i64*;
	store i64 %r3, i64* %rt8, align 8;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r4 = bitcast i32 0 to i32;
	%rt9 = zext i32 %r4 to i64;
	%rt10 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt11 = load i8** %rt10;
	%rt12 = ptrtoint i8* %rt11 to i64;
	%rt13 = add i64 %rt9, %rt12;
	%rt14 = inttoptr i64 %rt13 to i32*;
	store i32 6, i32* %rt14, align 4;
	br label %exit;
exit:
	ret void;

}

(1.804146) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(1.804157) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(1.804166) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(1.804367) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.148* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.148* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.148* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %r3 = sub i64 0, %r2
  %rt8 = inttoptr i64 %r1 to i64*
  store i64 %r3, i64* %rt8, align 8
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r4 = bitcast i32 0 to i32
  %rt9 = zext i32 %r4 to i64
  %rt10 = getelementptr %LLVMContext.148* %__ctaContext, i32 0, i32 4
  %rt11 = load i8** %rt10
  %rt12 = ptrtoint i8* %rt11 to i64
  %rt13 = add i64 %rt9, %rt12
  %rt14 = inttoptr i64 %rt13 to i32*
  store i32 6, i32* %rt14, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.148* %__ctaContext to %LLVMContext.148**
  %context.t0 = load %LLVMContext.148** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.148* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.148* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %r3 = sub i64 0, %r2
  %rt8 = inttoptr i64 %r1 to i64*
  store i64 %r3, i64* %rt8, align 8
  %rt14 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt14, align 4
  ret void

}
(1.807086) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(1.808068) LLVMDynamicTranslationCache.cpp:137:  inserting translation 4915200 with 32 bytes of local memory
(1.826009) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMax-u16
(1.826020) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(1.827336) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(1.827347) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i16*;
	%r2 = load i16* %rt7, align 2;
	%rt8 = add i64 %r0, 2;
	%rt9 = inttoptr i64 %rt8 to i16*;
	%r3 = load i16* %rt9, align 2;
	%rt10 = icmp ugt i16 %r2, %r3;
	%r4 = select i1 %rt10, i16 %r2, i16 %r3;
	%rt11 = inttoptr i64 %r1 to i16*;
	store i16 %r4, i16* %rt11, align 2;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt12 = zext i32 %r5 to i64;
	%rt13 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt14 = load i8** %rt13;
	%rt15 = ptrtoint i8* %rt14 to i64;
	%rt16 = add i64 %rt12, %rt15;
	%rt17 = inttoptr i64 %rt16 to i32*;
	store i32 6, i32* %rt17, align 4;
	br label %exit;
exit:
	ret void;

}

(1.828242) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(1.828268) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(1.828277) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(1.828464) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.150* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.150* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.150* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %rt10 = icmp ugt i16 %r2, %r3
  %r4 = select i1 %rt10, i16 %r2, i16 %r3
  %rt11 = inttoptr i64 %r1 to i16*
  store i16 %r4, i16* %rt11, align 2
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt12 = zext i32 %r5 to i64
  %rt13 = getelementptr %LLVMContext.150* %__ctaContext, i32 0, i32 4
  %rt14 = load i8** %rt13
  %rt15 = ptrtoint i8* %rt14 to i64
  %rt16 = add i64 %rt12, %rt15
  %rt17 = inttoptr i64 %rt16 to i32*
  store i32 6, i32* %rt17, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.150* %__ctaContext to %LLVMContext.150**
  %context.t0 = load %LLVMContext.150** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.150* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.150* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %rt10 = icmp ugt i16 %r2, %r3
  %r4 = select i1 %rt10, i16 %r2, i16 %r3
  %rt11 = inttoptr i64 %r1 to i16*
  store i16 %r4, i16* %rt11, align 2
  %rt17 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt17, align 4
  ret void

}
(1.831467) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(1.832579) LLVMDynamicTranslationCache.cpp:137:  inserting translation 4980736 with 40 bytes of local memory
(1.850339) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMax-u32
(1.850351) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(1.851624) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(1.851635) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = add i64 %r0, 4;
	%rt9 = inttoptr i64 %rt8 to i32*;
	%r3 = load i32* %rt9, align 4;
	%rt10 = icmp ugt i32 %r2, %r3;
	%r4 = select i1 %rt10, i32 %r2, i32 %r3;
	%rt11 = inttoptr i64 %r1 to i32*;
	store i32 %r4, i32* %rt11, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt12 = zext i32 %r5 to i64;
	%rt13 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt14 = load i8** %rt13;
	%rt15 = ptrtoint i8* %rt14 to i64;
	%rt16 = add i64 %rt12, %rt15;
	%rt17 = inttoptr i64 %rt16 to i32*;
	store i32 6, i32* %rt17, align 4;
	br label %exit;
exit:
	ret void;

}

(1.852521) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(1.852546) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(1.852556) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(1.852742) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.152* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.152* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.152* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = icmp ugt i32 %r2, %r3
  %r4 = select i1 %rt10, i32 %r2, i32 %r3
  %rt11 = inttoptr i64 %r1 to i32*
  store i32 %r4, i32* %rt11, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt12 = zext i32 %r5 to i64
  %rt13 = getelementptr %LLVMContext.152* %__ctaContext, i32 0, i32 4
  %rt14 = load i8** %rt13
  %rt15 = ptrtoint i8* %rt14 to i64
  %rt16 = add i64 %rt12, %rt15
  %rt17 = inttoptr i64 %rt16 to i32*
  store i32 6, i32* %rt17, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.152* %__ctaContext to %LLVMContext.152**
  %context.t0 = load %LLVMContext.152** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.152* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.152* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = icmp ugt i32 %r2, %r3
  %r4 = select i1 %rt10, i32 %r2, i32 %r3
  %rt11 = inttoptr i64 %r1 to i32*
  store i32 %r4, i32* %rt11, align 4
  %rt17 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt17, align 4
  ret void

}
(1.855698) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(1.856794) LLVMDynamicTranslationCache.cpp:137:  inserting translation 5046272 with 40 bytes of local memory
(1.874621) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMax-u64
(1.874633) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(1.875939) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(1.875950) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i64*;
	%r2 = load i64* %rt7, align 8;
	%rt8 = add i64 %r0, 8;
	%rt9 = inttoptr i64 %rt8 to i64*;
	%r3 = load i64* %rt9, align 8;
	%rt10 = icmp ugt i64 %r2, %r3;
	%r4 = select i1 %rt10, i64 %r2, i64 %r3;
	%rt11 = inttoptr i64 %r1 to i64*;
	store i64 %r4, i64* %rt11, align 8;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt12 = zext i32 %r5 to i64;
	%rt13 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt14 = load i8** %rt13;
	%rt15 = ptrtoint i8* %rt14 to i64;
	%rt16 = add i64 %rt12, %rt15;
	%rt17 = inttoptr i64 %rt16 to i32*;
	store i32 6, i32* %rt17, align 4;
	br label %exit;
exit:
	ret void;

}

(1.876900) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(1.876927) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(1.876936) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(1.877123) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.154* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.154* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.154* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %rt10 = icmp ugt i64 %r2, %r3
  %r4 = select i1 %rt10, i64 %r2, i64 %r3
  %rt11 = inttoptr i64 %r1 to i64*
  store i64 %r4, i64* %rt11, align 8
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt12 = zext i32 %r5 to i64
  %rt13 = getelementptr %LLVMContext.154* %__ctaContext, i32 0, i32 4
  %rt14 = load i8** %rt13
  %rt15 = ptrtoint i8* %rt14 to i64
  %rt16 = add i64 %rt12, %rt15
  %rt17 = inttoptr i64 %rt16 to i32*
  store i32 6, i32* %rt17, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.154* %__ctaContext to %LLVMContext.154**
  %context.t0 = load %LLVMContext.154** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.154* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.154* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %rt10 = icmp ugt i64 %r2, %r3
  %r4 = select i1 %rt10, i64 %r2, i64 %r3
  %rt11 = inttoptr i64 %r1 to i64*
  store i64 %r4, i64* %rt11, align 8
  %rt17 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt17, align 4
  ret void

}
(1.880178) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(1.881370) LLVMDynamicTranslationCache.cpp:137:  inserting translation 5111808 with 40 bytes of local memory
(1.899000) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMax-s16
(1.899011) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(1.900297) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(1.900308) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i16*;
	%r2 = load i16* %rt7, align 2;
	%rt8 = add i64 %r0, 2;
	%rt9 = inttoptr i64 %rt8 to i16*;
	%r3 = load i16* %rt9, align 2;
	%rt10 = icmp sgt i16 %r2, %r3;
	%r4 = select i1 %rt10, i16 %r2, i16 %r3;
	%rt11 = inttoptr i64 %r1 to i16*;
	store i16 %r4, i16* %rt11, align 2;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt12 = zext i32 %r5 to i64;
	%rt13 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt14 = load i8** %rt13;
	%rt15 = ptrtoint i8* %rt14 to i64;
	%rt16 = add i64 %rt12, %rt15;
	%rt17 = inttoptr i64 %rt16 to i32*;
	store i32 6, i32* %rt17, align 4;
	br label %exit;
exit:
	ret void;

}

(1.901200) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(1.901225) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(1.901234) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(1.901422) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.156* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.156* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.156* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %rt10 = icmp sgt i16 %r2, %r3
  %r4 = select i1 %rt10, i16 %r2, i16 %r3
  %rt11 = inttoptr i64 %r1 to i16*
  store i16 %r4, i16* %rt11, align 2
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt12 = zext i32 %r5 to i64
  %rt13 = getelementptr %LLVMContext.156* %__ctaContext, i32 0, i32 4
  %rt14 = load i8** %rt13
  %rt15 = ptrtoint i8* %rt14 to i64
  %rt16 = add i64 %rt12, %rt15
  %rt17 = inttoptr i64 %rt16 to i32*
  store i32 6, i32* %rt17, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.156* %__ctaContext to %LLVMContext.156**
  %context.t0 = load %LLVMContext.156** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.156* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.156* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %rt10 = icmp sgt i16 %r2, %r3
  %r4 = select i1 %rt10, i16 %r2, i16 %r3
  %rt11 = inttoptr i64 %r1 to i16*
  store i16 %r4, i16* %rt11, align 2
  %rt17 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt17, align 4
  ret void

}
(1.904491) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(1.905635) LLVMDynamicTranslationCache.cpp:137:  inserting translation 5177344 with 40 bytes of local memory
(1.922608) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMax-s32
(1.922621) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(1.923928) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(1.923939) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = add i64 %r0, 4;
	%rt9 = inttoptr i64 %rt8 to i32*;
	%r3 = load i32* %rt9, align 4;
	%rt10 = icmp sgt i32 %r2, %r3;
	%r4 = select i1 %rt10, i32 %r2, i32 %r3;
	%rt11 = inttoptr i64 %r1 to i32*;
	store i32 %r4, i32* %rt11, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt12 = zext i32 %r5 to i64;
	%rt13 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt14 = load i8** %rt13;
	%rt15 = ptrtoint i8* %rt14 to i64;
	%rt16 = add i64 %rt12, %rt15;
	%rt17 = inttoptr i64 %rt16 to i32*;
	store i32 6, i32* %rt17, align 4;
	br label %exit;
exit:
	ret void;

}

(1.924896) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(1.924922) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(1.924931) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(1.925119) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.158* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.158* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.158* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = icmp sgt i32 %r2, %r3
  %r4 = select i1 %rt10, i32 %r2, i32 %r3
  %rt11 = inttoptr i64 %r1 to i32*
  store i32 %r4, i32* %rt11, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt12 = zext i32 %r5 to i64
  %rt13 = getelementptr %LLVMContext.158* %__ctaContext, i32 0, i32 4
  %rt14 = load i8** %rt13
  %rt15 = ptrtoint i8* %rt14 to i64
  %rt16 = add i64 %rt12, %rt15
  %rt17 = inttoptr i64 %rt16 to i32*
  store i32 6, i32* %rt17, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.158* %__ctaContext to %LLVMContext.158**
  %context.t0 = load %LLVMContext.158** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.158* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.158* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = icmp sgt i32 %r2, %r3
  %r4 = select i1 %rt10, i32 %r2, i32 %r3
  %rt11 = inttoptr i64 %r1 to i32*
  store i32 %r4, i32* %rt11, align 4
  %rt17 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt17, align 4
  ret void

}
(1.928157) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(1.929322) LLVMDynamicTranslationCache.cpp:137:  inserting translation 5242880 with 40 bytes of local memory
(1.946995) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMax-s64
(1.947007) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(1.948293) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(1.948303) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i64*;
	%r2 = load i64* %rt7, align 8;
	%rt8 = add i64 %r0, 8;
	%rt9 = inttoptr i64 %rt8 to i64*;
	%r3 = load i64* %rt9, align 8;
	%rt10 = icmp sgt i64 %r2, %r3;
	%r4 = select i1 %rt10, i64 %r2, i64 %r3;
	%rt11 = inttoptr i64 %r1 to i64*;
	store i64 %r4, i64* %rt11, align 8;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt12 = zext i32 %r5 to i64;
	%rt13 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt14 = load i8** %rt13;
	%rt15 = ptrtoint i8* %rt14 to i64;
	%rt16 = add i64 %rt12, %rt15;
	%rt17 = inttoptr i64 %rt16 to i32*;
	store i32 6, i32* %rt17, align 4;
	br label %exit;
exit:
	ret void;

}

(1.949194) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(1.949219) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(1.949228) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(1.949416) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.160* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.160* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.160* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %rt10 = icmp sgt i64 %r2, %r3
  %r4 = select i1 %rt10, i64 %r2, i64 %r3
  %rt11 = inttoptr i64 %r1 to i64*
  store i64 %r4, i64* %rt11, align 8
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt12 = zext i32 %r5 to i64
  %rt13 = getelementptr %LLVMContext.160* %__ctaContext, i32 0, i32 4
  %rt14 = load i8** %rt13
  %rt15 = ptrtoint i8* %rt14 to i64
  %rt16 = add i64 %rt12, %rt15
  %rt17 = inttoptr i64 %rt16 to i32*
  store i32 6, i32* %rt17, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.160* %__ctaContext to %LLVMContext.160**
  %context.t0 = load %LLVMContext.160** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.160* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.160* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %rt10 = icmp sgt i64 %r2, %r3
  %r4 = select i1 %rt10, i64 %r2, i64 %r3
  %rt11 = inttoptr i64 %r1 to i64*
  store i64 %r4, i64* %rt11, align 8
  %rt17 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt17, align 4
  ret void

}
(1.952445) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(1.953532) LLVMDynamicTranslationCache.cpp:137:  inserting translation 5308416 with 40 bytes of local memory
(1.971164) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMin-u16
(1.971176) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(1.972461) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(1.972471) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i16*;
	%r2 = load i16* %rt7, align 2;
	%rt8 = add i64 %r0, 2;
	%rt9 = inttoptr i64 %rt8 to i16*;
	%r3 = load i16* %rt9, align 2;
	%rt10 = icmp ult i16 %r2, %r3;
	%r4 = select i1 %rt10, i16 %r2, i16 %r3;
	%rt11 = inttoptr i64 %r1 to i16*;
	store i16 %r4, i16* %rt11, align 2;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt12 = zext i32 %r5 to i64;
	%rt13 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt14 = load i8** %rt13;
	%rt15 = ptrtoint i8* %rt14 to i64;
	%rt16 = add i64 %rt12, %rt15;
	%rt17 = inttoptr i64 %rt16 to i32*;
	store i32 6, i32* %rt17, align 4;
	br label %exit;
exit:
	ret void;

}

(1.973365) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(1.973391) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(1.973400) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(1.973587) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.162* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.162* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.162* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %rt10 = icmp ult i16 %r2, %r3
  %r4 = select i1 %rt10, i16 %r2, i16 %r3
  %rt11 = inttoptr i64 %r1 to i16*
  store i16 %r4, i16* %rt11, align 2
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt12 = zext i32 %r5 to i64
  %rt13 = getelementptr %LLVMContext.162* %__ctaContext, i32 0, i32 4
  %rt14 = load i8** %rt13
  %rt15 = ptrtoint i8* %rt14 to i64
  %rt16 = add i64 %rt12, %rt15
  %rt17 = inttoptr i64 %rt16 to i32*
  store i32 6, i32* %rt17, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.162* %__ctaContext to %LLVMContext.162**
  %context.t0 = load %LLVMContext.162** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.162* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.162* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %rt10 = icmp ult i16 %r2, %r3
  %r4 = select i1 %rt10, i16 %r2, i16 %r3
  %rt11 = inttoptr i64 %r1 to i16*
  store i16 %r4, i16* %rt11, align 2
  %rt17 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt17, align 4
  ret void

}
(1.976579) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(1.977658) LLVMDynamicTranslationCache.cpp:137:  inserting translation 5373952 with 40 bytes of local memory
(1.995324) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMin-u32
(1.995335) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(1.996655) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(1.996665) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = add i64 %r0, 4;
	%rt9 = inttoptr i64 %rt8 to i32*;
	%r3 = load i32* %rt9, align 4;
	%rt10 = icmp ult i32 %r2, %r3;
	%r4 = select i1 %rt10, i32 %r2, i32 %r3;
	%rt11 = inttoptr i64 %r1 to i32*;
	store i32 %r4, i32* %rt11, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt12 = zext i32 %r5 to i64;
	%rt13 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt14 = load i8** %rt13;
	%rt15 = ptrtoint i8* %rt14 to i64;
	%rt16 = add i64 %rt12, %rt15;
	%rt17 = inttoptr i64 %rt16 to i32*;
	store i32 6, i32* %rt17, align 4;
	br label %exit;
exit:
	ret void;

}

(1.997568) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(1.997595) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(1.997604) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(1.997824) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.164* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.164* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.164* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = icmp ult i32 %r2, %r3
  %r4 = select i1 %rt10, i32 %r2, i32 %r3
  %rt11 = inttoptr i64 %r1 to i32*
  store i32 %r4, i32* %rt11, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt12 = zext i32 %r5 to i64
  %rt13 = getelementptr %LLVMContext.164* %__ctaContext, i32 0, i32 4
  %rt14 = load i8** %rt13
  %rt15 = ptrtoint i8* %rt14 to i64
  %rt16 = add i64 %rt12, %rt15
  %rt17 = inttoptr i64 %rt16 to i32*
  store i32 6, i32* %rt17, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.164* %__ctaContext to %LLVMContext.164**
  %context.t0 = load %LLVMContext.164** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.164* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.164* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = icmp ult i32 %r2, %r3
  %r4 = select i1 %rt10, i32 %r2, i32 %r3
  %rt11 = inttoptr i64 %r1 to i32*
  store i32 %r4, i32* %rt11, align 4
  %rt17 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt17, align 4
  ret void

}
(2.000904) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(2.002181) LLVMDynamicTranslationCache.cpp:137:  inserting translation 5439488 with 40 bytes of local memory
(2.019350) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMin-u64
(2.019362) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(2.020695) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(2.020706) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i64*;
	%r2 = load i64* %rt7, align 8;
	%rt8 = add i64 %r0, 8;
	%rt9 = inttoptr i64 %rt8 to i64*;
	%r3 = load i64* %rt9, align 8;
	%rt10 = icmp ult i64 %r2, %r3;
	%r4 = select i1 %rt10, i64 %r2, i64 %r3;
	%rt11 = inttoptr i64 %r1 to i64*;
	store i64 %r4, i64* %rt11, align 8;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt12 = zext i32 %r5 to i64;
	%rt13 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt14 = load i8** %rt13;
	%rt15 = ptrtoint i8* %rt14 to i64;
	%rt16 = add i64 %rt12, %rt15;
	%rt17 = inttoptr i64 %rt16 to i32*;
	store i32 6, i32* %rt17, align 4;
	br label %exit;
exit:
	ret void;

}

(2.021630) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(2.021656) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(2.021665) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(2.021853) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.166* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.166* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.166* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %rt10 = icmp ult i64 %r2, %r3
  %r4 = select i1 %rt10, i64 %r2, i64 %r3
  %rt11 = inttoptr i64 %r1 to i64*
  store i64 %r4, i64* %rt11, align 8
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt12 = zext i32 %r5 to i64
  %rt13 = getelementptr %LLVMContext.166* %__ctaContext, i32 0, i32 4
  %rt14 = load i8** %rt13
  %rt15 = ptrtoint i8* %rt14 to i64
  %rt16 = add i64 %rt12, %rt15
  %rt17 = inttoptr i64 %rt16 to i32*
  store i32 6, i32* %rt17, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.166* %__ctaContext to %LLVMContext.166**
  %context.t0 = load %LLVMContext.166** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.166* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.166* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %rt10 = icmp ult i64 %r2, %r3
  %r4 = select i1 %rt10, i64 %r2, i64 %r3
  %rt11 = inttoptr i64 %r1 to i64*
  store i64 %r4, i64* %rt11, align 8
  %rt17 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt17, align 4
  ret void

}
(2.024939) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(2.026141) LLVMDynamicTranslationCache.cpp:137:  inserting translation 5505024 with 40 bytes of local memory
(2.043184) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMin-s16
(2.043195) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(2.044490) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(2.044501) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i16*;
	%r2 = load i16* %rt7, align 2;
	%rt8 = add i64 %r0, 2;
	%rt9 = inttoptr i64 %rt8 to i16*;
	%r3 = load i16* %rt9, align 2;
	%rt10 = icmp slt i16 %r2, %r3;
	%r4 = select i1 %rt10, i16 %r2, i16 %r3;
	%rt11 = inttoptr i64 %r1 to i16*;
	store i16 %r4, i16* %rt11, align 2;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt12 = zext i32 %r5 to i64;
	%rt13 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt14 = load i8** %rt13;
	%rt15 = ptrtoint i8* %rt14 to i64;
	%rt16 = add i64 %rt12, %rt15;
	%rt17 = inttoptr i64 %rt16 to i32*;
	store i32 6, i32* %rt17, align 4;
	br label %exit;
exit:
	ret void;

}

(2.045408) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(2.045434) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(2.045443) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(2.045630) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.168* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.168* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.168* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %rt10 = icmp slt i16 %r2, %r3
  %r4 = select i1 %rt10, i16 %r2, i16 %r3
  %rt11 = inttoptr i64 %r1 to i16*
  store i16 %r4, i16* %rt11, align 2
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt12 = zext i32 %r5 to i64
  %rt13 = getelementptr %LLVMContext.168* %__ctaContext, i32 0, i32 4
  %rt14 = load i8** %rt13
  %rt15 = ptrtoint i8* %rt14 to i64
  %rt16 = add i64 %rt12, %rt15
  %rt17 = inttoptr i64 %rt16 to i32*
  store i32 6, i32* %rt17, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.168* %__ctaContext to %LLVMContext.168**
  %context.t0 = load %LLVMContext.168** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.168* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.168* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i16*
  %r2 = load i16* %rt7, align 2
  %rt8 = add i64 %r0, 2
  %rt9 = inttoptr i64 %rt8 to i16*
  %r3 = load i16* %rt9, align 2
  %rt10 = icmp slt i16 %r2, %r3
  %r4 = select i1 %rt10, i16 %r2, i16 %r3
  %rt11 = inttoptr i64 %r1 to i16*
  store i16 %r4, i16* %rt11, align 2
  %rt17 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt17, align 4
  ret void

}
(2.048752) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(2.049920) LLVMDynamicTranslationCache.cpp:137:  inserting translation 5570560 with 40 bytes of local memory
(2.067257) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMin-s32
(2.067271) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(2.068606) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(2.068617) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = add i64 %r0, 4;
	%rt9 = inttoptr i64 %rt8 to i32*;
	%r3 = load i32* %rt9, align 4;
	%rt10 = icmp slt i32 %r2, %r3;
	%r4 = select i1 %rt10, i32 %r2, i32 %r3;
	%rt11 = inttoptr i64 %r1 to i32*;
	store i32 %r4, i32* %rt11, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt12 = zext i32 %r5 to i64;
	%rt13 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt14 = load i8** %rt13;
	%rt15 = ptrtoint i8* %rt14 to i64;
	%rt16 = add i64 %rt12, %rt15;
	%rt17 = inttoptr i64 %rt16 to i32*;
	store i32 6, i32* %rt17, align 4;
	br label %exit;
exit:
	ret void;

}

(2.069559) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(2.069588) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(2.069598) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(2.069790) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.170* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.170* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.170* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = icmp slt i32 %r2, %r3
  %r4 = select i1 %rt10, i32 %r2, i32 %r3
  %rt11 = inttoptr i64 %r1 to i32*
  store i32 %r4, i32* %rt11, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt12 = zext i32 %r5 to i64
  %rt13 = getelementptr %LLVMContext.170* %__ctaContext, i32 0, i32 4
  %rt14 = load i8** %rt13
  %rt15 = ptrtoint i8* %rt14 to i64
  %rt16 = add i64 %rt12, %rt15
  %rt17 = inttoptr i64 %rt16 to i32*
  store i32 6, i32* %rt17, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.170* %__ctaContext to %LLVMContext.170**
  %context.t0 = load %LLVMContext.170** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.170* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.170* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = icmp slt i32 %r2, %r3
  %r4 = select i1 %rt10, i32 %r2, i32 %r3
  %rt11 = inttoptr i64 %r1 to i32*
  store i32 %r4, i32* %rt11, align 4
  %rt17 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt17, align 4
  ret void

}
(2.072904) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(2.074130) LLVMDynamicTranslationCache.cpp:137:  inserting translation 5636096 with 40 bytes of local memory
(2.091001) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestMin-s64
(2.091013) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(2.092299) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(2.092310) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i64*;
	%r2 = load i64* %rt7, align 8;
	%rt8 = add i64 %r0, 8;
	%rt9 = inttoptr i64 %rt8 to i64*;
	%r3 = load i64* %rt9, align 8;
	%rt10 = icmp slt i64 %r2, %r3;
	%r4 = select i1 %rt10, i64 %r2, i64 %r3;
	%rt11 = inttoptr i64 %r1 to i64*;
	store i64 %r4, i64* %rt11, align 8;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r5 = bitcast i32 0 to i32;
	%rt12 = zext i32 %r5 to i64;
	%rt13 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt14 = load i8** %rt13;
	%rt15 = ptrtoint i8* %rt14 to i64;
	%rt16 = add i64 %rt12, %rt15;
	%rt17 = inttoptr i64 %rt16 to i32*;
	store i32 6, i32* %rt17, align 4;
	br label %exit;
exit:
	ret void;

}

(2.093216) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(2.093241) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(2.093251) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(2.093439) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.172* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.172* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.172* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %rt10 = icmp slt i64 %r2, %r3
  %r4 = select i1 %rt10, i64 %r2, i64 %r3
  %rt11 = inttoptr i64 %r1 to i64*
  store i64 %r4, i64* %rt11, align 8
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r5 = bitcast i32 0 to i32
  %rt12 = zext i32 %r5 to i64
  %rt13 = getelementptr %LLVMContext.172* %__ctaContext, i32 0, i32 4
  %rt14 = load i8** %rt13
  %rt15 = ptrtoint i8* %rt14 to i64
  %rt16 = add i64 %rt12, %rt15
  %rt17 = inttoptr i64 %rt16 to i32*
  store i32 6, i32* %rt17, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.172* %__ctaContext to %LLVMContext.172**
  %context.t0 = load %LLVMContext.172** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.172* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.172* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %rt10 = icmp slt i64 %r2, %r3
  %r4 = select i1 %rt10, i64 %r2, i64 %r3
  %rt11 = inttoptr i64 %r1 to i64*
  store i64 %r4, i64* %rt11, align 8
  %rt17 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt17, align 4
  ret void

}
(2.096524) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(2.097766) LLVMDynamicTranslationCache.cpp:137:  inserting translation 5701632 with 40 bytes of local memory
(2.115094) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestPopc-b32
(2.115108) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(2.116402) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(2.116415) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%r3 = call i32 @llvm.ctpop.i32(i32 %r2);
	%rt8 = inttoptr i64 %r1 to i32*;
	store i32 %r3, i32* %rt8, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r4 = bitcast i32 0 to i32;
	%rt9 = zext i32 %r4 to i64;
	%rt10 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt11 = load i8** %rt10;
	%rt12 = ptrtoint i8* %rt11 to i64;
	%rt13 = add i64 %rt9, %rt12;
	%rt14 = inttoptr i64 %rt13 to i32*;
	store i32 6, i32* %rt14, align 4;
	br label %exit;
exit:
	ret void;

}

(2.117445) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(2.117456) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(2.117465) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(2.117670) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.174* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.174* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.174* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %r3 = call i32 @llvm.ctpop.i32(i32 %r2)
  %rt8 = inttoptr i64 %r1 to i32*
  store i32 %r3, i32* %rt8, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r4 = bitcast i32 0 to i32
  %rt9 = zext i32 %r4 to i64
  %rt10 = getelementptr %LLVMContext.174* %__ctaContext, i32 0, i32 4
  %rt11 = load i8** %rt10
  %rt12 = ptrtoint i8* %rt11 to i64
  %rt13 = add i64 %rt9, %rt12
  %rt14 = inttoptr i64 %rt13 to i32*
  store i32 6, i32* %rt14, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.174* %__ctaContext to %LLVMContext.174**
  %context.t0 = load %LLVMContext.174** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.174* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.174* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %r3 = tail call i32 @llvm.ctpop.i32(i32 %r2)
  %rt8 = inttoptr i64 %r1 to i32*
  store i32 %r3, i32* %rt8, align 4
  %rt14 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt14, align 4
  ret void

}
(2.120541) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(2.122076) LLVMDynamicTranslationCache.cpp:137:  inserting translation 5767168 with 32 bytes of local memory
(2.138724) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestPopc-b64
(2.138736) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(2.140000) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(2.140011) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i64*;
	%r2 = load i64* %rt7, align 8;
	%rt8 = call i64 @llvm.ctpop.i64(i64 %r2);
	%r3 = trunc i64 %rt8 to i32;
	%rt9 = inttoptr i64 %r1 to i32*;
	store i32 %r3, i32* %rt9, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r4 = bitcast i32 0 to i32;
	%rt10 = zext i32 %r4 to i64;
	%rt11 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt12 = load i8** %rt11;
	%rt13 = ptrtoint i8* %rt12 to i64;
	%rt14 = add i64 %rt10, %rt13;
	%rt15 = inttoptr i64 %rt14 to i32*;
	store i32 6, i32* %rt15, align 4;
	br label %exit;
exit:
	ret void;

}

(2.140937) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(2.140948) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(2.140971) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(2.141159) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.176* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.176* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.176* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = call i64 @llvm.ctpop.i64(i64 %r2)
  %r3 = trunc i64 %rt8 to i32
  %rt9 = inttoptr i64 %r1 to i32*
  store i32 %r3, i32* %rt9, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r4 = bitcast i32 0 to i32
  %rt10 = zext i32 %r4 to i64
  %rt11 = getelementptr %LLVMContext.176* %__ctaContext, i32 0, i32 4
  %rt12 = load i8** %rt11
  %rt13 = ptrtoint i8* %rt12 to i64
  %rt14 = add i64 %rt10, %rt13
  %rt15 = inttoptr i64 %rt14 to i32*
  store i32 6, i32* %rt15, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.176* %__ctaContext to %LLVMContext.176**
  %context.t0 = load %LLVMContext.176** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.176* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.176* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = tail call i64 @llvm.ctpop.i64(i64 %r2)
  %r3 = trunc i64 %rt8 to i32
  %rt9 = inttoptr i64 %r1 to i32*
  store i32 %r3, i32* %rt9, align 4
  %rt15 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt15, align 4
  ret void

}
(2.144049) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(2.145545) LLVMDynamicTranslationCache.cpp:137:  inserting translation 5832704 with 32 bytes of local memory
(2.162868) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestClz-b32
(2.162880) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(2.164122) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(2.164134) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%r3 = call i32 @llvm.ctlz.i32(i32 %r2);
	%rt8 = inttoptr i64 %r1 to i32*;
	store i32 %r3, i32* %rt8, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r4 = bitcast i32 0 to i32;
	%rt9 = zext i32 %r4 to i64;
	%rt10 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt11 = load i8** %rt10;
	%rt12 = ptrtoint i8* %rt11 to i64;
	%rt13 = add i64 %rt9, %rt12;
	%rt14 = inttoptr i64 %rt13 to i32*;
	store i32 6, i32* %rt14, align 4;
	br label %exit;
exit:
	ret void;

}

(2.165051) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(2.165063) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(2.165071) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(2.165274) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.178* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.178* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.178* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %r3 = call i32 @llvm.ctlz.i32(i32 %r2)
  %rt8 = inttoptr i64 %r1 to i32*
  store i32 %r3, i32* %rt8, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r4 = bitcast i32 0 to i32
  %rt9 = zext i32 %r4 to i64
  %rt10 = getelementptr %LLVMContext.178* %__ctaContext, i32 0, i32 4
  %rt11 = load i8** %rt10
  %rt12 = ptrtoint i8* %rt11 to i64
  %rt13 = add i64 %rt9, %rt12
  %rt14 = inttoptr i64 %rt13 to i32*
  store i32 6, i32* %rt14, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.178* %__ctaContext to %LLVMContext.178**
  %context.t0 = load %LLVMContext.178** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.178* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.178* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %r3 = tail call i32 @llvm.ctlz.i32(i32 %r2)
  %rt8 = inttoptr i64 %r1 to i32*
  store i32 %r3, i32* %rt8, align 4
  %rt14 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt14, align 4
  ret void

}
(2.168144) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(2.169322) LLVMDynamicTranslationCache.cpp:137:  inserting translation 5898240 with 32 bytes of local memory
(2.186500) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestClz-b64
(2.186512) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(2.187743) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(2.187754) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i64*;
	%r2 = load i64* %rt7, align 8;
	%rt8 = call i64 @llvm.ctlz.i64(i64 %r2);
	%r3 = trunc i64 %rt8 to i32;
	%rt9 = inttoptr i64 %r1 to i32*;
	store i32 %r3, i32* %rt9, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r4 = bitcast i32 0 to i32;
	%rt10 = zext i32 %r4 to i64;
	%rt11 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt12 = load i8** %rt11;
	%rt13 = ptrtoint i8* %rt12 to i64;
	%rt14 = add i64 %rt10, %rt13;
	%rt15 = inttoptr i64 %rt14 to i32*;
	store i32 6, i32* %rt15, align 4;
	br label %exit;
exit:
	ret void;

}

(2.188655) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(2.188666) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(2.188689) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(2.188877) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.180* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.180* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.180* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = call i64 @llvm.ctlz.i64(i64 %r2)
  %r3 = trunc i64 %rt8 to i32
  %rt9 = inttoptr i64 %r1 to i32*
  store i32 %r3, i32* %rt9, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r4 = bitcast i32 0 to i32
  %rt10 = zext i32 %r4 to i64
  %rt11 = getelementptr %LLVMContext.180* %__ctaContext, i32 0, i32 4
  %rt12 = load i8** %rt11
  %rt13 = ptrtoint i8* %rt12 to i64
  %rt14 = add i64 %rt10, %rt13
  %rt15 = inttoptr i64 %rt14 to i32*
  store i32 6, i32* %rt15, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.180* %__ctaContext to %LLVMContext.180**
  %context.t0 = load %LLVMContext.180** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.180* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.180* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = tail call i64 @llvm.ctlz.i64(i64 %r2)
  %r3 = trunc i64 %rt8 to i32
  %rt9 = inttoptr i64 %r1 to i32*
  store i32 %r3, i32* %rt9, align 4
  %rt15 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt15, align 4
  ret void

}
(2.191726) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(2.192916) LLVMDynamicTranslationCache.cpp:137:  inserting translation 5963776 with 32 bytes of local memory
(2.210723) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestBfind-u32
(2.210736) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(2.211974) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(2.211985) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%r3 = call i32 @__ocelot_bfind_b32(i32 %r2, i1 0);
	%rt8 = inttoptr i64 %r1 to i32*;
	store i32 %r3, i32* %rt8, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r4 = bitcast i32 0 to i32;
	%rt9 = zext i32 %r4 to i64;
	%rt10 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt11 = load i8** %rt10;
	%rt12 = ptrtoint i8* %rt11 to i64;
	%rt13 = add i64 %rt9, %rt12;
	%rt14 = inttoptr i64 %rt13 to i32*;
	store i32 6, i32* %rt14, align 4;
	br label %exit;
exit:
	ret void;

}

(2.212893) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(2.212905) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(2.212913) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(2.213112) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.182* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.182* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.182* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %r3 = call i32 @__ocelot_bfind_b32(i32 %r2, i1 false)
  %rt8 = inttoptr i64 %r1 to i32*
  store i32 %r3, i32* %rt8, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r4 = bitcast i32 0 to i32
  %rt9 = zext i32 %r4 to i64
  %rt10 = getelementptr %LLVMContext.182* %__ctaContext, i32 0, i32 4
  %rt11 = load i8** %rt10
  %rt12 = ptrtoint i8* %rt11 to i64
  %rt13 = add i64 %rt9, %rt12
  %rt14 = inttoptr i64 %rt13 to i32*
  store i32 6, i32* %rt14, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.182* %__ctaContext to %LLVMContext.182**
  %context.t0 = load %LLVMContext.182** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.182* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.182* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %r3 = tail call i32 @__ocelot_bfind_b32(i32 %r2, i1 false) nounwind
  %rt8 = inttoptr i64 %r1 to i32*
  store i32 %r3, i32* %rt8, align 4
  %rt14 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt14, align 4
  ret void

}
(2.215878) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(2.217234) LLVMDynamicTranslationCache.cpp:137:  inserting translation 6029312 with 32 bytes of local memory
(2.235007) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestBfind-u64
(2.235019) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(2.236268) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(2.236279) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i64*;
	%r2 = load i64* %rt7, align 8;
	%r3 = call i32 @__ocelot_bfind_b64(i64 %r2, i1 0);
	%rt8 = inttoptr i64 %r1 to i32*;
	store i32 %r3, i32* %rt8, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r4 = bitcast i32 0 to i32;
	%rt9 = zext i32 %r4 to i64;
	%rt10 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt11 = load i8** %rt10;
	%rt12 = ptrtoint i8* %rt11 to i64;
	%rt13 = add i64 %rt9, %rt12;
	%rt14 = inttoptr i64 %rt13 to i32*;
	store i32 6, i32* %rt14, align 4;
	br label %exit;
exit:
	ret void;

}

(2.237201) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(2.237213) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(2.237221) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(2.237425) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.184* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.184* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.184* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %r3 = call i32 @__ocelot_bfind_b64(i64 %r2, i1 false)
  %rt8 = inttoptr i64 %r1 to i32*
  store i32 %r3, i32* %rt8, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r4 = bitcast i32 0 to i32
  %rt9 = zext i32 %r4 to i64
  %rt10 = getelementptr %LLVMContext.184* %__ctaContext, i32 0, i32 4
  %rt11 = load i8** %rt10
  %rt12 = ptrtoint i8* %rt11 to i64
  %rt13 = add i64 %rt9, %rt12
  %rt14 = inttoptr i64 %rt13 to i32*
  store i32 6, i32* %rt14, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.184* %__ctaContext to %LLVMContext.184**
  %context.t0 = load %LLVMContext.184** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.184* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.184* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %r3 = tail call i32 @__ocelot_bfind_b64(i64 %r2, i1 false) nounwind
  %rt8 = inttoptr i64 %r1 to i32*
  store i32 %r3, i32* %rt8, align 4
  %rt14 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt14, align 4
  ret void

}
(2.240209) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(2.241478) LLVMDynamicTranslationCache.cpp:137:  inserting translation 6094848 with 32 bytes of local memory
(2.259244) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestBfind-s32
(2.259256) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(2.260506) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(2.260516) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = icmp slt i32 %r2, 0;
	%rt9 = sub i32 0, %r2;
	%rt10 = select i1 %rt8, i32 %rt9, i32 %r2;
	%r3 = call i32 @__ocelot_bfind_b32(i32 %rt10, i1 0);
	%rt11 = inttoptr i64 %r1 to i32*;
	store i32 %r3, i32* %rt11, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r4 = bitcast i32 0 to i32;
	%rt12 = zext i32 %r4 to i64;
	%rt13 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt14 = load i8** %rt13;
	%rt15 = ptrtoint i8* %rt14 to i64;
	%rt16 = add i64 %rt12, %rt15;
	%rt17 = inttoptr i64 %rt16 to i32*;
	store i32 6, i32* %rt17, align 4;
	br label %exit;
exit:
	ret void;

}

(2.261414) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(2.261440) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(2.261449) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(2.261636) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.186* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.186* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.186* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = icmp slt i32 %r2, 0
  %rt9 = sub i32 0, %r2
  %rt10 = select i1 %rt8, i32 %rt9, i32 %r2
  %r3 = call i32 @__ocelot_bfind_b32(i32 %rt10, i1 false)
  %rt11 = inttoptr i64 %r1 to i32*
  store i32 %r3, i32* %rt11, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r4 = bitcast i32 0 to i32
  %rt12 = zext i32 %r4 to i64
  %rt13 = getelementptr %LLVMContext.186* %__ctaContext, i32 0, i32 4
  %rt14 = load i8** %rt13
  %rt15 = ptrtoint i8* %rt14 to i64
  %rt16 = add i64 %rt12, %rt15
  %rt17 = inttoptr i64 %rt16 to i32*
  store i32 6, i32* %rt17, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.186* %__ctaContext to %LLVMContext.186**
  %context.t0 = load %LLVMContext.186** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.186* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.186* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = icmp slt i32 %r2, 0
  %rt9 = sub i32 0, %r2
  %rt10 = select i1 %rt8, i32 %rt9, i32 %r2
  %r3 = tail call i32 @__ocelot_bfind_b32(i32 %rt10, i1 false) nounwind
  %rt11 = inttoptr i64 %r1 to i32*
  store i32 %r3, i32* %rt11, align 4
  %rt17 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt17, align 4
  ret void

}
(2.264605) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(2.265946) LLVMDynamicTranslationCache.cpp:137:  inserting translation 6160384 with 32 bytes of local memory
(2.282973) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestBfind-s64
(2.282984) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(2.284223) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(2.284234) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i64*;
	%r2 = load i64* %rt7, align 8;
	%rt8 = icmp slt i64 %r2, 0;
	%rt9 = sub i64 0, %r2;
	%rt10 = select i1 %rt8, i64 %rt9, i64 %r2;
	%r3 = call i32 @__ocelot_bfind_b64(i64 %rt10, i1 0);
	%rt11 = inttoptr i64 %r1 to i32*;
	store i32 %r3, i32* %rt11, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r4 = bitcast i32 0 to i32;
	%rt12 = zext i32 %r4 to i64;
	%rt13 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt14 = load i8** %rt13;
	%rt15 = ptrtoint i8* %rt14 to i64;
	%rt16 = add i64 %rt12, %rt15;
	%rt17 = inttoptr i64 %rt16 to i32*;
	store i32 6, i32* %rt17, align 4;
	br label %exit;
exit:
	ret void;

}

(2.285115) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(2.285153) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(2.285162) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(2.285342) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.188* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.188* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.188* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = icmp slt i64 %r2, 0
  %rt9 = sub i64 0, %r2
  %rt10 = select i1 %rt8, i64 %rt9, i64 %r2
  %r3 = call i32 @__ocelot_bfind_b64(i64 %rt10, i1 false)
  %rt11 = inttoptr i64 %r1 to i32*
  store i32 %r3, i32* %rt11, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r4 = bitcast i32 0 to i32
  %rt12 = zext i32 %r4 to i64
  %rt13 = getelementptr %LLVMContext.188* %__ctaContext, i32 0, i32 4
  %rt14 = load i8** %rt13
  %rt15 = ptrtoint i8* %rt14 to i64
  %rt16 = add i64 %rt12, %rt15
  %rt17 = inttoptr i64 %rt16 to i32*
  store i32 6, i32* %rt17, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.188* %__ctaContext to %LLVMContext.188**
  %context.t0 = load %LLVMContext.188** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.188* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.188* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = icmp slt i64 %r2, 0
  %rt9 = sub i64 0, %r2
  %rt10 = select i1 %rt8, i64 %rt9, i64 %r2
  %r3 = tail call i32 @__ocelot_bfind_b64(i64 %rt10, i1 false) nounwind
  %rt11 = inttoptr i64 %r1 to i32*
  store i32 %r3, i32* %rt11, align 4
  %rt17 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt17, align 4
  ret void

}
(2.288348) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(2.289720) LLVMDynamicTranslationCache.cpp:137:  inserting translation 6225920 with 32 bytes of local memory
(2.306710) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestBfind-shiftamount-u32
(2.306721) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(2.307928) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(2.307939) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%r3 = call i32 @__ocelot_bfind_b32(i32 %r2, i1 1);
	%rt8 = inttoptr i64 %r1 to i32*;
	store i32 %r3, i32* %rt8, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r4 = bitcast i32 0 to i32;
	%rt9 = zext i32 %r4 to i64;
	%rt10 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt11 = load i8** %rt10;
	%rt12 = ptrtoint i8* %rt11 to i64;
	%rt13 = add i64 %rt9, %rt12;
	%rt14 = inttoptr i64 %rt13 to i32*;
	store i32 6, i32* %rt14, align 4;
	br label %exit;
exit:
	ret void;

}

(2.308841) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(2.308853) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(2.308861) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(2.309062) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.190* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.190* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.190* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %r3 = call i32 @__ocelot_bfind_b32(i32 %r2, i1 true)
  %rt8 = inttoptr i64 %r1 to i32*
  store i32 %r3, i32* %rt8, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r4 = bitcast i32 0 to i32
  %rt9 = zext i32 %r4 to i64
  %rt10 = getelementptr %LLVMContext.190* %__ctaContext, i32 0, i32 4
  %rt11 = load i8** %rt10
  %rt12 = ptrtoint i8* %rt11 to i64
  %rt13 = add i64 %rt9, %rt12
  %rt14 = inttoptr i64 %rt13 to i32*
  store i32 6, i32* %rt14, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.190* %__ctaContext to %LLVMContext.190**
  %context.t0 = load %LLVMContext.190** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.190* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.190* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %r3 = tail call i32 @__ocelot_bfind_b32(i32 %r2, i1 true) nounwind
  %rt8 = inttoptr i64 %r1 to i32*
  store i32 %r3, i32* %rt8, align 4
  %rt14 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt14, align 4
  ret void

}
(2.311804) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(2.313016) LLVMDynamicTranslationCache.cpp:137:  inserting translation 6291456 with 32 bytes of local memory
(2.330809) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestBfind-shiftamount-u64
(2.330821) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(2.332079) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(2.332089) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i64*;
	%r2 = load i64* %rt7, align 8;
	%r3 = call i32 @__ocelot_bfind_b64(i64 %r2, i1 1);
	%rt8 = inttoptr i64 %r1 to i32*;
	store i32 %r3, i32* %rt8, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r4 = bitcast i32 0 to i32;
	%rt9 = zext i32 %r4 to i64;
	%rt10 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt11 = load i8** %rt10;
	%rt12 = ptrtoint i8* %rt11 to i64;
	%rt13 = add i64 %rt9, %rt12;
	%rt14 = inttoptr i64 %rt13 to i32*;
	store i32 6, i32* %rt14, align 4;
	br label %exit;
exit:
	ret void;

}

(2.332962) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(2.332973) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(2.332982) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(2.333183) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.192* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.192* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.192* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %r3 = call i32 @__ocelot_bfind_b64(i64 %r2, i1 true)
  %rt8 = inttoptr i64 %r1 to i32*
  store i32 %r3, i32* %rt8, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r4 = bitcast i32 0 to i32
  %rt9 = zext i32 %r4 to i64
  %rt10 = getelementptr %LLVMContext.192* %__ctaContext, i32 0, i32 4
  %rt11 = load i8** %rt10
  %rt12 = ptrtoint i8* %rt11 to i64
  %rt13 = add i64 %rt9, %rt12
  %rt14 = inttoptr i64 %rt13 to i32*
  store i32 6, i32* %rt14, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.192* %__ctaContext to %LLVMContext.192**
  %context.t0 = load %LLVMContext.192** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.192* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.192* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %r3 = tail call i32 @__ocelot_bfind_b64(i64 %r2, i1 true) nounwind
  %rt8 = inttoptr i64 %r1 to i32*
  store i32 %r3, i32* %rt8, align 4
  %rt14 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt14, align 4
  ret void

}
(2.335907) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(2.337166) LLVMDynamicTranslationCache.cpp:137:  inserting translation 6356992 with 32 bytes of local memory
(2.354874) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestBfind-shiftamount-s32
(2.354886) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(2.356122) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(2.356133) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = icmp slt i32 %r2, 0;
	%rt9 = sub i32 0, %r2;
	%rt10 = select i1 %rt8, i32 %rt9, i32 %r2;
	%r3 = call i32 @__ocelot_bfind_b32(i32 %rt10, i1 1);
	%rt11 = inttoptr i64 %r1 to i32*;
	store i32 %r3, i32* %rt11, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r4 = bitcast i32 0 to i32;
	%rt12 = zext i32 %r4 to i64;
	%rt13 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt14 = load i8** %rt13;
	%rt15 = ptrtoint i8* %rt14 to i64;
	%rt16 = add i64 %rt12, %rt15;
	%rt17 = inttoptr i64 %rt16 to i32*;
	store i32 6, i32* %rt17, align 4;
	br label %exit;
exit:
	ret void;

}

(2.357042) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(2.357069) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(2.357078) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(2.357265) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.194* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.194* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.194* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = icmp slt i32 %r2, 0
  %rt9 = sub i32 0, %r2
  %rt10 = select i1 %rt8, i32 %rt9, i32 %r2
  %r3 = call i32 @__ocelot_bfind_b32(i32 %rt10, i1 true)
  %rt11 = inttoptr i64 %r1 to i32*
  store i32 %r3, i32* %rt11, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r4 = bitcast i32 0 to i32
  %rt12 = zext i32 %r4 to i64
  %rt13 = getelementptr %LLVMContext.194* %__ctaContext, i32 0, i32 4
  %rt14 = load i8** %rt13
  %rt15 = ptrtoint i8* %rt14 to i64
  %rt16 = add i64 %rt12, %rt15
  %rt17 = inttoptr i64 %rt16 to i32*
  store i32 6, i32* %rt17, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.194* %__ctaContext to %LLVMContext.194**
  %context.t0 = load %LLVMContext.194** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.194* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.194* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = icmp slt i32 %r2, 0
  %rt9 = sub i32 0, %r2
  %rt10 = select i1 %rt8, i32 %rt9, i32 %r2
  %r3 = tail call i32 @__ocelot_bfind_b32(i32 %rt10, i1 true) nounwind
  %rt11 = inttoptr i64 %r1 to i32*
  store i32 %r3, i32* %rt11, align 4
  %rt17 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt17, align 4
  ret void

}
(2.360214) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(2.361523) LLVMDynamicTranslationCache.cpp:137:  inserting translation 6422528 with 32 bytes of local memory
(2.379249) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestBfind-shiftamount-s64
(2.379260) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(2.380490) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(2.380501) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i64*;
	%r2 = load i64* %rt7, align 8;
	%rt8 = icmp slt i64 %r2, 0;
	%rt9 = sub i64 0, %r2;
	%rt10 = select i1 %rt8, i64 %rt9, i64 %r2;
	%r3 = call i32 @__ocelot_bfind_b64(i64 %rt10, i1 1);
	%rt11 = inttoptr i64 %r1 to i32*;
	store i32 %r3, i32* %rt11, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r4 = bitcast i32 0 to i32;
	%rt12 = zext i32 %r4 to i64;
	%rt13 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt14 = load i8** %rt13;
	%rt15 = ptrtoint i8* %rt14 to i64;
	%rt16 = add i64 %rt12, %rt15;
	%rt17 = inttoptr i64 %rt16 to i32*;
	store i32 6, i32* %rt17, align 4;
	br label %exit;
exit:
	ret void;

}

(2.381380) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(2.381407) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(2.381416) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(2.381603) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.196* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.196* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.196* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = icmp slt i64 %r2, 0
  %rt9 = sub i64 0, %r2
  %rt10 = select i1 %rt8, i64 %rt9, i64 %r2
  %r3 = call i32 @__ocelot_bfind_b64(i64 %rt10, i1 true)
  %rt11 = inttoptr i64 %r1 to i32*
  store i32 %r3, i32* %rt11, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r4 = bitcast i32 0 to i32
  %rt12 = zext i32 %r4 to i64
  %rt13 = getelementptr %LLVMContext.196* %__ctaContext, i32 0, i32 4
  %rt14 = load i8** %rt13
  %rt15 = ptrtoint i8* %rt14 to i64
  %rt16 = add i64 %rt12, %rt15
  %rt17 = inttoptr i64 %rt16 to i32*
  store i32 6, i32* %rt17, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.196* %__ctaContext to %LLVMContext.196**
  %context.t0 = load %LLVMContext.196** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.196* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.196* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = icmp slt i64 %r2, 0
  %rt9 = sub i64 0, %r2
  %rt10 = select i1 %rt8, i64 %rt9, i64 %r2
  %r3 = tail call i32 @__ocelot_bfind_b64(i64 %rt10, i1 true) nounwind
  %rt11 = inttoptr i64 %r1 to i32*
  store i32 %r3, i32* %rt11, align 4
  %rt17 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt17, align 4
  ret void

}
(2.384567) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(2.385862) LLVMDynamicTranslationCache.cpp:137:  inserting translation 6488064 with 32 bytes of local memory
(2.402908) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestBrev-b32
(2.402919) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(2.404120) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(2.404130) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%r3 = call i32 @__ocelot_brev_b32(i32 %r2);
	%rt8 = inttoptr i64 %r1 to i32*;
	store i32 %r3, i32* %rt8, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r4 = bitcast i32 0 to i32;
	%rt9 = zext i32 %r4 to i64;
	%rt10 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt11 = load i8** %rt10;
	%rt12 = ptrtoint i8* %rt11 to i64;
	%rt13 = add i64 %rt9, %rt12;
	%rt14 = inttoptr i64 %rt13 to i32*;
	store i32 6, i32* %rt14, align 4;
	br label %exit;
exit:
	ret void;

}

(2.404996) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(2.405007) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(2.405015) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(2.405215) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.198* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.198* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.198* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %r3 = call i32 @__ocelot_brev_b32(i32 %r2)
  %rt8 = inttoptr i64 %r1 to i32*
  store i32 %r3, i32* %rt8, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r4 = bitcast i32 0 to i32
  %rt9 = zext i32 %r4 to i64
  %rt10 = getelementptr %LLVMContext.198* %__ctaContext, i32 0, i32 4
  %rt11 = load i8** %rt10
  %rt12 = ptrtoint i8* %rt11 to i64
  %rt13 = add i64 %rt9, %rt12
  %rt14 = inttoptr i64 %rt13 to i32*
  store i32 6, i32* %rt14, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.198* %__ctaContext to %LLVMContext.198**
  %context.t0 = load %LLVMContext.198** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.198* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.198* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %r3 = tail call i32 @__ocelot_brev_b32(i32 %r2) nounwind
  %rt8 = inttoptr i64 %r1 to i32*
  store i32 %r3, i32* %rt8, align 4
  %rt14 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt14, align 4
  ret void

}
(2.407967) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(2.409115) LLVMDynamicTranslationCache.cpp:137:  inserting translation 6553600 with 32 bytes of local memory
(2.427018) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestBrev-b64
(2.427029) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(2.428252) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(2.428262) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i64*;
	%r2 = load i64* %rt7, align 8;
	%r3 = call i64 @__ocelot_brev_b64(i64 %r2);
	%rt8 = inttoptr i64 %r1 to i64*;
	store i64 %r3, i64* %rt8, align 8;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r4 = bitcast i32 0 to i32;
	%rt9 = zext i32 %r4 to i64;
	%rt10 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt11 = load i8** %rt10;
	%rt12 = ptrtoint i8* %rt11 to i64;
	%rt13 = add i64 %rt9, %rt12;
	%rt14 = inttoptr i64 %rt13 to i32*;
	store i32 6, i32* %rt14, align 4;
	br label %exit;
exit:
	ret void;

}

(2.429125) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(2.429136) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(2.429144) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(2.429345) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.200* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.200* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.200* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %r3 = call i64 @__ocelot_brev_b64(i64 %r2)
  %rt8 = inttoptr i64 %r1 to i64*
  store i64 %r3, i64* %rt8, align 8
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r4 = bitcast i32 0 to i32
  %rt9 = zext i32 %r4 to i64
  %rt10 = getelementptr %LLVMContext.200* %__ctaContext, i32 0, i32 4
  %rt11 = load i8** %rt10
  %rt12 = ptrtoint i8* %rt11 to i64
  %rt13 = add i64 %rt9, %rt12
  %rt14 = inttoptr i64 %rt13 to i32*
  store i32 6, i32* %rt14, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.200* %__ctaContext to %LLVMContext.200**
  %context.t0 = load %LLVMContext.200** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.200* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.200* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %r3 = tail call i64 @__ocelot_brev_b64(i64 %r2) nounwind
  %rt8 = inttoptr i64 %r1 to i64*
  store i64 %r3, i64* %rt8, align 8
  %rt14 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt14, align 4
  ret void

}
(2.432048) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(2.433174) LLVMDynamicTranslationCache.cpp:137:  inserting translation 6619136 with 32 bytes of local memory
(2.451071) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestBfi-b32
(2.451082) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(2.452568) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(2.452579) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = add i64 %r0, 4;
	%rt9 = inttoptr i64 %rt8 to i32*;
	%r3 = load i32* %rt9, align 4;
	%rt10 = add i64 %r0, 8;
	%rt11 = inttoptr i64 %rt10 to i32*;
	%r4 = load i32* %rt11, align 4;
	%rt12 = add i64 %r0, 12;
	%rt13 = inttoptr i64 %rt12 to i32*;
	%r5 = load i32* %rt13, align 4;
	%rt14 = icmp ult i32 %r4, 63;
	%r6 = select i1 %rt14, i32 %r4, i32 63;
	%rt15 = icmp ult i32 %r5, 63;
	%r7 = select i1 %rt15, i32 %r5, i32 63;
	%r8 = call i32 @__ocelot_bfi_b32(i32 %r2, i32 %r3, i32 %r6, i32 %r7);
	%rt16 = inttoptr i64 %r1 to i32*;
	store i32 %r8, i32* %rt16, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r9 = bitcast i32 0 to i32;
	%rt17 = zext i32 %r9 to i64;
	%rt18 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt19 = load i8** %rt18;
	%rt20 = ptrtoint i8* %rt19 to i64;
	%rt21 = add i64 %rt17, %rt20;
	%rt22 = inttoptr i64 %rt21 to i32*;
	store i32 6, i32* %rt22, align 4;
	br label %exit;
exit:
	ret void;

}

(2.453513) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(2.453524) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(2.453532) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(2.453720) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.202* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.202* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.202* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = add i64 %r0, 8
  %rt11 = inttoptr i64 %rt10 to i32*
  %r4 = load i32* %rt11, align 4
  %rt12 = add i64 %r0, 12
  %rt13 = inttoptr i64 %rt12 to i32*
  %r5 = load i32* %rt13, align 4
  %rt14 = icmp ult i32 %r4, 63
  %r6 = select i1 %rt14, i32 %r4, i32 63
  %rt15 = icmp ult i32 %r5, 63
  %r7 = select i1 %rt15, i32 %r5, i32 63
  %r8 = call i32 @__ocelot_bfi_b32(i32 %r2, i32 %r3, i32 %r6, i32 %r7)
  %rt16 = inttoptr i64 %r1 to i32*
  store i32 %r8, i32* %rt16, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r9 = bitcast i32 0 to i32
  %rt17 = zext i32 %r9 to i64
  %rt18 = getelementptr %LLVMContext.202* %__ctaContext, i32 0, i32 4
  %rt19 = load i8** %rt18
  %rt20 = ptrtoint i8* %rt19 to i64
  %rt21 = add i64 %rt17, %rt20
  %rt22 = inttoptr i64 %rt21 to i32*
  store i32 6, i32* %rt22, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.202* %__ctaContext to %LLVMContext.202**
  %context.t0 = load %LLVMContext.202** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.202* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.202* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = add i64 %r0, 8
  %rt11 = inttoptr i64 %rt10 to i32*
  %r4 = load i32* %rt11, align 4
  %rt12 = add i64 %r0, 12
  %rt13 = inttoptr i64 %rt12 to i32*
  %r5 = load i32* %rt13, align 4
  %rt14 = icmp ult i32 %r4, 63
  %r6 = select i1 %rt14, i32 %r4, i32 63
  %rt15 = icmp ult i32 %r5, 63
  %r7 = select i1 %rt15, i32 %r5, i32 63
  %r8 = tail call i32 @__ocelot_bfi_b32(i32 %r2, i32 %r3, i32 %r6, i32 %r7) nounwind
  %rt16 = inttoptr i64 %r1 to i32*
  store i32 %r8, i32* %rt16, align 4
  %rt22 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt22, align 4
  ret void

}
(2.457346) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(2.458799) LLVMDynamicTranslationCache.cpp:137:  inserting translation 6684672 with 56 bytes of local memory
(2.474844) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestBfi-b64
(2.474856) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(2.476375) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(2.476386) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i64*;
	%r2 = load i64* %rt7, align 8;
	%rt8 = add i64 %r0, 8;
	%rt9 = inttoptr i64 %rt8 to i64*;
	%r3 = load i64* %rt9, align 8;
	%rt10 = add i64 %r0, 16;
	%rt11 = inttoptr i64 %rt10 to i32*;
	%r4 = load i32* %rt11, align 4;
	%rt12 = add i64 %r0, 20;
	%rt13 = inttoptr i64 %rt12 to i32*;
	%r5 = load i32* %rt13, align 4;
	%rt14 = icmp ult i32 %r4, 63;
	%r6 = select i1 %rt14, i32 %r4, i32 63;
	%rt15 = icmp ult i32 %r5, 63;
	%r7 = select i1 %rt15, i32 %r5, i32 63;
	%r8 = call i64 @__ocelot_bfi_b64(i64 %r2, i64 %r3, i32 %r6, i32 %r7);
	%rt16 = inttoptr i64 %r1 to i64*;
	store i64 %r8, i64* %rt16, align 8;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r9 = bitcast i32 0 to i32;
	%rt17 = zext i32 %r9 to i64;
	%rt18 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt19 = load i8** %rt18;
	%rt20 = ptrtoint i8* %rt19 to i64;
	%rt21 = add i64 %rt17, %rt20;
	%rt22 = inttoptr i64 %rt21 to i32*;
	store i32 6, i32* %rt22, align 4;
	br label %exit;
exit:
	ret void;

}

(2.477327) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(2.477339) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(2.477347) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(2.477535) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.204* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.204* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.204* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %rt10 = add i64 %r0, 16
  %rt11 = inttoptr i64 %rt10 to i32*
  %r4 = load i32* %rt11, align 4
  %rt12 = add i64 %r0, 20
  %rt13 = inttoptr i64 %rt12 to i32*
  %r5 = load i32* %rt13, align 4
  %rt14 = icmp ult i32 %r4, 63
  %r6 = select i1 %rt14, i32 %r4, i32 63
  %rt15 = icmp ult i32 %r5, 63
  %r7 = select i1 %rt15, i32 %r5, i32 63
  %r8 = call i64 @__ocelot_bfi_b64(i64 %r2, i64 %r3, i32 %r6, i32 %r7)
  %rt16 = inttoptr i64 %r1 to i64*
  store i64 %r8, i64* %rt16, align 8
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r9 = bitcast i32 0 to i32
  %rt17 = zext i32 %r9 to i64
  %rt18 = getelementptr %LLVMContext.204* %__ctaContext, i32 0, i32 4
  %rt19 = load i8** %rt18
  %rt20 = ptrtoint i8* %rt19 to i64
  %rt21 = add i64 %rt17, %rt20
  %rt22 = inttoptr i64 %rt21 to i32*
  store i32 6, i32* %rt22, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.204* %__ctaContext to %LLVMContext.204**
  %context.t0 = load %LLVMContext.204** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.204* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.204* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i64*
  %r2 = load i64* %rt7, align 8
  %rt8 = add i64 %r0, 8
  %rt9 = inttoptr i64 %rt8 to i64*
  %r3 = load i64* %rt9, align 8
  %rt10 = add i64 %r0, 16
  %rt11 = inttoptr i64 %rt10 to i32*
  %r4 = load i32* %rt11, align 4
  %rt12 = add i64 %r0, 20
  %rt13 = inttoptr i64 %rt12 to i32*
  %r5 = load i32* %rt13, align 4
  %rt14 = icmp ult i32 %r4, 63
  %r6 = select i1 %rt14, i32 %r4, i32 63
  %rt15 = icmp ult i32 %r5, 63
  %r7 = select i1 %rt15, i32 %r5, i32 63
  %r8 = tail call i64 @__ocelot_bfi_b64(i64 %r2, i64 %r3, i32 %r6, i32 %r7) nounwind
  %rt16 = inttoptr i64 %r1 to i64*
  store i64 %r8, i64* %rt16, align 8
  %rt22 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt22, align 4
  ret void

}
(2.481149) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(2.482587) LLVMDynamicTranslationCache.cpp:137:  inserting translation 6750208 with 56 bytes of local memory
(2.498585) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestPrmt-b32
(2.498596) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(2.499924) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(2.499935) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = add i64 %r0, 4;
	%rt9 = inttoptr i64 %rt8 to i32*;
	%r3 = load i32* %rt9, align 4;
	%rt10 = add i64 %r0, 8;
	%rt11 = inttoptr i64 %rt10 to i32*;
	%r4 = load i32* %rt11, align 4;
	%r5 = call i32 @__ocelot_prmt(i32 %r2, i32 %r3, i32 %r4);
	%rt12 = inttoptr i64 %r1 to i32*;
	store i32 %r5, i32* %rt12, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r6 = bitcast i32 0 to i32;
	%rt13 = zext i32 %r6 to i64;
	%rt14 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt15 = load i8** %rt14;
	%rt16 = ptrtoint i8* %rt15 to i64;
	%rt17 = add i64 %rt13, %rt16;
	%rt18 = inttoptr i64 %rt17 to i32*;
	store i32 6, i32* %rt18, align 4;
	br label %exit;
exit:
	ret void;

}

(2.500833) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(2.500844) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(2.500852) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(2.501038) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.206* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.206* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.206* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = add i64 %r0, 8
  %rt11 = inttoptr i64 %rt10 to i32*
  %r4 = load i32* %rt11, align 4
  %r5 = call i32 @__ocelot_prmt(i32 %r2, i32 %r3, i32 %r4)
  %rt12 = inttoptr i64 %r1 to i32*
  store i32 %r5, i32* %rt12, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r6 = bitcast i32 0 to i32
  %rt13 = zext i32 %r6 to i64
  %rt14 = getelementptr %LLVMContext.206* %__ctaContext, i32 0, i32 4
  %rt15 = load i8** %rt14
  %rt16 = ptrtoint i8* %rt15 to i64
  %rt17 = add i64 %rt13, %rt16
  %rt18 = inttoptr i64 %rt17 to i32*
  store i32 6, i32* %rt18, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.206* %__ctaContext to %LLVMContext.206**
  %context.t0 = load %LLVMContext.206** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.206* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.206* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = add i64 %r0, 8
  %rt11 = inttoptr i64 %rt10 to i32*
  %r4 = load i32* %rt11, align 4
  %r5 = tail call i32 @__ocelot_prmt(i32 %r2, i32 %r3, i32 %r4) nounwind
  %rt12 = inttoptr i64 %r1 to i32*
  store i32 %r5, i32* %rt12, align 4
  %rt18 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt18, align 4
  ret void

}
(2.504121) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(2.505347) LLVMDynamicTranslationCache.cpp:137:  inserting translation 6815744 with 48 bytes of local memory
(2.522813) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestPrmt-f4e-b32
(2.522824) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(2.524157) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(2.524168) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = add i64 %r0, 4;
	%rt9 = inttoptr i64 %rt8 to i32*;
	%r3 = load i32* %rt9, align 4;
	%rt10 = add i64 %r0, 8;
	%rt11 = inttoptr i64 %rt10 to i32*;
	%r4 = load i32* %rt11, align 4;
	%r5 = call i32 @__ocelot_prmt_f4e(i32 %r2, i32 %r3, i32 %r4);
	%rt12 = inttoptr i64 %r1 to i32*;
	store i32 %r5, i32* %rt12, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r6 = bitcast i32 0 to i32;
	%rt13 = zext i32 %r6 to i64;
	%rt14 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt15 = load i8** %rt14;
	%rt16 = ptrtoint i8* %rt15 to i64;
	%rt17 = add i64 %rt13, %rt16;
	%rt18 = inttoptr i64 %rt17 to i32*;
	store i32 6, i32* %rt18, align 4;
	br label %exit;
exit:
	ret void;

}

(2.525073) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(2.525084) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(2.525093) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(2.525279) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.208* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.208* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.208* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = add i64 %r0, 8
  %rt11 = inttoptr i64 %rt10 to i32*
  %r4 = load i32* %rt11, align 4
  %r5 = call i32 @__ocelot_prmt_f4e(i32 %r2, i32 %r3, i32 %r4)
  %rt12 = inttoptr i64 %r1 to i32*
  store i32 %r5, i32* %rt12, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r6 = bitcast i32 0 to i32
  %rt13 = zext i32 %r6 to i64
  %rt14 = getelementptr %LLVMContext.208* %__ctaContext, i32 0, i32 4
  %rt15 = load i8** %rt14
  %rt16 = ptrtoint i8* %rt15 to i64
  %rt17 = add i64 %rt13, %rt16
  %rt18 = inttoptr i64 %rt17 to i32*
  store i32 6, i32* %rt18, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.208* %__ctaContext to %LLVMContext.208**
  %context.t0 = load %LLVMContext.208** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.208* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.208* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = add i64 %r0, 8
  %rt11 = inttoptr i64 %rt10 to i32*
  %r4 = load i32* %rt11, align 4
  %r5 = tail call i32 @__ocelot_prmt_f4e(i32 %r2, i32 %r3, i32 %r4) nounwind
  %rt12 = inttoptr i64 %r1 to i32*
  store i32 %r5, i32* %rt12, align 4
  %rt18 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt18, align 4
  ret void

}
(2.528409) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(2.529649) LLVMDynamicTranslationCache.cpp:137:  inserting translation 6881280 with 48 bytes of local memory
(2.547041) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestPrmt-b4e-b32
(2.547052) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(2.548386) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(2.548396) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = add i64 %r0, 4;
	%rt9 = inttoptr i64 %rt8 to i32*;
	%r3 = load i32* %rt9, align 4;
	%rt10 = add i64 %r0, 8;
	%rt11 = inttoptr i64 %rt10 to i32*;
	%r4 = load i32* %rt11, align 4;
	%r5 = call i32 @__ocelot_prmt_b4e(i32 %r2, i32 %r3, i32 %r4);
	%rt12 = inttoptr i64 %r1 to i32*;
	store i32 %r5, i32* %rt12, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r6 = bitcast i32 0 to i32;
	%rt13 = zext i32 %r6 to i64;
	%rt14 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt15 = load i8** %rt14;
	%rt16 = ptrtoint i8* %rt15 to i64;
	%rt17 = add i64 %rt13, %rt16;
	%rt18 = inttoptr i64 %rt17 to i32*;
	store i32 6, i32* %rt18, align 4;
	br label %exit;
exit:
	ret void;

}

(2.549303) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(2.549314) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(2.549322) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(2.549509) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.210* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.210* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.210* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = add i64 %r0, 8
  %rt11 = inttoptr i64 %rt10 to i32*
  %r4 = load i32* %rt11, align 4
  %r5 = call i32 @__ocelot_prmt_b4e(i32 %r2, i32 %r3, i32 %r4)
  %rt12 = inttoptr i64 %r1 to i32*
  store i32 %r5, i32* %rt12, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r6 = bitcast i32 0 to i32
  %rt13 = zext i32 %r6 to i64
  %rt14 = getelementptr %LLVMContext.210* %__ctaContext, i32 0, i32 4
  %rt15 = load i8** %rt14
  %rt16 = ptrtoint i8* %rt15 to i64
  %rt17 = add i64 %rt13, %rt16
  %rt18 = inttoptr i64 %rt17 to i32*
  store i32 6, i32* %rt18, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.210* %__ctaContext to %LLVMContext.210**
  %context.t0 = load %LLVMContext.210** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.210* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.210* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = add i64 %r0, 8
  %rt11 = inttoptr i64 %rt10 to i32*
  %r4 = load i32* %rt11, align 4
  %r5 = tail call i32 @__ocelot_prmt_b4e(i32 %r2, i32 %r3, i32 %r4) nounwind
  %rt12 = inttoptr i64 %r1 to i32*
  store i32 %r5, i32* %rt12, align 4
  %rt18 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt18, align 4
  ret void

}
(2.552637) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(2.553867) LLVMDynamicTranslationCache.cpp:137:  inserting translation 6946816 with 48 bytes of local memory
(2.571297) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestPrmt-rc8-b32
(2.571308) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(2.572633) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(2.572643) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = add i64 %r0, 4;
	%rt9 = inttoptr i64 %rt8 to i32*;
	%r3 = load i32* %rt9, align 4;
	%rt10 = add i64 %r0, 8;
	%rt11 = inttoptr i64 %rt10 to i32*;
	%r4 = load i32* %rt11, align 4;
	%r5 = call i32 @__ocelot_prmt_rc8(i32 %r2, i32 %r3, i32 %r4);
	%rt12 = inttoptr i64 %r1 to i32*;
	store i32 %r5, i32* %rt12, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r6 = bitcast i32 0 to i32;
	%rt13 = zext i32 %r6 to i64;
	%rt14 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt15 = load i8** %rt14;
	%rt16 = ptrtoint i8* %rt15 to i64;
	%rt17 = add i64 %rt13, %rt16;
	%rt18 = inttoptr i64 %rt17 to i32*;
	store i32 6, i32* %rt18, align 4;
	br label %exit;
exit:
	ret void;

}

(2.573556) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(2.573567) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(2.573575) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(2.573763) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.212* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.212* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.212* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = add i64 %r0, 8
  %rt11 = inttoptr i64 %rt10 to i32*
  %r4 = load i32* %rt11, align 4
  %r5 = call i32 @__ocelot_prmt_rc8(i32 %r2, i32 %r3, i32 %r4)
  %rt12 = inttoptr i64 %r1 to i32*
  store i32 %r5, i32* %rt12, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r6 = bitcast i32 0 to i32
  %rt13 = zext i32 %r6 to i64
  %rt14 = getelementptr %LLVMContext.212* %__ctaContext, i32 0, i32 4
  %rt15 = load i8** %rt14
  %rt16 = ptrtoint i8* %rt15 to i64
  %rt17 = add i64 %rt13, %rt16
  %rt18 = inttoptr i64 %rt17 to i32*
  store i32 6, i32* %rt18, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.212* %__ctaContext to %LLVMContext.212**
  %context.t0 = load %LLVMContext.212** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.212* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.212* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = add i64 %r0, 8
  %rt11 = inttoptr i64 %rt10 to i32*
  %r4 = load i32* %rt11, align 4
  %r5 = tail call i32 @__ocelot_prmt_rc8(i32 %r2, i32 %r3, i32 %r4) nounwind
  %rt12 = inttoptr i64 %r1 to i32*
  store i32 %r5, i32* %rt12, align 4
  %rt18 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt18, align 4
  ret void

}
(2.576881) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(2.578153) LLVMDynamicTranslationCache.cpp:137:  inserting translation 7012352 with 48 bytes of local memory
(2.595536) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestPrmt-ecl-b32
(2.595547) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(2.596903) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(2.596914) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = add i64 %r0, 4;
	%rt9 = inttoptr i64 %rt8 to i32*;
	%r3 = load i32* %rt9, align 4;
	%rt10 = add i64 %r0, 8;
	%rt11 = inttoptr i64 %rt10 to i32*;
	%r4 = load i32* %rt11, align 4;
	%r5 = call i32 @__ocelot_prmt_ecl(i32 %r2, i32 %r3, i32 %r4);
	%rt12 = inttoptr i64 %r1 to i32*;
	store i32 %r5, i32* %rt12, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r6 = bitcast i32 0 to i32;
	%rt13 = zext i32 %r6 to i64;
	%rt14 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt15 = load i8** %rt14;
	%rt16 = ptrtoint i8* %rt15 to i64;
	%rt17 = add i64 %rt13, %rt16;
	%rt18 = inttoptr i64 %rt17 to i32*;
	store i32 6, i32* %rt18, align 4;
	br label %exit;
exit:
	ret void;

}

(2.597812) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(2.597823) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(2.597831) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(2.598019) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.214* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.214* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.214* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = add i64 %r0, 8
  %rt11 = inttoptr i64 %rt10 to i32*
  %r4 = load i32* %rt11, align 4
  %r5 = call i32 @__ocelot_prmt_ecl(i32 %r2, i32 %r3, i32 %r4)
  %rt12 = inttoptr i64 %r1 to i32*
  store i32 %r5, i32* %rt12, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r6 = bitcast i32 0 to i32
  %rt13 = zext i32 %r6 to i64
  %rt14 = getelementptr %LLVMContext.214* %__ctaContext, i32 0, i32 4
  %rt15 = load i8** %rt14
  %rt16 = ptrtoint i8* %rt15 to i64
  %rt17 = add i64 %rt13, %rt16
  %rt18 = inttoptr i64 %rt17 to i32*
  store i32 6, i32* %rt18, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.214* %__ctaContext to %LLVMContext.214**
  %context.t0 = load %LLVMContext.214** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.214* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.214* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = add i64 %r0, 8
  %rt11 = inttoptr i64 %rt10 to i32*
  %r4 = load i32* %rt11, align 4
  %r5 = tail call i32 @__ocelot_prmt_ecl(i32 %r2, i32 %r3, i32 %r4) nounwind
  %rt12 = inttoptr i64 %r1 to i32*
  store i32 %r5, i32* %rt12, align 4
  %rt18 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt18, align 4
  ret void

}
(2.601101) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(2.602318) LLVMDynamicTranslationCache.cpp:137:  inserting translation 7077888 with 48 bytes of local memory
(2.619812) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestPrmt-ecr-b32
(2.619823) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(2.621178) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(2.621188) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = add i64 %r0, 4;
	%rt9 = inttoptr i64 %rt8 to i32*;
	%r3 = load i32* %rt9, align 4;
	%rt10 = add i64 %r0, 8;
	%rt11 = inttoptr i64 %rt10 to i32*;
	%r4 = load i32* %rt11, align 4;
	%r5 = call i32 @__ocelot_prmt_ecr(i32 %r2, i32 %r3, i32 %r4);
	%rt12 = inttoptr i64 %r1 to i32*;
	store i32 %r5, i32* %rt12, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r6 = bitcast i32 0 to i32;
	%rt13 = zext i32 %r6 to i64;
	%rt14 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt15 = load i8** %rt14;
	%rt16 = ptrtoint i8* %rt15 to i64;
	%rt17 = add i64 %rt13, %rt16;
	%rt18 = inttoptr i64 %rt17 to i32*;
	store i32 6, i32* %rt18, align 4;
	br label %exit;
exit:
	ret void;

}

(2.622090) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(2.622101) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(2.622109) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(2.622297) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.216* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.216* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.216* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = add i64 %r0, 8
  %rt11 = inttoptr i64 %rt10 to i32*
  %r4 = load i32* %rt11, align 4
  %r5 = call i32 @__ocelot_prmt_ecr(i32 %r2, i32 %r3, i32 %r4)
  %rt12 = inttoptr i64 %r1 to i32*
  store i32 %r5, i32* %rt12, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r6 = bitcast i32 0 to i32
  %rt13 = zext i32 %r6 to i64
  %rt14 = getelementptr %LLVMContext.216* %__ctaContext, i32 0, i32 4
  %rt15 = load i8** %rt14
  %rt16 = ptrtoint i8* %rt15 to i64
  %rt17 = add i64 %rt13, %rt16
  %rt18 = inttoptr i64 %rt17 to i32*
  store i32 6, i32* %rt18, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.216* %__ctaContext to %LLVMContext.216**
  %context.t0 = load %LLVMContext.216** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.216* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.216* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = add i64 %r0, 8
  %rt11 = inttoptr i64 %rt10 to i32*
  %r4 = load i32* %rt11, align 4
  %r5 = tail call i32 @__ocelot_prmt_ecr(i32 %r2, i32 %r3, i32 %r4) nounwind
  %rt12 = inttoptr i64 %r1 to i32*
  store i32 %r5, i32* %rt12, align 4
  %rt18 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt18, align 4
  ret void

}
(2.625405) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(2.626650) LLVMDynamicTranslationCache.cpp:137:  inserting translation 7143424 with 48 bytes of local memory
(2.644156) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestPrmt-rc16-b32
(2.644168) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(2.645519) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(2.645530) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_test( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt1 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt2 = load i8** %rt1;
	%rt0 = getelementptr i8* %rt2, i32 8;
	%rt3 = bitcast i8* %rt0 to i64*;
	%r0 = load i64* %rt3, align 8;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt5 = load i8** %rt4;
	%rt6 = bitcast i8* %rt5 to i64*;
	%r1 = load i64* %rt6, align 8;
	%rt7 = inttoptr i64 %r0 to i32*;
	%r2 = load i32* %rt7, align 4;
	%rt8 = add i64 %r0, 4;
	%rt9 = inttoptr i64 %rt8 to i32*;
	%r3 = load i32* %rt9, align 4;
	%rt10 = add i64 %r0, 8;
	%rt11 = inttoptr i64 %rt10 to i32*;
	%r4 = load i32* %rt11, align 4;
	%r5 = call i32 @__ocelot_prmt_rc16(i32 %r2, i32 %r3, i32 %r4);
	%rt12 = inttoptr i64 %r1 to i32*;
	store i32 %r5, i32* %rt12, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r6 = bitcast i32 0 to i32;
	%rt13 = zext i32 %r6 to i64;
	%rt14 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt15 = load i8** %rt14;
	%rt16 = ptrtoint i8* %rt15 to i64;
	%rt17 = add i64 %rt13, %rt16;
	%rt18 = inttoptr i64 %rt17 to i32*;
	store i32 6, i32* %rt18, align 4;
	br label %exit;
exit:
	ret void;

}

(2.646461) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(2.646472) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(2.646480) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(2.646666) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_test_opt3_ws1(%LLVMContext.218* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt1 = getelementptr %LLVMContext.218* %__ctaContext, i32 0, i32 8
  %rt2 = load i8** %rt1
  %rt0 = getelementptr i8* %rt2, i32 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt4 = getelementptr %LLVMContext.218* %__ctaContext, i32 0, i32 8
  %rt5 = load i8** %rt4
  %rt6 = bitcast i8* %rt5 to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = add i64 %r0, 8
  %rt11 = inttoptr i64 %rt10 to i32*
  %r4 = load i32* %rt11, align 4
  %r5 = call i32 @__ocelot_prmt_rc16(i32 %r2, i32 %r3, i32 %r4)
  %rt12 = inttoptr i64 %r1 to i32*
  store i32 %r5, i32* %rt12, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r6 = bitcast i32 0 to i32
  %rt13 = zext i32 %r6 to i64
  %rt14 = getelementptr %LLVMContext.218* %__ctaContext, i32 0, i32 4
  %rt15 = load i8** %rt14
  %rt16 = ptrtoint i8* %rt15 to i64
  %rt17 = add i64 %rt13, %rt16
  %rt18 = inttoptr i64 %rt17 to i32*
  store i32 6, i32* %rt18, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


_Z_ocelotTranslated_test_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.218* %__ctaContext to %LLVMContext.218**
  %context.t0 = load %LLVMContext.218** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.218* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.218* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt0 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt3 = bitcast i8* %rt0 to i64*
  %r0 = load i64* %rt3, align 8
  %rt6 = bitcast i8* %gridDimPtr.0. to i64*
  %r1 = load i64* %rt6, align 8
  %rt7 = inttoptr i64 %r0 to i32*
  %r2 = load i32* %rt7, align 4
  %rt8 = add i64 %r0, 4
  %rt9 = inttoptr i64 %rt8 to i32*
  %r3 = load i32* %rt9, align 4
  %rt10 = add i64 %r0, 8
  %rt11 = inttoptr i64 %rt10 to i32*
  %r4 = load i32* %rt11, align 4
  %r5 = tail call i32 @__ocelot_prmt_rc16(i32 %r2, i32 %r3, i32 %r4) nounwind
  %rt12 = inttoptr i64 %r1 to i32*
  store i32 %r5, i32* %rt12, align 4
  %rt18 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt18, align 4
  ret void

}
TestPTXAssembly: ocelot/executive/implementation/LLVMDynamicTranslationCache.cpp:1033: void executive::setupCallTargets(ir::PTXKernel&, const executive::LLVMDynamicTranslationCache&): Assertion `0 && "arbitrary function calls not yet supported"' failed.
(2.649837) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(2.651121) LLVMDynamicTranslationCache.cpp:137:  inserting translation 7208960 with 48 bytes of local memory
(2.668070) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - TestCall-Uni
(2.668082) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'test'
(2.668394) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'add'

INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestInstructions 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestInstructions
INFO     Test completed in 0.237608909607 seconds
INFO      It produced the following output:
Pass/Fail : Pass


Name : TestInstructions

Description: 


Test Seed : 1315863513
Test time : 0.0315044

Status : Test output:
Accessors test passed.
pass: load and store instructions
Abs test passed.
pass: arithmetic instructions
pass: exotic arithmetic instructions
pass: floating-point instructions
pass: logical instructions
pass: comparison instructions
pass: predicated Add and Ld isntructions
pass: control flow instructions



INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestCudaSequence 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestCudaTexture2D
INFO     Test completed in 1.93668198586 seconds
INFO      It produced the following output:
(0.024627) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - texture2D.cu
(0.024655) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel '_Z6kernelPfii'
(0.188618) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.188653) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated__Z6kernelPfii( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$OcelotTextureAllocateBlock:
	%integerTexture = alloca i32, i32 4, align 16;
	%floatingPointTexture = alloca float, i32 4, align 16;
	br label %$BB_1_0002;
$BB_1_0002:
	%rt0 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 2, i32 0;
	%rt1 = load i32* %rt0;
	%r0 = bitcast i32 %rt1 to i32;
	%rt2 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 1, i32 0;
	%rt3 = load i32* %rt2;
	%r1 = bitcast i32 %rt3 to i32;
	%r2 = mul i32 %r0, %r1;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 2, i32 1;
	%rt5 = load i32* %rt4;
	%r3 = bitcast i32 %rt5 to i32;
	%rt6 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 1, i32 1;
	%rt7 = load i32* %rt6;
	%r4 = bitcast i32 %rt7 to i32;
	%r5 = mul i32 %r3, %r4;
	%rt8 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 0, i32 0;
	%rt9 = load i32* %rt8;
	%r6 = bitcast i32 %rt9 to i32;
	%r7 = add i32 %r6, %r2;
	%rt10 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 0, i32 1;
	%rt11 = load i32* %rt10;
	%r8 = bitcast i32 %rt11 to i32;
	%r9 = add i32 %r8, %r5;
	%r10 = uitofp i32 %r7 to float;
	%r11 = uitofp i32 %r9 to float;
	%r12 = bitcast float 0x0 to float;
	%r13 = bitcast float 0x0 to float;
	call void @__ocelot_tex_2d_ff(float* %floatingPointTexture, %LLVMContext* %__ctaContext, i32 0, float %r10, float %r11);
	%r14 = load float* %floatingPointTexture;
	%rt12 = getelementptr float* %floatingPointTexture, i32 1;
	%r15 = load float* %rt12;
	%rt13 = getelementptr float* %floatingPointTexture, i32 2;
	%r16 = load float* %rt13;
	%rt14 = getelementptr float* %floatingPointTexture, i32 3;
	%r17 = load float* %rt14;
	%r18 = bitcast float %r14 to float;
	%rt15 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt16 = load i8** %rt15;
	%rt17 = bitcast i8* %rt16 to i64*;
	%r19 = load i64* %rt17, align 8;
	%rt19 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt20 = load i8** %rt19;
	%rt18 = getelementptr i8* %rt20, i32 8;
	%rt21 = bitcast i8* %rt18 to i32*;
	%r20 = load i32* %rt21, align 4;
	%r21 = mul i32 %r20, %r9;
	%r22 = add i32 %r7, %r21;
	%r23 = zext i32 %r22 to i64;
	%rt22 = zext i32 %r22 to i64;
	%r24 = mul i64 %rt22, 4;
	%r25 = add i64 %r19, %r24;
	%rt23 = inttoptr i64 %r25 to float*;
	store float %r18, float* %rt23, align 4;
	br i1 1, label %$BB_1_0002_exit, label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0002_exit:
	%r26 = bitcast i32 0 to i32;
	%rt24 = zext i32 %r26 to i64;
	%rt25 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt26 = load i8** %rt25;
	%rt27 = ptrtoint i8* %rt26 to i64;
	%rt28 = add i64 %rt24, %rt27;
	%rt29 = inttoptr i64 %rt28 to i32*;
	store i32 6, i32* %rt29, align 4;
	br label %exit;
exit:
	ret void;

}

(0.293619) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.293641) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.293652) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.293888) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated__Z6kernelPfii_opt3_ws1(%LLVMContext* %__ctaContext) nounwind align 1 {
"$OcelotTextureAllocateBlock":
  %integerTexture = alloca i32, i32 4, align 16
  %floatingPointTexture = alloca float, i32 4, align 16
  br label %"$BB_1_0002"

"$BB_1_0002":                                     ; preds = %"$BB_1_0002_entry", %"$OcelotTextureAllocateBlock"
  %rt0 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 2, i32 0
  %rt1 = load i32* %rt0
  %r0 = bitcast i32 %rt1 to i32
  %rt2 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 1, i32 0
  %rt3 = load i32* %rt2
  %r1 = bitcast i32 %rt3 to i32
  %r2 = mul i32 %r0, %r1
  %rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 2, i32 1
  %rt5 = load i32* %rt4
  %r3 = bitcast i32 %rt5 to i32
  %rt6 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 1, i32 1
  %rt7 = load i32* %rt6
  %r4 = bitcast i32 %rt7 to i32
  %r5 = mul i32 %r3, %r4
  %rt8 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 0, i32 0
  %rt9 = load i32* %rt8
  %r6 = bitcast i32 %rt9 to i32
  %r7 = add i32 %r6, %r2
  %rt10 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 0, i32 1
  %rt11 = load i32* %rt10
  %r8 = bitcast i32 %rt11 to i32
  %r9 = add i32 %r8, %r5
  %r10 = uitofp i32 %r7 to float
  %r11 = uitofp i32 %r9 to float
  %r12 = bitcast float 0.000000e+00 to float
  %r13 = bitcast float 0.000000e+00 to float
  call void @__ocelot_tex_2d_ff(float* %floatingPointTexture, %LLVMContext* %__ctaContext, i32 0, float %r10, float %r11)
  %r14 = load float* %floatingPointTexture
  %rt12 = getelementptr float* %floatingPointTexture, i32 1
  %r15 = load float* %rt12
  %rt13 = getelementptr float* %floatingPointTexture, i32 2
  %r16 = load float* %rt13
  %rt14 = getelementptr float* %floatingPointTexture, i32 3
  %r17 = load float* %rt14
  %r18 = bitcast float %r14 to float
  %rt15 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8
  %rt16 = load i8** %rt15
  %rt17 = bitcast i8* %rt16 to i64*
  %r19 = load i64* %rt17, align 8
  %rt19 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8
  %rt20 = load i8** %rt19
  %rt18 = getelementptr i8* %rt20, i32 8
  %rt21 = bitcast i8* %rt18 to i32*
  %r20 = load i32* %rt21, align 4
  %r21 = mul i32 %r20, %r9
  %r22 = add i32 %r7, %r21
  %r23 = zext i32 %r22 to i64
  %rt22 = zext i32 %r22 to i64
  %r24 = mul i64 %rt22, 4
  %r25 = add i64 %r19, %r24
  %rt23 = inttoptr i64 %r25 to float*
  store float %r18, float* %rt23, align 4
  br i1 true, label %"$BB_1_0002_exit", label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0002_exit":                                ; preds = %"$BB_1_0002"
  %r26 = bitcast i32 0 to i32
  %rt24 = zext i32 %r26 to i64
  %rt25 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4
  %rt26 = load i8** %rt25
  %rt27 = ptrtoint i8* %rt26 to i64
  %rt28 = add i64 %rt24, %rt27
  %rt29 = inttoptr i64 %rt28 to i32*
  store i32 6, i32* %rt29, align 4
  br label %exit

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0002"
  ret void
}


(0.312750) LLVMState.cpp:52:   Bringing the LLVM JIT-Compiler online.
(0.312765) LLVMState.cpp:59:     initialized native target
(0.766145) LLVMState.cpp:68:     created engine builder
(0.766187) LLVMState.cpp:73:    The JIT is alive.
_Z_ocelotTranslated__Z6kernelPfii_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %floatingPointTexture1 = alloca [4 x float], align 16
  %floatingPointTexture1.sub = getelementptr inbounds [4 x float]* %floatingPointTexture1, i64 0, i64 0
  %contexts = bitcast %LLVMContext* %__ctaContext to %LLVMContext**
  %context.t0 = load %LLVMContext** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.threadId.x = getelementptr %LLVMContext* %context.t0, i64 0, i32 0, i32 0
  %threadId_x.0. = load i32* %ptr.threadId.x, align 4
  %ptr.threadId.y = getelementptr %LLVMContext* %context.t0, i64 0, i32 0, i32 1
  %threadId_y.0. = load i32* %ptr.threadId.y, align 4
  %ptr.blockDim.x = getelementptr %LLVMContext* %context.t0, i64 0, i32 1, i32 0
  %blockDim_x.0. = load i32* %ptr.blockDim.x, align 4
  %ptr.blockDim.y = getelementptr %LLVMContext* %context.t0, i64 0, i32 1, i32 1
  %blockDim_y.0. = load i32* %ptr.blockDim.y, align 4
  %ptr.blockId.x = getelementptr %LLVMContext* %context.t0, i64 0, i32 2, i32 0
  %blockId_x.0. = load i32* %ptr.blockId.x, align 4
  %ptr.blockId.y = getelementptr %LLVMContext* %context.t0, i64 0, i32 2, i32 1
  %blockId_y.0. = load i32* %ptr.blockId.y, align 4
  %ptr.argMem. = getelementptr %LLVMContext* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %r2 = mul i32 %blockId_x.0., %blockDim_x.0.
  %r5 = mul i32 %blockId_y.0., %blockDim_y.0.
  %r7 = add i32 %r2, %threadId_x.0.
  %r9 = add i32 %r5, %threadId_y.0.
  %r10 = uitofp i32 %r7 to float
  %r11 = uitofp i32 %r9 to float
  call void @__ocelot_tex_2d_ff(float* %floatingPointTexture1.sub, %LLVMContext* %context.t0, i32 0, float %r10, float %r11) nounwind
  %r14 = load float* %floatingPointTexture1.sub, align 16
  %rt17 = bitcast i8* %gridDimPtr.0. to i64*
  %r19 = load i64* %rt17, align 8
  %rt18 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt21 = bitcast i8* %rt18 to i32*
  %r20 = load i32* %rt21, align 4
  %r21 = mul i32 %r20, %r9
  %r22 = add i32 %r21, %r7
  %rt22 = zext i32 %r22 to i64
  %r24 = shl nuw nsw i64 %rt22, 2
  %r25 = add i64 %r24, %r19
  %rt23 = inttoptr i64 %r25 to float*
  store float %r14, float* %rt23, align 4
  %rt29 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt29, align 4
  ret void

}
(0.978715) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(1.163963) LLVMDynamicTranslationCache.cpp:137:  inserting translation 0 with 208 bytes of local memory
Pass/Fail : Pass

INFO     Running test program /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestPTXToLLVMTranslator -i ../tests/ptx 
INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestPTXToLLVMTranslator
INFO     Test completed in 0.448633909225 seconds
INFO      It produced the following output:
Pass/Fail : Pass


Name : TestPTXToLLVMTranslator

Description: This is a basic test that just tries to get through a 
             translation successfully of as many PTX programs as possible Test 
             Points: 1) Scan for all PTX files in a directory, try to 
             translate them.


Test Seed : 1315863514
Test time : 2.45571e-05

Status : 


INFO     Test /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestCudaSequence
INFO     Test completed in 2.22908592224 seconds
INFO      It produced the following output:
Error: libcuda.so: cannot open shared object file: No such file or directory
A_host = 0x26f8cb0
A_gpu = 0x26f4a00
(0.074030) LLVMDynamicTranslationCache.cpp:157:  LLVMDynamicTranslationCache::loadModule() - sequence.cu
(0.074077) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'v4sequence'
(0.075525) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'testShareSimple'
(0.077444) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'testShr'
(0.078743) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'testShareConvergent'
(0.079432) LLVMDynamicTranslationCache.cpp:168:  Encountered kernel 'sequence'
(0.107464) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.107484) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_v4sequence( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_4_0002:
	%rt0 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 0, i32 0;
	%rt1 = load i32* %rt0;
	%r0 = bitcast i32 %rt1 to i32;
	%rt2 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 2, i32 0;
	%rt3 = load i32* %rt2;
	%r1 = bitcast i32 %rt3 to i32;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 1, i32 0;
	%rt5 = load i32* %rt4;
	%r2 = bitcast i32 %rt5 to i32;
	%r3 = mul i32 %r1, %r2;
	%r4 = add i32 %r0, %r3;
	%rt6 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt7 = load i8** %rt6;
	%rt8 = bitcast i8* %rt7 to i64*;
	%r5 = load i64* %rt8, align 8;
	%r6 = sext i32 %r4 to i64;
	%rt9 = sext i32 %r4 to i64;
	%r7 = mul i64 %rt9, 16;
	%r8 = add i64 %r5, %r7;
	%r9 = add i32 %r4, 1;
	%r10 = mul i32 %r4, 2;
	%r11 = add i32 %r10, 2;
	%r12 = mul i32 %r4, 3;
	%r13 = add i32 %r12, 3;
	%r14 = mul i32 %r4, 4;
	%r15 = add i32 %r14, 4;
	%rt10 = inttoptr i64 %r8 to < 4 x i32 >*;
	%rt12 = bitcast i32 %r9 to i32;
	%rt11 = insertelement < 4 x i32 > < i32 0, i32 0, i32 0, i32 0 >, i32 %rt12, i32 0;
	%rt14 = bitcast i32 %r11 to i32;
	%rt13 = insertelement < 4 x i32 > %rt11, i32 %rt14, i32 1;
	%rt16 = bitcast i32 %r13 to i32;
	%rt15 = insertelement < 4 x i32 > %rt13, i32 %rt16, i32 2;
	%rt18 = bitcast i32 %r15 to i32;
	%rt17 = insertelement < 4 x i32 > %rt15, i32 %rt18, i32 3;
	store < 4 x i32 > %rt17, < 4 x i32 >* %rt10, align 16;
	br i1 1, label %$BB_4_0002_exit, label %exit;
$BB_4_0002_entry:
	br label %$BB_4_0002;
$BB_4_0002_exit:
	%r16 = bitcast i32 0 to i32;
	%rt19 = zext i32 %r16 to i64;
	%rt20 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt21 = load i8** %rt20;
	%rt22 = ptrtoint i8* %rt21 to i64;
	%rt23 = add i64 %rt19, %rt22;
	%rt24 = inttoptr i64 %rt23 to i32*;
	store i32 6, i32* %rt24, align 4;
	br label %exit;
exit:
	ret void;

}

(0.223518) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.223531) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.223540) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.223732) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_v4sequence_opt3_ws1(%LLVMContext* %__ctaContext) nounwind align 1 {
"$BB_4_0002":
  %rt0 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 0, i32 0
  %rt1 = load i32* %rt0
  %r0 = bitcast i32 %rt1 to i32
  %rt2 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 2, i32 0
  %rt3 = load i32* %rt2
  %r1 = bitcast i32 %rt3 to i32
  %rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 1, i32 0
  %rt5 = load i32* %rt4
  %r2 = bitcast i32 %rt5 to i32
  %r3 = mul i32 %r1, %r2
  %r4 = add i32 %r0, %r3
  %rt6 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8
  %rt7 = load i8** %rt6
  %rt8 = bitcast i8* %rt7 to i64*
  %r5 = load i64* %rt8, align 8
  %r6 = sext i32 %r4 to i64
  %rt9 = sext i32 %r4 to i64
  %r7 = mul i64 %rt9, 16
  %r8 = add i64 %r5, %r7
  %r9 = add i32 %r4, 1
  %r10 = mul i32 %r4, 2
  %r11 = add i32 %r10, 2
  %r12 = mul i32 %r4, 3
  %r13 = add i32 %r12, 3
  %r14 = mul i32 %r4, 4
  %r15 = add i32 %r14, 4
  %rt10 = inttoptr i64 %r8 to <4 x i32>*
  %rt12 = bitcast i32 %r9 to i32
  %rt11 = insertelement <4 x i32> zeroinitializer, i32 %rt12, i32 0
  %rt14 = bitcast i32 %r11 to i32
  %rt13 = insertelement <4 x i32> %rt11, i32 %rt14, i32 1
  %rt16 = bitcast i32 %r13 to i32
  %rt15 = insertelement <4 x i32> %rt13, i32 %rt16, i32 2
  %rt18 = bitcast i32 %r15 to i32
  %rt17 = insertelement <4 x i32> %rt15, i32 %rt18, i32 3
  store <4 x i32> %rt17, <4 x i32>* %rt10, align 16
  br i1 true, label %"$BB_4_0002_exit", label %exit

"$BB_4_0002_entry":                               ; No predecessors!
  br label %"$BB_4_0002"

"$BB_4_0002_exit":                                ; preds = %"$BB_4_0002"
  %r16 = bitcast i32 0 to i32
  %rt19 = zext i32 %r16 to i64
  %rt20 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4
  %rt21 = load i8** %rt20
  %rt22 = ptrtoint i8* %rt21 to i64
  %rt23 = add i64 %rt19, %rt22
  %rt24 = inttoptr i64 %rt23 to i32*
  store i32 6, i32* %rt24, align 4
  br label %exit

exit:                                             ; preds = %"$BB_4_0002_exit", %"$BB_4_0002"
  ret void
}


(0.226350) LLVMState.cpp:52:   Bringing the LLVM JIT-Compiler online.
(0.226367) LLVMState.cpp:59:     initialized native target
(0.379012) LLVMState.cpp:68:     created engine builder
(0.379030) LLVMState.cpp:73:    The JIT is alive.
_Z_ocelotTranslated_v4sequence_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext* %__ctaContext to %LLVMContext**
  %context.t0 = load %LLVMContext** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.threadId.x = getelementptr %LLVMContext* %context.t0, i64 0, i32 0, i32 0
  %threadId_x.0. = load i32* %ptr.threadId.x, align 4
  %ptr.blockDim.x = getelementptr %LLVMContext* %context.t0, i64 0, i32 1, i32 0
  %blockDim_x.0. = load i32* %ptr.blockDim.x, align 4
  %ptr.blockId.x = getelementptr %LLVMContext* %context.t0, i64 0, i32 2, i32 0
  %blockId_x.0. = load i32* %ptr.blockId.x, align 4
  %ptr.argMem. = getelementptr %LLVMContext* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %r3 = mul i32 %blockId_x.0., %blockDim_x.0.
  %r4 = add i32 %r3, %threadId_x.0.
  %rt8 = bitcast i8* %gridDimPtr.0. to i64*
  %r5 = load i64* %rt8, align 8
  %rt9 = sext i32 %r4 to i64
  %r7 = shl nsw i64 %rt9, 4
  %r8 = add i64 %r7, %r5
  %r9 = add i32 %r4, 1
  %r10 = shl i32 %r4, 1
  %r11 = add i32 %r10, 2
  %r12 = mul i32 %r4, 3
  %r13 = add i32 %r12, 3
  %r14 = shl i32 %r4, 2
  %r15 = add i32 %r14, 4
  %rt10 = inttoptr i64 %r8 to <4 x i32>*
  %rt11 = insertelement <4 x i32> undef, i32 %r9, i32 0
  %rt13 = insertelement <4 x i32> %rt11, i32 %r11, i32 1
  %rt15 = insertelement <4 x i32> %rt13, i32 %r13, i32 2
  %rt17 = insertelement <4 x i32> %rt15, i32 %r15, i32 3
  store <4 x i32> %rt17, <4 x i32>* %rt10, align 16
  %rt24 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt24, align 4
  ret void

}
(0.419747) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.505516) LLVMDynamicTranslationCache.cpp:137:  inserting translation 0 with 128 bytes of local memory
(0.507760) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.507772) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_testShareSimple( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_3_0002:
	%r0 = bitcast i64 0 to i64;
	%rt0 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 0, i32 0;
	%rt1 = load i32* %rt0;
	%r1 = bitcast i32 %rt1 to i32;
	%rt2 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt3 = load i8** %rt2;
	%rt4 = bitcast i8* %rt3 to i64*;
	%r2 = load i64* %rt4, align 8;
	%rt5 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 2, i32 0;
	%rt6 = load i32* %rt5;
	%r3 = bitcast i32 %rt6 to i32;
	%rt7 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 1, i32 0;
	%rt8 = load i32* %rt7;
	%r4 = bitcast i32 %rt8 to i32;
	%r5 = mul i32 %r3, %r4;
	%r6 = add i32 %r1, %r5;
	%r7 = sext i32 %r6 to i64;
	%rt9 = sext i32 %r6 to i64;
	%r8 = mul i64 %rt9, 4;
	%r9 = add i64 %r2, %r8;
	%rt10 = inttoptr i64 %r9 to i32*;
	%r10 = load i32* %rt10, align 4;
	%r11 = zext i32 %r1 to i64;
	%rt11 = zext i32 %r1 to i64;
	%r12 = mul i64 %rt11, 4;
	%r13 = add i64 %r0, %r12;
	%rt12 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 5;
	%rt13 = load i8** %rt12;
	%rt14 = ptrtoint i8* %rt13 to i64;
	%rt15 = add i64 %r13, %rt14;
	%rt16 = inttoptr i64 %rt15 to i32*;
	store i32 %r10, i32* %rt16, align 4;
	br i1 1, label %$BB_3_0002_exit, label %$BB_3_0002_bar;
$BB_3_0002_bar:
	%r14 = phi i64 [ %r0, %$BB_3_0002 ], [ %r25, %$BB_3_0002_bar_entry ];
	%r15 = phi i32 [ %r1, %$BB_3_0002 ], [ %r24, %$BB_3_0002_bar_entry ];
	%r16 = phi i64 [ %r9, %$BB_3_0002 ], [ %r23, %$BB_3_0002_bar_entry ];
	%r17 = sub i32 0, %r15;
	%r18 = sext i32 %r17 to i64;
	%rt17 = sext i32 %r17 to i64;
	%r19 = mul i64 %rt17, 4;
	%r20 = add i64 %r14, %r19;
	%rt18 = add i64 %r20, 124;
	%rt19 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 5;
	%rt20 = load i8** %rt19;
	%rt21 = ptrtoint i8* %rt20 to i64;
	%rt22 = add i64 %rt18, %rt21;
	%rt23 = inttoptr i64 %rt22 to i32*;
	%r21 = load i32* %rt23, align 4;
	%rt24 = inttoptr i64 %r16 to i32*;
	store i32 %r21, i32* %rt24, align 4;
	br i1 1, label %$BB_3_0002_bar_exit, label %exit;
$BB_3_0002_entry:
	br label %$BB_3_0002;
$BB_3_0002_bar_entry:
	%r22 = bitcast i32 8 to i32;
	%rt25 = zext i32 %r22 to i64;
	%rt26 = add i64 %rt25, 72;
	%rt27 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt28 = load i8** %rt27;
	%rt29 = ptrtoint i8* %rt28 to i64;
	%rt30 = add i64 %rt26, %rt29;
	%rt31 = inttoptr i64 %rt30 to i64*;
	%r23 = load i64* %rt31, align 8;
	%rt32 = zext i32 %r22 to i64;
	%rt33 = add i64 %rt32, 8;
	%rt34 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt35 = load i8** %rt34;
	%rt36 = ptrtoint i8* %rt35 to i64;
	%rt37 = add i64 %rt33, %rt36;
	%rt38 = inttoptr i64 %rt37 to i32*;
	%r24 = load i32* %rt38, align 4;
	%rt39 = zext i32 %r22 to i64;
	%rt40 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt41 = load i8** %rt40;
	%rt42 = ptrtoint i8* %rt41 to i64;
	%rt43 = add i64 %rt39, %rt42;
	%rt44 = inttoptr i64 %rt43 to i64*;
	%r25 = load i64* %rt44, align 8;
	br label %$BB_3_0002_bar;
$BB_3_0002_exit:
	%r26 = phi i64 [ %r0, %$BB_3_0002 ];
	%r27 = phi i32 [ %r1, %$BB_3_0002 ];
	%r28 = phi i64 [ %r9, %$BB_3_0002 ];
	%r29 = bitcast i32 8 to i32;
	%rt45 = zext i32 %r29 to i64;
	%rt46 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt47 = load i8** %rt46;
	%rt48 = ptrtoint i8* %rt47 to i64;
	%rt49 = add i64 %rt45, %rt48;
	%rt50 = inttoptr i64 %rt49 to i64*;
	store i64 %r26, i64* %rt50, align 8;
	%rt51 = zext i32 %r29 to i64;
	%rt52 = add i64 %rt51, 8;
	%rt53 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt54 = load i8** %rt53;
	%rt55 = ptrtoint i8* %rt54 to i64;
	%rt56 = add i64 %rt52, %rt55;
	%rt57 = inttoptr i64 %rt56 to i32*;
	store i32 %r27, i32* %rt57, align 4;
	%rt58 = zext i32 %r29 to i64;
	%rt59 = add i64 %rt58, 72;
	%rt60 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt61 = load i8** %rt60;
	%rt62 = ptrtoint i8* %rt61 to i64;
	%rt63 = add i64 %rt59, %rt62;
	%rt64 = inttoptr i64 %rt63 to i64*;
	store i64 %r28, i64* %rt64, align 8;
	%r30 = bitcast i32 4 to i32;
	%rt65 = zext i32 %r30 to i64;
	%rt66 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt67 = load i8** %rt66;
	%rt68 = ptrtoint i8* %rt67 to i64;
	%rt69 = add i64 %rt65, %rt68;
	%rt70 = inttoptr i64 %rt69 to i32*;
	store i32 65537, i32* %rt70, align 4;
	%r31 = bitcast i32 0 to i32;
	%rt71 = zext i32 %r31 to i64;
	%rt72 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt73 = load i8** %rt72;
	%rt74 = ptrtoint i8* %rt73 to i64;
	%rt75 = add i64 %rt71, %rt74;
	%rt76 = inttoptr i64 %rt75 to i32*;
	store i32 5, i32* %rt76, align 4;
	br label %exit;
$BB_3_0002_bar_exit:
	%r32 = bitcast i32 0 to i32;
	%rt77 = zext i32 %r32 to i64;
	%rt78 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt79 = load i8** %rt78;
	%rt80 = ptrtoint i8* %rt79 to i64;
	%rt81 = add i64 %rt77, %rt80;
	%rt82 = inttoptr i64 %rt81 to i32*;
	store i32 6, i32* %rt82, align 4;
	br label %exit;
exit:
	ret void;

}

(0.509083) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.509095) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.509103) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.509298) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_testShareSimple_opt3_ws1(%LLVMContext.0* %__ctaContext) nounwind align 1 {
"$BB_3_0002":
  %r0 = bitcast i64 0 to i64
  %rt0 = getelementptr %LLVMContext.0* %__ctaContext, i32 0, i32 0, i32 0
  %rt1 = load i32* %rt0
  %r1 = bitcast i32 %rt1 to i32
  %rt2 = getelementptr %LLVMContext.0* %__ctaContext, i32 0, i32 8
  %rt3 = load i8** %rt2
  %rt4 = bitcast i8* %rt3 to i64*
  %r2 = load i64* %rt4, align 8
  %rt5 = getelementptr %LLVMContext.0* %__ctaContext, i32 0, i32 2, i32 0
  %rt6 = load i32* %rt5
  %r3 = bitcast i32 %rt6 to i32
  %rt7 = getelementptr %LLVMContext.0* %__ctaContext, i32 0, i32 1, i32 0
  %rt8 = load i32* %rt7
  %r4 = bitcast i32 %rt8 to i32
  %r5 = mul i32 %r3, %r4
  %r6 = add i32 %r1, %r5
  %r7 = sext i32 %r6 to i64
  %rt9 = sext i32 %r6 to i64
  %r8 = mul i64 %rt9, 4
  %r9 = add i64 %r2, %r8
  %rt10 = inttoptr i64 %r9 to i32*
  %r10 = load i32* %rt10, align 4
  %r11 = zext i32 %r1 to i64
  %rt11 = zext i32 %r1 to i64
  %r12 = mul i64 %rt11, 4
  %r13 = add i64 %r0, %r12
  %rt12 = getelementptr %LLVMContext.0* %__ctaContext, i32 0, i32 5
  %rt13 = load i8** %rt12
  %rt14 = ptrtoint i8* %rt13 to i64
  %rt15 = add i64 %r13, %rt14
  %rt16 = inttoptr i64 %rt15 to i32*
  store i32 %r10, i32* %rt16, align 4
  br i1 true, label %"$BB_3_0002_exit", label %"$BB_3_0002_bar"

"$BB_3_0002_bar":                                 ; preds = %"$BB_3_0002_bar_entry", %"$BB_3_0002"
  %r14 = phi i64 [ %r0, %"$BB_3_0002" ], [ %r25, %"$BB_3_0002_bar_entry" ]
  %r15 = phi i32 [ %r1, %"$BB_3_0002" ], [ %r24, %"$BB_3_0002_bar_entry" ]
  %r16 = phi i64 [ %r9, %"$BB_3_0002" ], [ %r23, %"$BB_3_0002_bar_entry" ]
  %r17 = sub i32 0, %r15
  %r18 = sext i32 %r17 to i64
  %rt17 = sext i32 %r17 to i64
  %r19 = mul i64 %rt17, 4
  %r20 = add i64 %r14, %r19
  %rt18 = add i64 %r20, 124
  %rt19 = getelementptr %LLVMContext.0* %__ctaContext, i32 0, i32 5
  %rt20 = load i8** %rt19
  %rt21 = ptrtoint i8* %rt20 to i64
  %rt22 = add i64 %rt18, %rt21
  %rt23 = inttoptr i64 %rt22 to i32*
  %r21 = load i32* %rt23, align 4
  %rt24 = inttoptr i64 %r16 to i32*
  store i32 %r21, i32* %rt24, align 4
  br i1 true, label %"$BB_3_0002_bar_exit", label %exit

"$BB_3_0002_entry":                               ; No predecessors!
  br label %"$BB_3_0002"

"$BB_3_0002_bar_entry":                           ; No predecessors!
  %r22 = bitcast i32 8 to i32
  %rt25 = zext i32 %r22 to i64
  %rt26 = add i64 %rt25, 72
  %rt27 = getelementptr %LLVMContext.0* %__ctaContext, i32 0, i32 4
  %rt28 = load i8** %rt27
  %rt29 = ptrtoint i8* %rt28 to i64
  %rt30 = add i64 %rt26, %rt29
  %rt31 = inttoptr i64 %rt30 to i64*
  %r23 = load i64* %rt31, align 8
  %rt32 = zext i32 %r22 to i64
  %rt33 = add i64 %rt32, 8
  %rt34 = getelementptr %LLVMContext.0* %__ctaContext, i32 0, i32 4
  %rt35 = load i8** %rt34
  %rt36 = ptrtoint i8* %rt35 to i64
  %rt37 = add i64 %rt33, %rt36
  %rt38 = inttoptr i64 %rt37 to i32*
  %r24 = load i32* %rt38, align 4
  %rt39 = zext i32 %r22 to i64
  %rt40 = getelementptr %LLVMContext.0* %__ctaContext, i32 0, i32 4
  %rt41 = load i8** %rt40
  %rt42 = ptrtoint i8* %rt41 to i64
  %rt43 = add i64 %rt39, %rt42
  %rt44 = inttoptr i64 %rt43 to i64*
  %r25 = load i64* %rt44, align 8
  br label %"$BB_3_0002_bar"

"$BB_3_0002_exit":                                ; preds = %"$BB_3_0002"
  %r26 = phi i64 [ %r0, %"$BB_3_0002" ]
  %r27 = phi i32 [ %r1, %"$BB_3_0002" ]
  %r28 = phi i64 [ %r9, %"$BB_3_0002" ]
  %r29 = bitcast i32 8 to i32
  %rt45 = zext i32 %r29 to i64
  %rt46 = getelementptr %LLVMContext.0* %__ctaContext, i32 0, i32 4
  %rt47 = load i8** %rt46
  %rt48 = ptrtoint i8* %rt47 to i64
  %rt49 = add i64 %rt45, %rt48
  %rt50 = inttoptr i64 %rt49 to i64*
  store i64 %r26, i64* %rt50, align 8
  %rt51 = zext i32 %r29 to i64
  %rt52 = add i64 %rt51, 8
  %rt53 = getelementptr %LLVMContext.0* %__ctaContext, i32 0, i32 4
  %rt54 = load i8** %rt53
  %rt55 = ptrtoint i8* %rt54 to i64
  %rt56 = add i64 %rt52, %rt55
  %rt57 = inttoptr i64 %rt56 to i32*
  store i32 %r27, i32* %rt57, align 4
  %rt58 = zext i32 %r29 to i64
  %rt59 = add i64 %rt58, 72
  %rt60 = getelementptr %LLVMContext.0* %__ctaContext, i32 0, i32 4
  %rt61 = load i8** %rt60
  %rt62 = ptrtoint i8* %rt61 to i64
  %rt63 = add i64 %rt59, %rt62
  %rt64 = inttoptr i64 %rt63 to i64*
  store i64 %r28, i64* %rt64, align 8
  %r30 = bitcast i32 4 to i32
  %rt65 = zext i32 %r30 to i64
  %rt66 = getelementptr %LLVMContext.0* %__ctaContext, i32 0, i32 4
  %rt67 = load i8** %rt66
  %rt68 = ptrtoint i8* %rt67 to i64
  %rt69 = add i64 %rt65, %rt68
  %rt70 = inttoptr i64 %rt69 to i32*
  store i32 65537, i32* %rt70, align 4
  %r31 = bitcast i32 0 to i32
  %rt71 = zext i32 %r31 to i64
  %rt72 = getelementptr %LLVMContext.0* %__ctaContext, i32 0, i32 4
  %rt73 = load i8** %rt72
  %rt74 = ptrtoint i8* %rt73 to i64
  %rt75 = add i64 %rt71, %rt74
  %rt76 = inttoptr i64 %rt75 to i32*
  store i32 5, i32* %rt76, align 4
  br label %exit

"$BB_3_0002_bar_exit":                            ; preds = %"$BB_3_0002_bar"
  %r32 = bitcast i32 0 to i32
  %rt77 = zext i32 %r32 to i64
  %rt78 = getelementptr %LLVMContext.0* %__ctaContext, i32 0, i32 4
  %rt79 = load i8** %rt78
  %rt80 = ptrtoint i8* %rt79 to i64
  %rt81 = add i64 %rt77, %rt80
  %rt82 = inttoptr i64 %rt81 to i32*
  store i32 6, i32* %rt82, align 4
  br label %exit

exit:                                             ; preds = %"$BB_3_0002_bar_exit", %"$BB_3_0002_exit", %"$BB_3_0002_bar"
  ret void
}


_Z_ocelotTranslated_testShareSimple_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.0* %__ctaContext to %LLVMContext.0**
  %context.t0 = load %LLVMContext.0** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.0* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.threadId.x = getelementptr %LLVMContext.0* %context.t0, i64 0, i32 0, i32 0
  %threadId_x.0. = load i32* %ptr.threadId.x, align 4
  %ptr.sharedMem. = getelementptr %LLVMContext.0* %context.t0, i64 0, i32 5
  %threadIdPtr.0. = load i8** %ptr.sharedMem., align 8
  %ptr = getelementptr i8* %localMemPtr.0, i64 4
  %ptrEntryPoint = bitcast i8* %ptr to i32*
  %warpEntryId = load i32* %ptrEntryPoint, align 4
  %warpEntryPoint = and i32 %warpEntryId, 65535
  %cond = icmp eq i32 %warpEntryPoint, 1
  br i1 %cond, label %"$BB_3_0002_bar_exit", label %"$BB_3_0002_exit"

"$BB_3_0002_exit":       // predecessors: { WarpSynchronousEntry,   }
  %ptr.argMem. = getelementptr %LLVMContext.0* %context.t0, i64 0, i32 8
  %ptr.blockId.x = getelementptr %LLVMContext.0* %context.t0, i64 0, i32 2, i32 0
  %ptr.blockDim.x = getelementptr %LLVMContext.0* %context.t0, i64 0, i32 1, i32 0
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %blockId_x.0. = load i32* %ptr.blockId.x, align 4
  %blockDim_x.0. = load i32* %ptr.blockDim.x, align 4
  %rt4 = bitcast i8* %gridDimPtr.0. to i64*
  %r2 = load i64* %rt4, align 8
  %r5 = mul i32 %blockDim_x.0., %blockId_x.0.
  %r6 = add i32 %r5, %threadId_x.0.
  %rt9 = sext i32 %r6 to i64
  %r8 = shl nsw i64 %rt9, 2
  %r9 = add i64 %r8, %r2
  %rt10 = inttoptr i64 %r9 to i32*
  %r10 = load i32* %rt10, align 4
  %rt11 = zext i32 %threadId_x.0. to i64
  %r12 = shl nuw nsw i64 %rt11, 2
  %rt14 = ptrtoint i8* %threadIdPtr.0. to i64
  %rt15 = add i64 %r12, %rt14
  %rt16 = inttoptr i64 %rt15 to i32*
  store i32 %r10, i32* %rt16, align 4
  %rt48 = ptrtoint i8* %localMemPtr.0 to i64
  %rt49 = add i64 %rt48, 8
  %rt50 = inttoptr i64 %rt49 to i64*
  store i64 0, i64* %rt50, align 8
  %rt56 = add i64 %rt48, 16
  %rt57 = inttoptr i64 %rt56 to i32*
  store i32 %threadId_x.0., i32* %rt57, align 4
  %rt63 = add i64 %rt48, 80
  %rt64 = inttoptr i64 %rt63 to i64*
  store i64 %r9, i64* %rt64, align 8
  %rt69 = add i64 %rt48, 4
  %rt70 = inttoptr i64 %rt69 to i32*
  store i32 65537, i32* %rt70, align 4
  %rt76 = bitcast i8* %localMemPtr.0 to i32*
  store i32 5, i32* %rt76, align 4
  br label %exit

"$BB_3_0002_bar_exit":       // predecessors: { WarpSynchronousEntry,   }
  %rt29 = ptrtoint i8* %localMemPtr.0 to i64
  %rt30 = add i64 %rt29, 80
  %rt31 = inttoptr i64 %rt30 to i64*
  %r23 = load i64* %rt31, align 8
  %rt37 = add i64 %rt29, 16
  %rt38 = inttoptr i64 %rt37 to i32*
  %r24 = load i32* %rt38, align 4
  %rt43 = add i64 %rt29, 8
  %rt44 = inttoptr i64 %rt43 to i64*
  %r25 = load i64* %rt44, align 8
  %r17 = sub i32 0, %r24
  %rt17 = sext i32 %r17 to i64
  %r19 = shl nsw i64 %rt17, 2
  %rt21 = ptrtoint i8* %threadIdPtr.0. to i64
  %r20 = add i64 %rt21, 124
  %rt18 = add i64 %r20, %r25
  %rt22 = add i64 %rt18, %r19
  %rt23 = inttoptr i64 %rt22 to i32*
  %r21 = load i32* %rt23, align 4
  %rt24 = inttoptr i64 %r23 to i32*
  store i32 %r21, i32* %rt24, align 4
  %rt82 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt82, align 4
  br label %exit

"exit":       // predecessors: { $BB_3_0002_bar_exit,  $BB_3_0002_exit,   }
  ret void

}
(0.519233) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.530394) LLVMDynamicTranslationCache.cpp:137:  inserting translation 65536 with 152 bytes of local memory
(0.545489) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.545501) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_testShr( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$OcelotRegisterInitializerBlock:
	%ri60 = bitcast i32 0 to i32;
	%ri59 = bitcast i32 0 to i32;
	br label %$BB_5_0002;
$BB_5_0002:
	%r0 = bitcast i64 0 to i64;
	%rt0 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 2, i32 0;
	%rt1 = load i32* %rt0;
	%r1 = bitcast i32 %rt1 to i32;
	%rt2 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 1, i32 0;
	%rt3 = load i32* %rt2;
	%r2 = bitcast i32 %rt3 to i32;
	%r3 = mul i32 %r1, %r2;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 0, i32 0;
	%rt5 = load i32* %rt4;
	%r4 = bitcast i32 %rt5 to i32;
	%r5 = add i32 %r3, %r4;
	%r6 = mul i32 %r5, 2;
	%r7 = zext i32 %r4 to i64;
	%rt6 = zext i32 %r4 to i64;
	%r8 = mul i64 %rt6, 4;
	%r9 = add i64 %r0, %r8;
	%rt7 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 5;
	%rt8 = load i8** %rt7;
	%rt9 = ptrtoint i8* %rt8 to i64;
	%rt10 = add i64 %r9, %rt9;
	%rt11 = inttoptr i64 %rt10 to i32*;
	store i32 %r6, i32* %rt11, align 4;
	br i1 1, label %$BB_5_0002_exit, label %$BB_5_0002_bar;
$BB_5_0002_bar:
	%r11 = phi i32 [ %r4, %$BB_5_0002 ], [ %r35, %$BB_5_0002_bar_entry ];
	%r12 = phi i32 [ %r5, %$BB_5_0002 ], [ %r34, %$BB_5_0002_bar_entry ];
	%r10 = phi i64 [ %r0, %$BB_5_0002 ], [ %r36, %$BB_5_0002_bar_entry ];
	%r13 = xor i32 %r11, 1;
	%r14 = zext i32 %r13 to i64;
	%rt12 = zext i32 %r13 to i64;
	%r15 = mul i64 %rt12, 4;
	%r16 = add i64 %r10, %r15;
	%rt13 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 5;
	%rt14 = load i8** %rt13;
	%rt15 = ptrtoint i8* %rt14 to i64;
	%rt16 = add i64 %r16, %rt15;
	%rt17 = inttoptr i64 %rt16 to i32*;
	%r17 = load i32* %rt17, align 4;
	%r18 = and i32 %r12, 1;
	%r19 = bitcast i32 0 to i32;
	%r20 = icmp eq i32 %r18, %r19;
	br i1 %r20, label %$BB_5_0004, label %$BB_5_0003;
$BB_5_0003:
	%r22 = phi i32 [ %r12, %$BB_5_0002_bar ], [ %r38, %$BB_5_0003_entry ];
	%r21 = phi i32 [ %r17, %$BB_5_0002_bar ], [ %r39, %$BB_5_0003_entry ];
	%r23 = mul i32 %r21, 19;
	br label %$BB_5_0005;
$BB_5_0004:
	%r24 = phi i32 [ %r42, %$BB_5_0004_entry ], [ %r17, %$BB_5_0002_bar ];
	%r25 = phi i32 [ %r41, %$BB_5_0004_entry ], [ %r12, %$BB_5_0002_bar ];
	%r26 = mul i32 %r24, 13;
	br label %$BB_5_0005;
$BB_5_0005:
	%r27 = phi i32 [ %r45, %$BB_5_0005_entry ], [ %r22, %$BB_5_0003 ], [ %r25, %$BB_5_0004 ];
	%r28 = phi i32 [ %r44, %$BB_5_0005_entry ], [ %r23, %$BB_5_0003 ], [ %r26, %$BB_5_0004 ];
	%rt18 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt19 = load i8** %rt18;
	%rt20 = bitcast i8* %rt19 to i64*;
	%r29 = load i64* %rt20, align 8;
	%r30 = sext i32 %r27 to i64;
	%rt21 = sext i32 %r27 to i64;
	%r31 = mul i64 %rt21, 4;
	%r32 = add i64 %r29, %r31;
	%rt22 = inttoptr i64 %r32 to i32*;
	store i32 %r28, i32* %rt22, align 4;
	br i1 1, label %$BB_5_0005_exit, label %exit;
$BB_5_0002_entry:
	br label %$BB_5_0002;
$BB_5_0002_bar_entry:
	%r33 = bitcast i32 8 to i32;
	%rt23 = zext i32 %r33 to i64;
	%rt24 = add i64 %rt23, 40;
	%rt25 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt26 = load i8** %rt25;
	%rt27 = ptrtoint i8* %rt26 to i64;
	%rt28 = add i64 %rt24, %rt27;
	%rt29 = inttoptr i64 %rt28 to i32*;
	%r34 = load i32* %rt29, align 4;
	%rt30 = zext i32 %r33 to i64;
	%rt31 = add i64 %rt30, 32;
	%rt32 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt33 = load i8** %rt32;
	%rt34 = ptrtoint i8* %rt33 to i64;
	%rt35 = add i64 %rt31, %rt34;
	%rt36 = inttoptr i64 %rt35 to i32*;
	%r35 = load i32* %rt36, align 4;
	%rt37 = zext i32 %r33 to i64;
	%rt38 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt39 = load i8** %rt38;
	%rt40 = ptrtoint i8* %rt39 to i64;
	%rt41 = add i64 %rt37, %rt40;
	%rt42 = inttoptr i64 %rt41 to i64*;
	%r36 = load i64* %rt42, align 8;
	br label %$BB_5_0002_bar;
$BB_5_0003_entry:
	%r37 = bitcast i32 8 to i32;
	%rt43 = zext i32 %r37 to i64;
	%rt44 = add i64 %rt43, 40;
	%rt45 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt46 = load i8** %rt45;
	%rt47 = ptrtoint i8* %rt46 to i64;
	%rt48 = add i64 %rt44, %rt47;
	%rt49 = inttoptr i64 %rt48 to i32*;
	%r38 = load i32* %rt49, align 4;
	%rt50 = zext i32 %r37 to i64;
	%rt51 = add i64 %rt50, 112;
	%rt52 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt53 = load i8** %rt52;
	%rt54 = ptrtoint i8* %rt53 to i64;
	%rt55 = add i64 %rt51, %rt54;
	%rt56 = inttoptr i64 %rt55 to i32*;
	%r39 = load i32* %rt56, align 4;
	br label %$BB_5_0003;
$BB_5_0004_entry:
	%r40 = bitcast i32 8 to i32;
	%rt57 = zext i32 %r40 to i64;
	%rt58 = add i64 %rt57, 40;
	%rt59 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt60 = load i8** %rt59;
	%rt61 = ptrtoint i8* %rt60 to i64;
	%rt62 = add i64 %rt58, %rt61;
	%rt63 = inttoptr i64 %rt62 to i32*;
	%r41 = load i32* %rt63, align 4;
	%rt64 = zext i32 %r40 to i64;
	%rt65 = add i64 %rt64, 112;
	%rt66 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt67 = load i8** %rt66;
	%rt68 = ptrtoint i8* %rt67 to i64;
	%rt69 = add i64 %rt65, %rt68;
	%rt70 = inttoptr i64 %rt69 to i32*;
	%r42 = load i32* %rt70, align 4;
	br label %$BB_5_0004;
$BB_5_0005_entry:
	%r43 = bitcast i32 8 to i32;
	%rt71 = zext i32 %r43 to i64;
	%rt72 = add i64 %rt71, 144;
	%rt73 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt74 = load i8** %rt73;
	%rt75 = ptrtoint i8* %rt74 to i64;
	%rt76 = add i64 %rt72, %rt75;
	%rt77 = inttoptr i64 %rt76 to i32*;
	%r44 = load i32* %rt77, align 4;
	%rt78 = zext i32 %r43 to i64;
	%rt79 = add i64 %rt78, 40;
	%rt80 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt81 = load i8** %rt80;
	%rt82 = ptrtoint i8* %rt81 to i64;
	%rt83 = add i64 %rt79, %rt82;
	%rt84 = inttoptr i64 %rt83 to i32*;
	%r45 = load i32* %rt84, align 4;
	br label %$BB_5_0005;
$BB_5_0002_exit:
	%r46 = phi i64 [ %r0, %$BB_5_0002 ];
	%r47 = phi i32 [ %r4, %$BB_5_0002 ];
	%r48 = phi i32 [ %r5, %$BB_5_0002 ];
	%r49 = bitcast i32 8 to i32;
	%rt85 = zext i32 %r49 to i64;
	%rt86 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt87 = load i8** %rt86;
	%rt88 = ptrtoint i8* %rt87 to i64;
	%rt89 = add i64 %rt85, %rt88;
	%rt90 = inttoptr i64 %rt89 to i64*;
	store i64 %r46, i64* %rt90, align 8;
	%rt91 = zext i32 %r49 to i64;
	%rt92 = add i64 %rt91, 32;
	%rt93 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt94 = load i8** %rt93;
	%rt95 = ptrtoint i8* %rt94 to i64;
	%rt96 = add i64 %rt92, %rt95;
	%rt97 = inttoptr i64 %rt96 to i32*;
	store i32 %r47, i32* %rt97, align 4;
	%rt98 = zext i32 %r49 to i64;
	%rt99 = add i64 %rt98, 40;
	%rt100 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt101 = load i8** %rt100;
	%rt102 = ptrtoint i8* %rt101 to i64;
	%rt103 = add i64 %rt99, %rt102;
	%rt104 = inttoptr i64 %rt103 to i32*;
	store i32 %r48, i32* %rt104, align 4;
	%r50 = bitcast i32 4 to i32;
	%rt105 = zext i32 %r50 to i64;
	%rt106 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt107 = load i8** %rt106;
	%rt108 = ptrtoint i8* %rt107 to i64;
	%rt109 = add i64 %rt105, %rt108;
	%rt110 = inttoptr i64 %rt109 to i32*;
	store i32 131073, i32* %rt110, align 4;
	%r51 = bitcast i32 0 to i32;
	%rt111 = zext i32 %r51 to i64;
	%rt112 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt113 = load i8** %rt112;
	%rt114 = ptrtoint i8* %rt113 to i64;
	%rt115 = add i64 %rt111, %rt114;
	%rt116 = inttoptr i64 %rt115 to i32*;
	store i32 5, i32* %rt116, align 4;
	br label %exit;
$BB_5_0002_bar_exit:
	%r52 = phi i32 [ %r17, %$BB_5_0002_bar ];
	%r53 = phi i32 [ %r12, %$BB_5_0002_bar ];
	%r54 = phi i1 [ %r20, %$BB_5_0002_bar ];
	%r55 = bitcast i32 8 to i32;
	%rt117 = zext i32 %r55 to i64;
	%rt118 = add i64 %rt117, 112;
	%rt119 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt120 = load i8** %rt119;
	%rt121 = ptrtoint i8* %rt120 to i64;
	%rt122 = add i64 %rt118, %rt121;
	%rt123 = inttoptr i64 %rt122 to i32*;
	store i32 %r52, i32* %rt123, align 4;
	%rt124 = zext i32 %r55 to i64;
	%rt125 = add i64 %rt124, 40;
	%rt126 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt127 = load i8** %rt126;
	%rt128 = ptrtoint i8* %rt127 to i64;
	%rt129 = add i64 %rt125, %rt128;
	%rt130 = inttoptr i64 %rt129 to i32*;
	store i32 %r53, i32* %rt130, align 4;
	%r56 = select i1 %r54, i32 131075, i32 131074;
	%r57 = bitcast i32 4 to i32;
	%rt131 = zext i32 %r57 to i64;
	%rt132 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt133 = load i8** %rt132;
	%rt134 = ptrtoint i8* %rt133 to i64;
	%rt135 = add i64 %rt131, %rt134;
	%rt136 = inttoptr i64 %rt135 to i32*;
	store i32 %r56, i32* %rt136, align 4;
	%r58 = bitcast i32 0 to i32;
	%rt137 = zext i32 %r58 to i64;
	%rt138 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt139 = load i8** %rt138;
	%rt140 = ptrtoint i8* %rt139 to i64;
	%rt141 = add i64 %rt137, %rt140;
	%rt142 = inttoptr i64 %rt141 to i32*;
	store i32 2, i32* %rt142, align 4;
	br label %exit;
$BB_5_0004_exit:
	%r59 = phi i32 [ %ri59, %$OcelotRegisterInitializerBlock ];
	%r60 = phi i32 [ %ri60, %$OcelotRegisterInitializerBlock ];
	%r61 = bitcast i32 8 to i32;
	%rt143 = zext i32 %r61 to i64;
	%rt144 = add i64 %rt143, 40;
	%rt145 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt146 = load i8** %rt145;
	%rt147 = ptrtoint i8* %rt146 to i64;
	%rt148 = add i64 %rt144, %rt147;
	%rt149 = inttoptr i64 %rt148 to i32*;
	store i32 %r59, i32* %rt149, align 4;
	%rt150 = zext i32 %r61 to i64;
	%rt151 = add i64 %rt150, 144;
	%rt152 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt153 = load i8** %rt152;
	%rt154 = ptrtoint i8* %rt153 to i64;
	%rt155 = add i64 %rt151, %rt154;
	%rt156 = inttoptr i64 %rt155 to i32*;
	store i32 %r60, i32* %rt156, align 4;
	ret void;
$BB_5_0005_exit:
	%r62 = bitcast i32 0 to i32;
	%rt157 = zext i32 %r62 to i64;
	%rt158 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt159 = load i8** %rt158;
	%rt160 = ptrtoint i8* %rt159 to i64;
	%rt161 = add i64 %rt157, %rt160;
	%rt162 = inttoptr i64 %rt161 to i32*;
	store i32 6, i32* %rt162, align 4;
	br label %exit;
exit:
	ret void;

}

(0.547278) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.547292) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.547326) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.547534) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_testShr_opt3_ws1(%LLVMContext.2* %__ctaContext) nounwind align 1 {
"$OcelotRegisterInitializerBlock":
  %ri60 = bitcast i32 0 to i32
  %ri59 = bitcast i32 0 to i32
  br label %"$BB_5_0002"

"$BB_5_0002":                                     ; preds = %"$BB_5_0002_entry", %"$OcelotRegisterInitializerBlock"
  %r0 = bitcast i64 0 to i64
  %rt0 = getelementptr %LLVMContext.2* %__ctaContext, i32 0, i32 2, i32 0
  %rt1 = load i32* %rt0
  %r1 = bitcast i32 %rt1 to i32
  %rt2 = getelementptr %LLVMContext.2* %__ctaContext, i32 0, i32 1, i32 0
  %rt3 = load i32* %rt2
  %r2 = bitcast i32 %rt3 to i32
  %r3 = mul i32 %r1, %r2
  %rt4 = getelementptr %LLVMContext.2* %__ctaContext, i32 0, i32 0, i32 0
  %rt5 = load i32* %rt4
  %r4 = bitcast i32 %rt5 to i32
  %r5 = add i32 %r3, %r4
  %r6 = mul i32 %r5, 2
  %r7 = zext i32 %r4 to i64
  %rt6 = zext i32 %r4 to i64
  %r8 = mul i64 %rt6, 4
  %r9 = add i64 %r0, %r8
  %rt7 = getelementptr %LLVMContext.2* %__ctaContext, i32 0, i32 5
  %rt8 = load i8** %rt7
  %rt9 = ptrtoint i8* %rt8 to i64
  %rt10 = add i64 %r9, %rt9
  %rt11 = inttoptr i64 %rt10 to i32*
  store i32 %r6, i32* %rt11, align 4
  br i1 true, label %"$BB_5_0002_exit", label %"$BB_5_0002_bar"

"$BB_5_0002_bar":                                 ; preds = %"$BB_5_0002_bar_entry", %"$BB_5_0002"
  %r11 = phi i32 [ %r4, %"$BB_5_0002" ], [ %r35, %"$BB_5_0002_bar_entry" ]
  %r12 = phi i32 [ %r5, %"$BB_5_0002" ], [ %r34, %"$BB_5_0002_bar_entry" ]
  %r10 = phi i64 [ %r0, %"$BB_5_0002" ], [ %r36, %"$BB_5_0002_bar_entry" ]
  %r13 = xor i32 %r11, 1
  %r14 = zext i32 %r13 to i64
  %rt12 = zext i32 %r13 to i64
  %r15 = mul i64 %rt12, 4
  %r16 = add i64 %r10, %r15
  %rt13 = getelementptr %LLVMContext.2* %__ctaContext, i32 0, i32 5
  %rt14 = load i8** %rt13
  %rt15 = ptrtoint i8* %rt14 to i64
  %rt16 = add i64 %r16, %rt15
  %rt17 = inttoptr i64 %rt16 to i32*
  %r17 = load i32* %rt17, align 4
  %r18 = and i32 %r12, 1
  %r19 = bitcast i32 0 to i32
  %r20 = icmp eq i32 %r18, %r19
  br i1 %r20, label %"$BB_5_0004", label %"$BB_5_0003"

"$BB_5_0003":                                     ; preds = %"$BB_5_0003_entry", %"$BB_5_0002_bar"
  %r22 = phi i32 [ %r12, %"$BB_5_0002_bar" ], [ %r38, %"$BB_5_0003_entry" ]
  %r21 = phi i32 [ %r17, %"$BB_5_0002_bar" ], [ %r39, %"$BB_5_0003_entry" ]
  %r23 = mul i32 %r21, 19
  br label %"$BB_5_0005"

"$BB_5_0004":                                     ; preds = %"$BB_5_0004_entry", %"$BB_5_0002_bar"
  %r24 = phi i32 [ %r42, %"$BB_5_0004_entry" ], [ %r17, %"$BB_5_0002_bar" ]
  %r25 = phi i32 [ %r41, %"$BB_5_0004_entry" ], [ %r12, %"$BB_5_0002_bar" ]
  %r26 = mul i32 %r24, 13
  br label %"$BB_5_0005"

"$BB_5_0005":                                     ; preds = %"$BB_5_0005_entry", %"$BB_5_0004", %"$BB_5_0003"
  %r27 = phi i32 [ %r45, %"$BB_5_0005_entry" ], [ %r22, %"$BB_5_0003" ], [ %r25, %"$BB_5_0004" ]
  %r28 = phi i32 [ %r44, %"$BB_5_0005_entry" ], [ %r23, %"$BB_5_0003" ], [ %r26, %"$BB_5_0004" ]
  %rt18 = getelementptr %LLVMContext.2* %__ctaContext, i32 0, i32 8
  %rt19 = load i8** %rt18
  %rt20 = bitcast i8* %rt19 to i64*
  %r29 = load i64* %rt20, align 8
  %r30 = sext i32 %r27 to i64
  %rt21 = sext i32 %r27 to i64
  %r31 = mul i64 %rt21, 4
  %r32 = add i64 %r29, %r31
  %rt22 = inttoptr i64 %r32 to i32*
  store i32 %r28, i32* %rt22, align 4
  br i1 true, label %"$BB_5_0005_exit", label %exit

"$BB_5_0002_entry":                               ; No predecessors!
  br label %"$BB_5_0002"

"$BB_5_0002_bar_entry":                           ; No predecessors!
  %r33 = bitcast i32 8 to i32
  %rt23 = zext i32 %r33 to i64
  %rt24 = add i64 %rt23, 40
  %rt25 = getelementptr %LLVMContext.2* %__ctaContext, i32 0, i32 4
  %rt26 = load i8** %rt25
  %rt27 = ptrtoint i8* %rt26 to i64
  %rt28 = add i64 %rt24, %rt27
  %rt29 = inttoptr i64 %rt28 to i32*
  %r34 = load i32* %rt29, align 4
  %rt30 = zext i32 %r33 to i64
  %rt31 = add i64 %rt30, 32
  %rt32 = getelementptr %LLVMContext.2* %__ctaContext, i32 0, i32 4
  %rt33 = load i8** %rt32
  %rt34 = ptrtoint i8* %rt33 to i64
  %rt35 = add i64 %rt31, %rt34
  %rt36 = inttoptr i64 %rt35 to i32*
  %r35 = load i32* %rt36, align 4
  %rt37 = zext i32 %r33 to i64
  %rt38 = getelementptr %LLVMContext.2* %__ctaContext, i32 0, i32 4
  %rt39 = load i8** %rt38
  %rt40 = ptrtoint i8* %rt39 to i64
  %rt41 = add i64 %rt37, %rt40
  %rt42 = inttoptr i64 %rt41 to i64*
  %r36 = load i64* %rt42, align 8
  br label %"$BB_5_0002_bar"

"$BB_5_0003_entry":                               ; No predecessors!
  %r37 = bitcast i32 8 to i32
  %rt43 = zext i32 %r37 to i64
  %rt44 = add i64 %rt43, 40
  %rt45 = getelementptr %LLVMContext.2* %__ctaContext, i32 0, i32 4
  %rt46 = load i8** %rt45
  %rt47 = ptrtoint i8* %rt46 to i64
  %rt48 = add i64 %rt44, %rt47
  %rt49 = inttoptr i64 %rt48 to i32*
  %r38 = load i32* %rt49, align 4
  %rt50 = zext i32 %r37 to i64
  %rt51 = add i64 %rt50, 112
  %rt52 = getelementptr %LLVMContext.2* %__ctaContext, i32 0, i32 4
  %rt53 = load i8** %rt52
  %rt54 = ptrtoint i8* %rt53 to i64
  %rt55 = add i64 %rt51, %rt54
  %rt56 = inttoptr i64 %rt55 to i32*
  %r39 = load i32* %rt56, align 4
  br label %"$BB_5_0003"

"$BB_5_0004_entry":                               ; No predecessors!
  %r40 = bitcast i32 8 to i32
  %rt57 = zext i32 %r40 to i64
  %rt58 = add i64 %rt57, 40
  %rt59 = getelementptr %LLVMContext.2* %__ctaContext, i32 0, i32 4
  %rt60 = load i8** %rt59
  %rt61 = ptrtoint i8* %rt60 to i64
  %rt62 = add i64 %rt58, %rt61
  %rt63 = inttoptr i64 %rt62 to i32*
  %r41 = load i32* %rt63, align 4
  %rt64 = zext i32 %r40 to i64
  %rt65 = add i64 %rt64, 112
  %rt66 = getelementptr %LLVMContext.2* %__ctaContext, i32 0, i32 4
  %rt67 = load i8** %rt66
  %rt68 = ptrtoint i8* %rt67 to i64
  %rt69 = add i64 %rt65, %rt68
  %rt70 = inttoptr i64 %rt69 to i32*
  %r42 = load i32* %rt70, align 4
  br label %"$BB_5_0004"

"$BB_5_0005_entry":                               ; No predecessors!
  %r43 = bitcast i32 8 to i32
  %rt71 = zext i32 %r43 to i64
  %rt72 = add i64 %rt71, 144
  %rt73 = getelementptr %LLVMContext.2* %__ctaContext, i32 0, i32 4
  %rt74 = load i8** %rt73
  %rt75 = ptrtoint i8* %rt74 to i64
  %rt76 = add i64 %rt72, %rt75
  %rt77 = inttoptr i64 %rt76 to i32*
  %r44 = load i32* %rt77, align 4
  %rt78 = zext i32 %r43 to i64
  %rt79 = add i64 %rt78, 40
  %rt80 = getelementptr %LLVMContext.2* %__ctaContext, i32 0, i32 4
  %rt81 = load i8** %rt80
  %rt82 = ptrtoint i8* %rt81 to i64
  %rt83 = add i64 %rt79, %rt82
  %rt84 = inttoptr i64 %rt83 to i32*
  %r45 = load i32* %rt84, align 4
  br label %"$BB_5_0005"

"$BB_5_0002_exit":                                ; preds = %"$BB_5_0002"
  %r46 = phi i64 [ %r0, %"$BB_5_0002" ]
  %r47 = phi i32 [ %r4, %"$BB_5_0002" ]
  %r48 = phi i32 [ %r5, %"$BB_5_0002" ]
  %r49 = bitcast i32 8 to i32
  %rt85 = zext i32 %r49 to i64
  %rt86 = getelementptr %LLVMContext.2* %__ctaContext, i32 0, i32 4
  %rt87 = load i8** %rt86
  %rt88 = ptrtoint i8* %rt87 to i64
  %rt89 = add i64 %rt85, %rt88
  %rt90 = inttoptr i64 %rt89 to i64*
  store i64 %r46, i64* %rt90, align 8
  %rt91 = zext i32 %r49 to i64
  %rt92 = add i64 %rt91, 32
  %rt93 = getelementptr %LLVMContext.2* %__ctaContext, i32 0, i32 4
  %rt94 = load i8** %rt93
  %rt95 = ptrtoint i8* %rt94 to i64
  %rt96 = add i64 %rt92, %rt95
  %rt97 = inttoptr i64 %rt96 to i32*
  store i32 %r47, i32* %rt97, align 4
  %rt98 = zext i32 %r49 to i64
  %rt99 = add i64 %rt98, 40
  %rt100 = getelementptr %LLVMContext.2* %__ctaContext, i32 0, i32 4
  %rt101 = load i8** %rt100
  %rt102 = ptrtoint i8* %rt101 to i64
  %rt103 = add i64 %rt99, %rt102
  %rt104 = inttoptr i64 %rt103 to i32*
  store i32 %r48, i32* %rt104, align 4
  %r50 = bitcast i32 4 to i32
  %rt105 = zext i32 %r50 to i64
  %rt106 = getelementptr %LLVMContext.2* %__ctaContext, i32 0, i32 4
  %rt107 = load i8** %rt106
  %rt108 = ptrtoint i8* %rt107 to i64
  %rt109 = add i64 %rt105, %rt108
  %rt110 = inttoptr i64 %rt109 to i32*
  store i32 131073, i32* %rt110, align 4
  %r51 = bitcast i32 0 to i32
  %rt111 = zext i32 %r51 to i64
  %rt112 = getelementptr %LLVMContext.2* %__ctaContext, i32 0, i32 4
  %rt113 = load i8** %rt112
  %rt114 = ptrtoint i8* %rt113 to i64
  %rt115 = add i64 %rt111, %rt114
  %rt116 = inttoptr i64 %rt115 to i32*
  store i32 5, i32* %rt116, align 4
  br label %exit

"$BB_5_0002_bar_exit":                            ; No predecessors!
  %r52 = phi i32 [ %r17, %"$BB_5_0002_bar" ]
  %r53 = phi i32 [ %r12, %"$BB_5_0002_bar" ]
  %r54 = phi i1 [ %r20, %"$BB_5_0002_bar" ]
  %r55 = bitcast i32 8 to i32
  %rt117 = zext i32 %r55 to i64
  %rt118 = add i64 %rt117, 112
  %rt119 = getelementptr %LLVMContext.2* %__ctaContext, i32 0, i32 4
  %rt120 = load i8** %rt119
  %rt121 = ptrtoint i8* %rt120 to i64
  %rt122 = add i64 %rt118, %rt121
  %rt123 = inttoptr i64 %rt122 to i32*
  store i32 %r52, i32* %rt123, align 4
  %rt124 = zext i32 %r55 to i64
  %rt125 = add i64 %rt124, 40
  %rt126 = getelementptr %LLVMContext.2* %__ctaContext, i32 0, i32 4
  %rt127 = load i8** %rt126
  %rt128 = ptrtoint i8* %rt127 to i64
  %rt129 = add i64 %rt125, %rt128
  %rt130 = inttoptr i64 %rt129 to i32*
  store i32 %r53, i32* %rt130, align 4
  %r56 = select i1 %r54, i32 131075, i32 131074
  %r57 = bitcast i32 4 to i32
  %rt131 = zext i32 %r57 to i64
  %rt132 = getelementptr %LLVMContext.2* %__ctaContext, i32 0, i32 4
  %rt133 = load i8** %rt132
  %rt134 = ptrtoint i8* %rt133 to i64
  %rt135 = add i64 %rt131, %rt134
  %rt136 = inttoptr i64 %rt135 to i32*
  store i32 %r56, i32* %rt136, align 4
  %r58 = bitcast i32 0 to i32
  %rt137 = zext i32 %r58 to i64
  %rt138 = getelementptr %LLVMContext.2* %__ctaContext, i32 0, i32 4
  %rt139 = load i8** %rt138
  %rt140 = ptrtoint i8* %rt139 to i64
  %rt141 = add i64 %rt137, %rt140
  %rt142 = inttoptr i64 %rt141 to i32*
  store i32 2, i32* %rt142, align 4
  br label %exit

"$BB_5_0004_exit":                                ; No predecessors!
  %r59 = phi i32 [ %ri59, %"$OcelotRegisterInitializerBlock" ]
  %r60 = phi i32 [ %ri60, %"$OcelotRegisterInitializerBlock" ]
  %r61 = bitcast i32 8 to i32
  %rt143 = zext i32 %r61 to i64
  %rt144 = add i64 %rt143, 40
  %rt145 = getelementptr %LLVMContext.2* %__ctaContext, i32 0, i32 4
  %rt146 = load i8** %rt145
  %rt147 = ptrtoint i8* %rt146 to i64
  %rt148 = add i64 %rt144, %rt147
  %rt149 = inttoptr i64 %rt148 to i32*
  store i32 %r59, i32* %rt149, align 4
  %rt150 = zext i32 %r61 to i64
  %rt151 = add i64 %rt150, 144
  %rt152 = getelementptr %LLVMContext.2* %__ctaContext, i32 0, i32 4
  %rt153 = load i8** %rt152
  %rt154 = ptrtoint i8* %rt153 to i64
  %rt155 = add i64 %rt151, %rt154
  %rt156 = inttoptr i64 %rt155 to i32*
  store i32 %r60, i32* %rt156, align 4
  ret void

"$BB_5_0005_exit":                                ; preds = %"$BB_5_0005"
  %r62 = bitcast i32 0 to i32
  %rt157 = zext i32 %r62 to i64
  %rt158 = getelementptr %LLVMContext.2* %__ctaContext, i32 0, i32 4
  %rt159 = load i8** %rt158
  %rt160 = ptrtoint i8* %rt159 to i64
  %rt161 = add i64 %rt157, %rt160
  %rt162 = inttoptr i64 %rt161 to i32*
  store i32 6, i32* %rt162, align 4
  br label %exit

exit:                                             ; preds = %"$BB_5_0005_exit", %"$BB_5_0002_bar_exit", %"$BB_5_0002_exit", %"$BB_5_0005"
  ret void
}


_Z_ocelotTranslated_testShr_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.2* %__ctaContext to %LLVMContext.2**
  %context.t0 = load %LLVMContext.2** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.2* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.threadId.x = getelementptr %LLVMContext.2* %context.t0, i64 0, i32 0, i32 0
  %threadId_x.0. = load i32* %ptr.threadId.x, align 4
  %ptr.sharedMem. = getelementptr %LLVMContext.2* %context.t0, i64 0, i32 5
  %threadIdPtr.0. = load i8** %ptr.sharedMem., align 8
  %ptr.argMem. = getelementptr %LLVMContext.2* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %ptr = getelementptr i8* %localMemPtr.0, i64 4
  %ptrEntryPoint = bitcast i8* %ptr to i32*
  %warpEntryId = load i32* %ptrEntryPoint, align 4
  %warpEntryPoint = and i32 %warpEntryId, 65535
  switch i32 %warpEntryPoint, label %"$BB_5_0002_exit" [
    i32 4, label %"$BB_5_0005_entry"
    i32 1, label %"$BB_5_0002_bar"
    i32 2, label %"$BB_5_0003_entry"
    i32 3, label %"$BB_5_0004_entry"
  ]

"$BB_5_0002_bar":       // predecessors: { WarpSynchronousEntry,   }
  %rt27 = ptrtoint i8* %localMemPtr.0 to i64
  %rt28 = add i64 %rt27, 48
  %rt29 = inttoptr i64 %rt28 to i32*
  %r34 = load i32* %rt29, align 4
  %rt35 = add i64 %rt27, 40
  %rt36 = inttoptr i64 %rt35 to i32*
  %r35 = load i32* %rt36, align 4
  %rt41 = add i64 %rt27, 8
  %rt42 = inttoptr i64 %rt41 to i64*
  %r36 = load i64* %rt42, align 8
  %r13 = xor i32 %r35, 1
  %rt12 = zext i32 %r13 to i64
  %r15 = shl nuw nsw i64 %rt12, 2
  %rt15 = ptrtoint i8* %threadIdPtr.0. to i64
  %r16 = add i64 %r36, %rt15
  %rt16 = add i64 %r16, %r15
  %rt17 = inttoptr i64 %rt16 to i32*
  %r17 = load i32* %rt17, align 4
  %r18 = and i32 %r34, 1
  %r20 = icmp eq i32 %r18, 0
  br i1 %r20, label %"$BB_5_0004", label %"$BB_5_0003"

"$BB_5_0003":       // predecessors: { $BB_5_0003_entry,  $BB_5_0002_bar,   }
  %r22 = phi i32 [ %r34, %"$BB_5_0002_bar" ], [ %r38, %"$BB_5_0003_entry" ]
  %r21 = phi i32 [ %r17, %"$BB_5_0002_bar" ], [ %r39, %"$BB_5_0003_entry" ]
  %r23 = mul i32 %r21, 19
  br label %"$BB_5_0005_exit"

"$BB_5_0004":       // predecessors: { $BB_5_0004_entry,  $BB_5_0002_bar,   }
  %r24 = phi i32 [ %r42, %"$BB_5_0004_entry" ], [ %r17, %"$BB_5_0002_bar" ]
  %r25 = phi i32 [ %r41, %"$BB_5_0004_entry" ], [ %r34, %"$BB_5_0002_bar" ]
  %r26 = mul i32 %r24, 13
  br label %"$BB_5_0005_exit"

"$BB_5_0003_entry":       // predecessors: { WarpSynchronousEntry,   }
  %rt47 = ptrtoint i8* %localMemPtr.0 to i64
  %rt48 = add i64 %rt47, 48
  %rt49 = inttoptr i64 %rt48 to i32*
  %r38 = load i32* %rt49, align 4
  %rt55 = add i64 %rt47, 120
  %rt56 = inttoptr i64 %rt55 to i32*
  %r39 = load i32* %rt56, align 4
  br label %"$BB_5_0003"

"$BB_5_0004_entry":       // predecessors: { WarpSynchronousEntry,   }
  %rt61 = ptrtoint i8* %localMemPtr.0 to i64
  %rt62 = add i64 %rt61, 48
  %rt63 = inttoptr i64 %rt62 to i32*
  %r41 = load i32* %rt63, align 4
  %rt69 = add i64 %rt61, 120
  %rt70 = inttoptr i64 %rt69 to i32*
  %r42 = load i32* %rt70, align 4
  br label %"$BB_5_0004"

"$BB_5_0005_entry":       // predecessors: { WarpSynchronousEntry,   }
  %rt75 = ptrtoint i8* %localMemPtr.0 to i64
  %rt76 = add i64 %rt75, 152
  %rt77 = inttoptr i64 %rt76 to i32*
  %r44 = load i32* %rt77, align 4
  %rt83 = add i64 %rt75, 48
  %rt84 = inttoptr i64 %rt83 to i32*
  %r45 = load i32* %rt84, align 4
  br label %"$BB_5_0005_exit"

"$BB_5_0002_exit":       // predecessors: { WarpSynchronousEntry,   }
  %ptr.blockId.x = getelementptr %LLVMContext.2* %context.t0, i64 0, i32 2, i32 0
  %ptr.blockDim.x = getelementptr %LLVMContext.2* %context.t0, i64 0, i32 1, i32 0
  %blockId_x.0. = load i32* %ptr.blockId.x, align 4
  %blockDim_x.0. = load i32* %ptr.blockDim.x, align 4
  %r3 = mul i32 %blockDim_x.0., %blockId_x.0.
  %r5 = add i32 %r3, %threadId_x.0.
  %r6 = shl i32 %r5, 1
  %rt6 = zext i32 %threadId_x.0. to i64
  %r8 = shl nuw nsw i64 %rt6, 2
  %rt9 = ptrtoint i8* %threadIdPtr.0. to i64
  %rt10 = add i64 %r8, %rt9
  %rt11 = inttoptr i64 %rt10 to i32*
  store i32 %r6, i32* %rt11, align 4
  %rt88 = ptrtoint i8* %localMemPtr.0 to i64
  %rt89 = add i64 %rt88, 8
  %rt90 = inttoptr i64 %rt89 to i64*
  store i64 0, i64* %rt90, align 8
  %rt96 = add i64 %rt88, 40
  %rt97 = inttoptr i64 %rt96 to i32*
  store i32 %threadId_x.0., i32* %rt97, align 4
  %rt103 = add i64 %rt88, 48
  %rt104 = inttoptr i64 %rt103 to i32*
  store i32 %r5, i32* %rt104, align 4
  %rt109 = add i64 %rt88, 4
  %rt110 = inttoptr i64 %rt109 to i32*
  store i32 131073, i32* %rt110, align 4
  %rt116 = bitcast i8* %localMemPtr.0 to i32*
  store i32 5, i32* %rt116, align 4
  br label %exit

"$BB_5_0005_exit":       // predecessors: { $BB_5_0003,  $BB_5_0004,  $BB_5_0005_entry,   }
  %r27 = phi i32 [ %r45, %"$BB_5_0005_entry" ], [ %r22, %"$BB_5_0003" ], [ %r25, %"$BB_5_0004" ]
  %r28 = phi i32 [ %r44, %"$BB_5_0005_entry" ], [ %r23, %"$BB_5_0003" ], [ %r26, %"$BB_5_0004" ]
  %rt20 = bitcast i8* %gridDimPtr.0. to i64*
  %r29 = load i64* %rt20, align 8
  %rt21 = sext i32 %r27 to i64
  %r31 = shl nsw i64 %rt21, 2
  %r32 = add i64 %r29, %r31
  %rt22 = inttoptr i64 %r32 to i32*
  store i32 %r28, i32* %rt22, align 4
  %rt162 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt162, align 4
  br label %exit

"exit":       // predecessors: { $BB_5_0005_exit,  $BB_5_0002_exit,   }
  ret void

}
(0.566633) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.569684) LLVMDynamicTranslationCache.cpp:137:  inserting translation 131072 with 184 bytes of local memory
(0.571632) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.571643) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_testShareConvergent( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_2_0002:
	%r0 = bitcast i64 0 to i64;
	%rt0 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 0, i32 0;
	%rt1 = load i32* %rt0;
	%r1 = bitcast i32 %rt1 to i32;
	%r2 = sext i32 %r1 to i64;
	%rt2 = sext i32 %r1 to i64;
	%r3 = mul i64 %rt2, 4;
	%r4 = mul i32 %r1, 2;
	%r5 = add i64 %r3, %r0;
	%rt3 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 5;
	%rt4 = load i8** %rt3;
	%rt5 = ptrtoint i8* %rt4 to i64;
	%rt6 = add i64 %r5, %rt5;
	%rt7 = inttoptr i64 %rt6 to i32*;
	store i32 %r4, i32* %rt7, align 4;
	br i1 1, label %$BB_2_0002_exit, label %$BB_2_0002_bar;
$BB_2_0002_bar:
	%r6 = phi i64 [ %r0, %$BB_2_0002 ], [ %r20, %$BB_2_0002_bar_entry ];
	%r7 = phi i32 [ %r1, %$BB_2_0002 ], [ %r19, %$BB_2_0002_bar_entry ];
	%r8 = phi i64 [ %r3, %$BB_2_0002 ], [ %r18, %$BB_2_0002_bar_entry ];
	%r9 = xor i32 %r7, 2;
	%r10 = zext i32 %r9 to i64;
	%rt8 = zext i32 %r9 to i64;
	%r11 = mul i64 %rt8, 4;
	%r12 = add i64 %r6, %r11;
	%rt9 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 5;
	%rt10 = load i8** %rt9;
	%rt11 = ptrtoint i8* %rt10 to i64;
	%rt12 = add i64 %r12, %rt11;
	%rt13 = inttoptr i64 %rt12 to i32*;
	%r13 = load i32* %rt13, align 4;
	%r14 = add i32 %r7, %r13;
	%rt14 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt15 = load i8** %rt14;
	%rt16 = bitcast i8* %rt15 to i64*;
	%r15 = load i64* %rt16, align 8;
	%r16 = add i64 %r15, %r8;
	%rt17 = inttoptr i64 %r16 to i32*;
	store i32 %r14, i32* %rt17, align 4;
	br i1 1, label %$BB_2_0002_bar_exit, label %exit;
$BB_2_0002_entry:
	br label %$BB_2_0002;
$BB_2_0002_bar_entry:
	%r17 = bitcast i32 8 to i32;
	%rt18 = zext i32 %r17 to i64;
	%rt19 = add i64 %rt18, 24;
	%rt20 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt21 = load i8** %rt20;
	%rt22 = ptrtoint i8* %rt21 to i64;
	%rt23 = add i64 %rt19, %rt22;
	%rt24 = inttoptr i64 %rt23 to i64*;
	%r18 = load i64* %rt24, align 8;
	%rt25 = zext i32 %r17 to i64;
	%rt26 = add i64 %rt25, 8;
	%rt27 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt28 = load i8** %rt27;
	%rt29 = ptrtoint i8* %rt28 to i64;
	%rt30 = add i64 %rt26, %rt29;
	%rt31 = inttoptr i64 %rt30 to i32*;
	%r19 = load i32* %rt31, align 4;
	%rt32 = zext i32 %r17 to i64;
	%rt33 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt34 = load i8** %rt33;
	%rt35 = ptrtoint i8* %rt34 to i64;
	%rt36 = add i64 %rt32, %rt35;
	%rt37 = inttoptr i64 %rt36 to i64*;
	%r20 = load i64* %rt37, align 8;
	br label %$BB_2_0002_bar;
$BB_2_0002_exit:
	%r22 = phi i32 [ %r1, %$BB_2_0002 ];
	%r23 = phi i64 [ %r3, %$BB_2_0002 ];
	%r21 = phi i64 [ %r0, %$BB_2_0002 ];
	%r24 = bitcast i32 8 to i32;
	%rt38 = zext i32 %r24 to i64;
	%rt39 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt40 = load i8** %rt39;
	%rt41 = ptrtoint i8* %rt40 to i64;
	%rt42 = add i64 %rt38, %rt41;
	%rt43 = inttoptr i64 %rt42 to i64*;
	store i64 %r21, i64* %rt43, align 8;
	%rt44 = zext i32 %r24 to i64;
	%rt45 = add i64 %rt44, 8;
	%rt46 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt47 = load i8** %rt46;
	%rt48 = ptrtoint i8* %rt47 to i64;
	%rt49 = add i64 %rt45, %rt48;
	%rt50 = inttoptr i64 %rt49 to i32*;
	store i32 %r22, i32* %rt50, align 4;
	%rt51 = zext i32 %r24 to i64;
	%rt52 = add i64 %rt51, 24;
	%rt53 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt54 = load i8** %rt53;
	%rt55 = ptrtoint i8* %rt54 to i64;
	%rt56 = add i64 %rt52, %rt55;
	%rt57 = inttoptr i64 %rt56 to i64*;
	store i64 %r23, i64* %rt57, align 8;
	%r25 = bitcast i32 4 to i32;
	%rt58 = zext i32 %r25 to i64;
	%rt59 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt60 = load i8** %rt59;
	%rt61 = ptrtoint i8* %rt60 to i64;
	%rt62 = add i64 %rt58, %rt61;
	%rt63 = inttoptr i64 %rt62 to i32*;
	store i32 196609, i32* %rt63, align 4;
	%r26 = bitcast i32 0 to i32;
	%rt64 = zext i32 %r26 to i64;
	%rt65 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt66 = load i8** %rt65;
	%rt67 = ptrtoint i8* %rt66 to i64;
	%rt68 = add i64 %rt64, %rt67;
	%rt69 = inttoptr i64 %rt68 to i32*;
	store i32 5, i32* %rt69, align 4;
	br label %exit;
$BB_2_0002_bar_exit:
	%r27 = bitcast i32 0 to i32;
	%rt70 = zext i32 %r27 to i64;
	%rt71 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt72 = load i8** %rt71;
	%rt73 = ptrtoint i8* %rt72 to i64;
	%rt74 = add i64 %rt70, %rt73;
	%rt75 = inttoptr i64 %rt74 to i32*;
	store i32 6, i32* %rt75, align 4;
	br label %exit;
exit:
	ret void;

}

(0.572861) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.572873) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.572881) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.573077) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_testShareConvergent_opt3_ws1(%LLVMContext.4* %__ctaContext) nounwind align 1 {
"$BB_2_0002":
  %r0 = bitcast i64 0 to i64
  %rt0 = getelementptr %LLVMContext.4* %__ctaContext, i32 0, i32 0, i32 0
  %rt1 = load i32* %rt0
  %r1 = bitcast i32 %rt1 to i32
  %r2 = sext i32 %r1 to i64
  %rt2 = sext i32 %r1 to i64
  %r3 = mul i64 %rt2, 4
  %r4 = mul i32 %r1, 2
  %r5 = add i64 %r3, %r0
  %rt3 = getelementptr %LLVMContext.4* %__ctaContext, i32 0, i32 5
  %rt4 = load i8** %rt3
  %rt5 = ptrtoint i8* %rt4 to i64
  %rt6 = add i64 %r5, %rt5
  %rt7 = inttoptr i64 %rt6 to i32*
  store i32 %r4, i32* %rt7, align 4
  br i1 true, label %"$BB_2_0002_exit", label %"$BB_2_0002_bar"

"$BB_2_0002_bar":                                 ; preds = %"$BB_2_0002_bar_entry", %"$BB_2_0002"
  %r6 = phi i64 [ %r0, %"$BB_2_0002" ], [ %r20, %"$BB_2_0002_bar_entry" ]
  %r7 = phi i32 [ %r1, %"$BB_2_0002" ], [ %r19, %"$BB_2_0002_bar_entry" ]
  %r8 = phi i64 [ %r3, %"$BB_2_0002" ], [ %r18, %"$BB_2_0002_bar_entry" ]
  %r9 = xor i32 %r7, 2
  %r10 = zext i32 %r9 to i64
  %rt8 = zext i32 %r9 to i64
  %r11 = mul i64 %rt8, 4
  %r12 = add i64 %r6, %r11
  %rt9 = getelementptr %LLVMContext.4* %__ctaContext, i32 0, i32 5
  %rt10 = load i8** %rt9
  %rt11 = ptrtoint i8* %rt10 to i64
  %rt12 = add i64 %r12, %rt11
  %rt13 = inttoptr i64 %rt12 to i32*
  %r13 = load i32* %rt13, align 4
  %r14 = add i32 %r7, %r13
  %rt14 = getelementptr %LLVMContext.4* %__ctaContext, i32 0, i32 8
  %rt15 = load i8** %rt14
  %rt16 = bitcast i8* %rt15 to i64*
  %r15 = load i64* %rt16, align 8
  %r16 = add i64 %r15, %r8
  %rt17 = inttoptr i64 %r16 to i32*
  store i32 %r14, i32* %rt17, align 4
  br i1 true, label %"$BB_2_0002_bar_exit", label %exit

"$BB_2_0002_entry":                               ; No predecessors!
  br label %"$BB_2_0002"

"$BB_2_0002_bar_entry":                           ; No predecessors!
  %r17 = bitcast i32 8 to i32
  %rt18 = zext i32 %r17 to i64
  %rt19 = add i64 %rt18, 24
  %rt20 = getelementptr %LLVMContext.4* %__ctaContext, i32 0, i32 4
  %rt21 = load i8** %rt20
  %rt22 = ptrtoint i8* %rt21 to i64
  %rt23 = add i64 %rt19, %rt22
  %rt24 = inttoptr i64 %rt23 to i64*
  %r18 = load i64* %rt24, align 8
  %rt25 = zext i32 %r17 to i64
  %rt26 = add i64 %rt25, 8
  %rt27 = getelementptr %LLVMContext.4* %__ctaContext, i32 0, i32 4
  %rt28 = load i8** %rt27
  %rt29 = ptrtoint i8* %rt28 to i64
  %rt30 = add i64 %rt26, %rt29
  %rt31 = inttoptr i64 %rt30 to i32*
  %r19 = load i32* %rt31, align 4
  %rt32 = zext i32 %r17 to i64
  %rt33 = getelementptr %LLVMContext.4* %__ctaContext, i32 0, i32 4
  %rt34 = load i8** %rt33
  %rt35 = ptrtoint i8* %rt34 to i64
  %rt36 = add i64 %rt32, %rt35
  %rt37 = inttoptr i64 %rt36 to i64*
  %r20 = load i64* %rt37, align 8
  br label %"$BB_2_0002_bar"

"$BB_2_0002_exit":                                ; preds = %"$BB_2_0002"
  %r22 = phi i32 [ %r1, %"$BB_2_0002" ]
  %r23 = phi i64 [ %r3, %"$BB_2_0002" ]
  %r21 = phi i64 [ %r0, %"$BB_2_0002" ]
  %r24 = bitcast i32 8 to i32
  %rt38 = zext i32 %r24 to i64
  %rt39 = getelementptr %LLVMContext.4* %__ctaContext, i32 0, i32 4
  %rt40 = load i8** %rt39
  %rt41 = ptrtoint i8* %rt40 to i64
  %rt42 = add i64 %rt38, %rt41
  %rt43 = inttoptr i64 %rt42 to i64*
  store i64 %r21, i64* %rt43, align 8
  %rt44 = zext i32 %r24 to i64
  %rt45 = add i64 %rt44, 8
  %rt46 = getelementptr %LLVMContext.4* %__ctaContext, i32 0, i32 4
  %rt47 = load i8** %rt46
  %rt48 = ptrtoint i8* %rt47 to i64
  %rt49 = add i64 %rt45, %rt48
  %rt50 = inttoptr i64 %rt49 to i32*
  store i32 %r22, i32* %rt50, align 4
  %rt51 = zext i32 %r24 to i64
  %rt52 = add i64 %rt51, 24
  %rt53 = getelementptr %LLVMContext.4* %__ctaContext, i32 0, i32 4
  %rt54 = load i8** %rt53
  %rt55 = ptrtoint i8* %rt54 to i64
  %rt56 = add i64 %rt52, %rt55
  %rt57 = inttoptr i64 %rt56 to i64*
  store i64 %r23, i64* %rt57, align 8
  %r25 = bitcast i32 4 to i32
  %rt58 = zext i32 %r25 to i64
  %rt59 = getelementptr %LLVMContext.4* %__ctaContext, i32 0, i32 4
  %rt60 = load i8** %rt59
  %rt61 = ptrtoint i8* %rt60 to i64
  %rt62 = add i64 %rt58, %rt61
  %rt63 = inttoptr i64 %rt62 to i32*
  store i32 196609, i32* %rt63, align 4
  %r26 = bitcast i32 0 to i32
  %rt64 = zext i32 %r26 to i64
  %rt65 = getelementptr %LLVMContext.4* %__ctaContext, i32 0, i32 4
  %rt66 = load i8** %rt65
  %rt67 = ptrtoint i8* %rt66 to i64
  %rt68 = add i64 %rt64, %rt67
  %rt69 = inttoptr i64 %rt68 to i32*
  store i32 5, i32* %rt69, align 4
  br label %exit

"$BB_2_0002_bar_exit":                            ; preds = %"$BB_2_0002_bar"
  %r27 = bitcast i32 0 to i32
  %rt70 = zext i32 %r27 to i64
  %rt71 = getelementptr %LLVMContext.4* %__ctaContext, i32 0, i32 4
  %rt72 = load i8** %rt71
  %rt73 = ptrtoint i8* %rt72 to i64
  %rt74 = add i64 %rt70, %rt73
  %rt75 = inttoptr i64 %rt74 to i32*
  store i32 6, i32* %rt75, align 4
  br label %exit

exit:                                             ; preds = %"$BB_2_0002_bar_exit", %"$BB_2_0002_exit", %"$BB_2_0002_bar"
  ret void
}


_Z_ocelotTranslated_testShareConvergent_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.4* %__ctaContext to %LLVMContext.4**
  %context.t0 = load %LLVMContext.4** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.4* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.threadId.x = getelementptr %LLVMContext.4* %context.t0, i64 0, i32 0, i32 0
  %threadId_x.0. = load i32* %ptr.threadId.x, align 4
  %ptr.sharedMem. = getelementptr %LLVMContext.4* %context.t0, i64 0, i32 5
  %threadIdPtr.0. = load i8** %ptr.sharedMem., align 8
  %ptr = getelementptr i8* %localMemPtr.0, i64 4
  %ptrEntryPoint = bitcast i8* %ptr to i32*
  %warpEntryId = load i32* %ptrEntryPoint, align 4
  %warpEntryPoint = and i32 %warpEntryId, 65535
  %cond = icmp eq i32 %warpEntryPoint, 1
  br i1 %cond, label %"$BB_2_0002_bar_exit", label %"$BB_2_0002_exit"

"$BB_2_0002_exit":       // predecessors: { WarpSynchronousEntry,   }
  %rt2 = sext i32 %threadId_x.0. to i64
  %r3 = shl nsw i64 %rt2, 2
  %r4 = shl i32 %threadId_x.0., 1
  %rt5 = ptrtoint i8* %threadIdPtr.0. to i64
  %rt6 = add i64 %r3, %rt5
  %rt7 = inttoptr i64 %rt6 to i32*
  store i32 %r4, i32* %rt7, align 4
  %rt41 = ptrtoint i8* %localMemPtr.0 to i64
  %rt42 = add i64 %rt41, 8
  %rt43 = inttoptr i64 %rt42 to i64*
  store i64 0, i64* %rt43, align 8
  %rt49 = add i64 %rt41, 16
  %rt50 = inttoptr i64 %rt49 to i32*
  store i32 %threadId_x.0., i32* %rt50, align 4
  %rt56 = add i64 %rt41, 32
  %rt57 = inttoptr i64 %rt56 to i64*
  store i64 %r3, i64* %rt57, align 8
  %rt62 = add i64 %rt41, 4
  %rt63 = inttoptr i64 %rt62 to i32*
  store i32 196609, i32* %rt63, align 4
  %rt69 = bitcast i8* %localMemPtr.0 to i32*
  store i32 5, i32* %rt69, align 4
  br label %exit

"$BB_2_0002_bar_exit":       // predecessors: { WarpSynchronousEntry,   }
  %ptr.argMem. = getelementptr %LLVMContext.4* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %rt22 = ptrtoint i8* %localMemPtr.0 to i64
  %rt23 = add i64 %rt22, 32
  %rt24 = inttoptr i64 %rt23 to i64*
  %r18 = load i64* %rt24, align 8
  %rt30 = add i64 %rt22, 16
  %rt31 = inttoptr i64 %rt30 to i32*
  %r19 = load i32* %rt31, align 4
  %rt36 = add i64 %rt22, 8
  %rt37 = inttoptr i64 %rt36 to i64*
  %r20 = load i64* %rt37, align 8
  %r9 = xor i32 %r19, 2
  %rt8 = zext i32 %r9 to i64
  %r11 = shl nuw nsw i64 %rt8, 2
  %rt11 = ptrtoint i8* %threadIdPtr.0. to i64
  %r12 = add i64 %r20, %rt11
  %rt12 = add i64 %r12, %r11
  %rt13 = inttoptr i64 %rt12 to i32*
  %r13 = load i32* %rt13, align 4
  %r14 = add i32 %r13, %r19
  %rt16 = bitcast i8* %gridDimPtr.0. to i64*
  %r15 = load i64* %rt16, align 8
  %r16 = add i64 %r15, %r18
  %rt17 = inttoptr i64 %r16 to i32*
  store i32 %r14, i32* %rt17, align 4
  %rt75 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt75, align 4
  br label %exit

"exit":       // predecessors: { $BB_2_0002_bar_exit,  $BB_2_0002_exit,   }
  ret void

}
(0.582228) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.584020) LLVMDynamicTranslationCache.cpp:137:  inserting translation 196608 with 112 bytes of local memory
(0.585630) LLVMDynamicTranslationCache.cpp:1071: translated PTX to LLVM
(0.585641) LLVMDynamicTranslationCache.cpp:1072: ; Code assembled by Ocelot LLVMKernel 2.0.896


%LLVMContext = type { %Dimension, %Dimension, %Dimension, %Dimension, i8*, i8*, i8*, i8*, i8*, i8* };
declare default i32 @__ocelot_get_extent( %LLVMContext* , i32  ) align 1;
declare default float @llvm.exp2.f32( float  ) align 1;
declare default float @llvm.log2.f32( float  ) align 1;
declare default float @llvm.sin.f32( float  ) align 1;
declare default float @llvm.cos.f32( float  ) align 1;
declare default double @llvm.sqrt.f64( double  ) align 1;
declare default float @llvm.sqrt.f32( float  ) align 1;
declare default i64 @llvm.ctlz.i64( i64  ) align 1;
declare default i32 @llvm.ctlz.i32( i32  ) align 1;
declare default i16 @llvm.ctlz.i16( i16  ) align 1;
declare default i8 @llvm.ctlz.i8( i8  ) align 1;
declare default i64 @llvm.readcyclecounter(  ) align 1;
declare default i64 @llvm.ctpop.i64( i64  ) align 1;
declare default i32 @llvm.ctpop.i32( i32  ) align 1;
declare default i16 @llvm.ctpop.i16( i16  ) align 1;
declare default i8 @llvm.ctpop.i8( i8  ) align 1;
declare default i64 @llvm.atomic.cmp.swap.i64.p0i64( i64* , i64 , i64  ) align 1;
declare default i32 @llvm.atomic.cmp.swap.i32.p0i32( i32* , i32 , i32  ) align 1;
declare default i64 @llvm.atomic.swap.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umax.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.max.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.umin.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.min.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.xor.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.or.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.and.i64.p0i64( i64* , i64  ) align 1;
declare default i64 @llvm.atomic.load.add.i64.p0i64( i64* , i64  ) align 1;
declare default i32 @llvm.atomic.swap.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umax.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.max.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.umin.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.min.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.xor.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.or.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.and.i32.p0i32( i32* , i32  ) align 1;
declare default i32 @llvm.atomic.load.add.i32.p0i32( i32* , i32  ) align 1;
declare default i64 @__ocelot_mul_hi_s64( i64 , i64  ) align 1;
declare default i64 @__ocelot_mul_hi_u64( i64 , i64  ) align 1;
declare default i32* @__ocelot_txq( %LLVMContext* , i32 , i32  ) align 1;
declare default i32 @__ocelot_atomic_dec_32( i64 , i32  ) align 1;
declare default i32 @__ocelot_atomic_inc_32( i64 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fs( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_fu( float* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_ff( float* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_sf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_uf( i32* , %LLVMContext* , i32 , float , float , float , float  ) align 1;
declare default void @__ocelot_tex_3d_ss( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_su( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_us( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_3d_uu( i32* , %LLVMContext* , i32 , i32 , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fs( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_fu( float* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_ff( float* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_sf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_uf( i32* , %LLVMContext* , i32 , float , float  ) align 1;
declare default void @__ocelot_tex_2d_ss( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_su( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_us( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_2d_uu( i32* , %LLVMContext* , i32 , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fs( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_fu( float* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_ff( float* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_sf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_uf( i32* , %LLVMContext* , i32 , float  ) align 1;
declare default void @__ocelot_tex_1d_ss( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_su( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_us( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default void @__ocelot_tex_1d_uu( i32* , %LLVMContext* , i32 , i32  ) align 1;
declare default i1 @__ocelot_vote( i1 , i32 , i1  ) align 1;
declare default i32 @__ocelot_prmt_rc16( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecr( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_ecl( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_rc8( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_b4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt_f4e( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_prmt( i32 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfind_b64( i64 , i1  ) align 1;
declare default i32 @__ocelot_bfind_b32( i32 , i1  ) align 1;
declare default i64 @__ocelot_bfi_b64( i64 , i64 , i32 , i32  ) align 1;
declare default i32 @__ocelot_bfi_b32( i32 , i32 , i32 , i32  ) align 1;
declare default i64 @__ocelot_brev_b64( i64  ) align 1;
declare default i32 @__ocelot_brev_b32( i32  ) align 1;

%Dimension = type { i32, i32, i32 };
define default void @_Z_ocelotTranslated_sequence( %LLVMContext* %__ctaContext ) nounwind align 1;
{
$BB_1_0002:
	%rt0 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 2, i32 0;
	%rt1 = load i32* %rt0;
	%r0 = bitcast i32 %rt1 to i32;
	%rt2 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 1, i32 0;
	%rt3 = load i32* %rt2;
	%r1 = bitcast i32 %rt3 to i32;
	%r2 = mul i32 %r0, %r1;
	%rt4 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 0, i32 0;
	%rt5 = load i32* %rt4;
	%r3 = bitcast i32 %rt5 to i32;
	%r4 = add i32 %r3, %r2;
	%rt7 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt8 = load i8** %rt7;
	%rt6 = getelementptr i8* %rt8, i32 8;
	%rt9 = bitcast i8* %rt6 to i32*;
	%r5 = load i32* %rt9, align 4;
	%r6 = icmp sle i32 %r5, %r4;
	br i1 %r6, label %$BB_1_0004, label %$BB_1_0003;
$BB_1_0003:
	%r7 = phi i32 [ %r4, %$BB_1_0002 ], [ %r15, %$BB_1_0003_entry ];
	%r8 = mul i32 %r7, 2;
	%rt10 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 8;
	%rt11 = load i8** %rt10;
	%rt12 = bitcast i8* %rt11 to i64*;
	%r9 = load i64* %rt12, align 8;
	%r10 = sext i32 %r7 to i64;
	%rt13 = sext i32 %r7 to i64;
	%r11 = mul i64 %rt13, 4;
	%r12 = add i64 %r9, %r11;
	%rt14 = inttoptr i64 %r12 to i32*;
	store i32 %r8, i32* %rt14, align 4;
	br label %$BB_1_0004;
$BB_1_0004:
	br i1 1, label %$BB_1_0004_exit, label %exit;
$BB_1_0004_exit:
	%r13 = bitcast i32 0 to i32;
	%rt15 = zext i32 %r13 to i64;
	%rt16 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt17 = load i8** %rt16;
	%rt18 = ptrtoint i8* %rt17 to i64;
	%rt19 = add i64 %rt15, %rt18;
	%rt20 = inttoptr i64 %rt19 to i32*;
	store i32 6, i32* %rt20, align 4;
	br label %exit;
$BB_1_0002_entry:
	br label %$BB_1_0002;
$BB_1_0003_entry:
	%r14 = bitcast i32 8 to i32;
	%rt21 = zext i32 %r14 to i64;
	%rt22 = add i64 %rt21, 32;
	%rt23 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt24 = load i8** %rt23;
	%rt25 = ptrtoint i8* %rt24 to i64;
	%rt26 = add i64 %rt22, %rt25;
	%rt27 = inttoptr i64 %rt26 to i32*;
	%r15 = load i32* %rt27, align 4;
	br label %$BB_1_0003;
$BB_1_0004_entry:
	br label %$BB_1_0004;
$BB_1_0002_exit:
	%r16 = phi i32 [ %r4, %$BB_1_0002 ];
	%r17 = phi i1 [ %r6, %$BB_1_0002 ];
	%r18 = bitcast i32 8 to i32;
	%rt28 = zext i32 %r18 to i64;
	%rt29 = add i64 %rt28, 32;
	%rt30 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt31 = load i8** %rt30;
	%rt32 = ptrtoint i8* %rt31 to i64;
	%rt33 = add i64 %rt29, %rt32;
	%rt34 = inttoptr i64 %rt33 to i32*;
	store i32 %r16, i32* %rt34, align 4;
	%r19 = select i1 %r17, i32 262146, i32 262145;
	%r20 = bitcast i32 4 to i32;
	%rt35 = zext i32 %r20 to i64;
	%rt36 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt37 = load i8** %rt36;
	%rt38 = ptrtoint i8* %rt37 to i64;
	%rt39 = add i64 %rt35, %rt38;
	%rt40 = inttoptr i64 %rt39 to i32*;
	store i32 %r19, i32* %rt40, align 4;
	%r21 = bitcast i32 0 to i32;
	%rt41 = zext i32 %r21 to i64;
	%rt42 = getelementptr %LLVMContext* %__ctaContext, i32 0, i32 4;
	%rt43 = load i8** %rt42;
	%rt44 = ptrtoint i8* %rt43 to i64;
	%rt45 = add i64 %rt41, %rt44;
	%rt46 = inttoptr i64 %rt45 to i32*;
	store i32 2, i32* %rt46, align 4;
	br label %exit;
$BB_1_0003_exit:
	ret void;
exit:
	ret void;

}

(0.586767) LLVMDynamicTranslationCache.cpp:1411: cloning source module
(0.586778) LLVMDynamicTranslationCache.cpp:1417:   cloning variables
(0.586786) LLVMDynamicTranslationCache.cpp:1434:   cloning functions
(0.586979) LLVMDynamicTranslationCache.cpp:1445:   done
Cloned function:

define internal void @_Z_ocelotTranslated_sequence_opt3_ws1(%LLVMContext.6* %__ctaContext) nounwind align 1 {
"$BB_1_0002":
  %rt0 = getelementptr %LLVMContext.6* %__ctaContext, i32 0, i32 2, i32 0
  %rt1 = load i32* %rt0
  %r0 = bitcast i32 %rt1 to i32
  %rt2 = getelementptr %LLVMContext.6* %__ctaContext, i32 0, i32 1, i32 0
  %rt3 = load i32* %rt2
  %r1 = bitcast i32 %rt3 to i32
  %r2 = mul i32 %r0, %r1
  %rt4 = getelementptr %LLVMContext.6* %__ctaContext, i32 0, i32 0, i32 0
  %rt5 = load i32* %rt4
  %r3 = bitcast i32 %rt5 to i32
  %r4 = add i32 %r3, %r2
  %rt7 = getelementptr %LLVMContext.6* %__ctaContext, i32 0, i32 8
  %rt8 = load i8** %rt7
  %rt6 = getelementptr i8* %rt8, i32 8
  %rt9 = bitcast i8* %rt6 to i32*
  %r5 = load i32* %rt9, align 4
  %r6 = icmp sle i32 %r5, %r4
  br i1 %r6, label %"$BB_1_0004", label %"$BB_1_0003"

"$BB_1_0003":                                     ; preds = %"$BB_1_0003_entry", %"$BB_1_0002"
  %r7 = phi i32 [ %r4, %"$BB_1_0002" ], [ %r15, %"$BB_1_0003_entry" ]
  %r8 = mul i32 %r7, 2
  %rt10 = getelementptr %LLVMContext.6* %__ctaContext, i32 0, i32 8
  %rt11 = load i8** %rt10
  %rt12 = bitcast i8* %rt11 to i64*
  %r9 = load i64* %rt12, align 8
  %r10 = sext i32 %r7 to i64
  %rt13 = sext i32 %r7 to i64
  %r11 = mul i64 %rt13, 4
  %r12 = add i64 %r9, %r11
  %rt14 = inttoptr i64 %r12 to i32*
  store i32 %r8, i32* %rt14, align 4
  br label %"$BB_1_0004"

"$BB_1_0004":                                     ; preds = %"$BB_1_0004_entry", %"$BB_1_0003", %"$BB_1_0002"
  br i1 true, label %"$BB_1_0004_exit", label %exit

"$BB_1_0004_exit":                                ; preds = %"$BB_1_0004"
  %r13 = bitcast i32 0 to i32
  %rt15 = zext i32 %r13 to i64
  %rt16 = getelementptr %LLVMContext.6* %__ctaContext, i32 0, i32 4
  %rt17 = load i8** %rt16
  %rt18 = ptrtoint i8* %rt17 to i64
  %rt19 = add i64 %rt15, %rt18
  %rt20 = inttoptr i64 %rt19 to i32*
  store i32 6, i32* %rt20, align 4
  br label %exit

"$BB_1_0002_entry":                               ; No predecessors!
  br label %"$BB_1_0002"

"$BB_1_0003_entry":                               ; No predecessors!
  %r14 = bitcast i32 8 to i32
  %rt21 = zext i32 %r14 to i64
  %rt22 = add i64 %rt21, 32
  %rt23 = getelementptr %LLVMContext.6* %__ctaContext, i32 0, i32 4
  %rt24 = load i8** %rt23
  %rt25 = ptrtoint i8* %rt24 to i64
  %rt26 = add i64 %rt22, %rt25
  %rt27 = inttoptr i64 %rt26 to i32*
  %r15 = load i32* %rt27, align 4
  br label %"$BB_1_0003"

"$BB_1_0004_entry":                               ; No predecessors!
  br label %"$BB_1_0004"

"$BB_1_0002_exit":                                ; No predecessors!
  %r16 = phi i32 [ %r4, %"$BB_1_0002" ]
  %r17 = phi i1 [ %r6, %"$BB_1_0002" ]
  %r18 = bitcast i32 8 to i32
  %rt28 = zext i32 %r18 to i64
  %rt29 = add i64 %rt28, 32
  %rt30 = getelementptr %LLVMContext.6* %__ctaContext, i32 0, i32 4
  %rt31 = load i8** %rt30
  %rt32 = ptrtoint i8* %rt31 to i64
  %rt33 = add i64 %rt29, %rt32
  %rt34 = inttoptr i64 %rt33 to i32*
  store i32 %r16, i32* %rt34, align 4
  %r19 = select i1 %r17, i32 262146, i32 262145
  %r20 = bitcast i32 4 to i32
  %rt35 = zext i32 %r20 to i64
  %rt36 = getelementptr %LLVMContext.6* %__ctaContext, i32 0, i32 4
  %rt37 = load i8** %rt36
  %rt38 = ptrtoint i8* %rt37 to i64
  %rt39 = add i64 %rt35, %rt38
  %rt40 = inttoptr i64 %rt39 to i32*
  store i32 %r19, i32* %rt40, align 4
  %r21 = bitcast i32 0 to i32
  %rt41 = zext i32 %r21 to i64
  %rt42 = getelementptr %LLVMContext.6* %__ctaContext, i32 0, i32 4
  %rt43 = load i8** %rt42
  %rt44 = ptrtoint i8* %rt43 to i64
  %rt45 = add i64 %rt41, %rt44
  %rt46 = inttoptr i64 %rt45 to i32*
  store i32 2, i32* %rt46, align 4
  br label %exit

"$BB_1_0003_exit":                                ; No predecessors!
  ret void

exit:                                             ; preds = %"$BB_1_0002_exit", %"$BB_1_0004_exit", %"$BB_1_0004"
  ret void
}


_Z_ocelotTranslated_sequence_opt3_ws1 {
"WarpSynchronousEntry":       //  NO PREDECESSORS
  %contexts = bitcast %LLVMContext.6* %__ctaContext to %LLVMContext.6**
  %context.t0 = load %LLVMContext.6** %contexts, align 8
  %ptrLocalMemPtr = getelementptr %LLVMContext.6* %context.t0, i64 0, i32 4
  %localMemPtr.0 = load i8** %ptrLocalMemPtr, align 8
  %ptr.argMem. = getelementptr %LLVMContext.6* %context.t0, i64 0, i32 8
  %gridDimPtr.0. = load i8** %ptr.argMem., align 8
  %ptr = getelementptr i8* %localMemPtr.0, i64 4
  %ptrEntryPoint = bitcast i8* %ptr to i32*
  %warpEntryId = load i32* %ptrEntryPoint, align 4
  %warpEntryPoint = and i32 %warpEntryId, 65535
  switch i32 %warpEntryPoint, label %"$BB_1_0002" [
    i32 2, label %exit
    i32 1, label %"$BB_1_0003_entry"
  ]

"$BB_1_0002":       // predecessors: { WarpSynchronousEntry,   }
  %ptr.blockId.x = getelementptr %LLVMContext.6* %context.t0, i64 0, i32 2, i32 0
  %ptr.blockDim.x = getelementptr %LLVMContext.6* %context.t0, i64 0, i32 1, i32 0
  %ptr.threadId.x = getelementptr %LLVMContext.6* %context.t0, i64 0, i32 0, i32 0
  %blockId_x.0. = load i32* %ptr.blockId.x, align 4
  %blockDim_x.0. = load i32* %ptr.blockDim.x, align 4
  %threadId_x.0. = load i32* %ptr.threadId.x, align 4
  %r2 = mul i32 %blockDim_x.0., %blockId_x.0.
  %r4 = add i32 %threadId_x.0., %r2
  %rt6 = getelementptr i8* %gridDimPtr.0., i64 8
  %rt9 = bitcast i8* %rt6 to i32*
  %r5 = load i32* %rt9, align 4
  %r6 = icmp sgt i32 %r5, %r4
  br i1 %r6, label %"$BB_1_0003", label %exit

"$BB_1_0003":       // predecessors: { $BB_1_0002,  $BB_1_0003_entry,   }
  %r7 = phi i32 [ %r4, %"$BB_1_0002" ], [ %r15, %"$BB_1_0003_entry" ]
  %r8 = shl i32 %r7, 1
  %rt12 = bitcast i8* %gridDimPtr.0. to i64*
  %r9 = load i64* %rt12, align 8
  %rt13 = sext i32 %r7 to i64
  %r11 = shl nsw i64 %rt13, 2
  %r12 = add i64 %r11, %r9
  %rt14 = inttoptr i64 %r12 to i32*
  store i32 %r8, i32* %rt14, align 4
  br label %exit

"$BB_1_0003_entry":       // predecessors: { WarpSynchronousEntry,   }
  %rt25 = ptrtoint i8* %localMemPtr.0 to i64
  %rt26 = add i64 %rt25, 40
  %rt27 = inttoptr i64 %rt26 to i32*
  %r15 = load i32* %rt27, align 4
  br label %"$BB_1_0003"

"exit":       // predecessors: { WarpSynchronousEntry,  $BB_1_0002,  $BB_1_0003,   }
  %rt20 = bitcast i8* %localMemPtr.0 to i32*
  store i32 6, i32* %rt20, align 4
  ret void

}
(0.593851) LLVMDynamicTranslationCache.cpp:1373: performed transformations
(0.595599) LLVMDynamicTranslationCache.cpp:137:  inserting translation 262144 with 96 bytes of local memory
cudaMemcpy(0x26f8cb0, 0x26f4a00) - APP
Pass/Fail : Pass

INFO     
Passing tests:
 (0.234s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestCalVectorScale : Passed
 (0.449s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestPTXToLLVMTranslator : Passed
 (0.066s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestDeviceSwitching : Passed
 (0.127s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestConvergence : Passed
 (0.238s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestInstructions : Passed
 (0.083s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestDataflowGraph : Passed
 (1.457s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestCudaGlobals : Passed
 (0.135s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestEmulator : Passed
 (0.652s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestKernels : Passed
 (2.647s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestCudaTextureArray : Passed
 (0.033s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestLLVMInstructions : Passed
 (0.085s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestParser : Passed
 (0.779s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestCudaMalloc : Passed
 (1.937s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestCudaTexture2D : Passed
 (2.229s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestCudaSequence : Passed
 (0.152s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestLexer : Passed

Failing tests:
 (2.682s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestPTXAssembly : Did not complete.
 (0.024s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestFunctionCall : Did not complete.
 (0.027s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestIndirectFunctionCall : Did not complete.
 (1.252s) : /home/andrew/repositories/gpuocelot/branch/ocelot-vector-ptx2.1/TestLLVMKernels : Did not complete.

